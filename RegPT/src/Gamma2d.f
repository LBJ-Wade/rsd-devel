c ******************************************************* c
c
      subroutine one_loop_Gamma2d(k1, k2, k3, ss)
c
c ******************************************************* c
c
c     computing one-loop propagator, Gamma2 
c     
      implicit none
c
      integer  ikmax, ik_max
      integer  iq, iqmax, iq_max
      parameter(ikmax=2000)
ccc      parameter(iqmax=300)
      parameter(iqmax=100)
      real*8   ak(ikmax), pk(ikmax)
      real*8   q, qq(iqmax), wq(iqmax)
      real*8   k1, k2, k3
c     /-/-/-/ check  /-/-/-/  
cc      real*8   kernel1, kernel2, kernel3, kernel4, kernel5
c     /-/-/-/ check  /-/-/-/
      real*8   kernel_Gamma2d
      real*8   pi, qmin, qmax
      real*8   ss, pklinq
      common /pk_data/ ak, pk, ik_max
c     /-/-/-/ check  /-/-/-/
cc      common /Gam2_kernel/ kernel1, kernel2, kernel3, kernel4, kernel5
c     /-/-/-/ check  /-/-/-/
      pi = 4.d0 * datan(1.d0)
c     -------------------------------------------------
c
      iq_max = iqmax
      qmin = ak(1)
      qmax = ak(ik_max)
      ss = 0.d0
c
c     /-/-/-/ check  /-/-/-/
cc      open(9,file='kernel_Gamma2.dat',status='unknown')
c     /-/-/-/ check  /-/-/-/
c
      call gauleg(dlog(qmin), dlog(qmax), qq, wq, iq_max)
c
      do 20 iq=1, iq_max
c
         q = dexp(qq(iq))
         call find_pk(q, pklinq)
c
c     /-/-/-/ check  /-/-/-/
cc         write(9,'(1p10e18.10)') k1, k2, k3, q,kernel_Gamma2(k1,k2,k3,q)
cc     &        , kernel1, kernel2, kernel3, kernel4, kernel5
c     /-/-/-/ check  /-/-/-/
c
         ss = ss + wq(iq) * 
     &        kernel_Gamma2d(k1, k2, k3, q) * q**3 * pklinq
c     
 20   continue
c
      ss = ss / (2.d0*pi)**3
c
c     /-/-/-/ check  /-/-/-/
cc      close(9)
c     /-/-/-/ check  /-/-/-/
c
      end
c
c ******************************************************* c
c
      function kernel_Gamma2d(k1, k2, k3, q)
c
c ******************************************************* c
c
      implicit none
      integer ireg
      real*8  kernel_Gamma2d, k1, k2, k3, q
      real*8  kernel_Gamma2d_reg3rd
      real*8  kernel_Gamma2d_highk, kernel_Gamma2d_lowk
      real*8  kernel_Gamma2d_exact, kernel_Gamma2d_iso
      real*8  kernel_Gamma2d_elongate, kernel_Gamma2d_coll
c     -------------------------------------------------
c
c     Tag for whther we use regularized 3rd-order expression or not
      if ( (dabs(k1/q-1.d0).lt.1.d-3).or.(dabs(k2/q-1.d0).lt.1.d-3).or.
     &     (dabs(k3/q-1.d0).lt.1.d-3) ) then
         ireg = 1
      else
         ireg = 0
      endif
c
ccc      if( q.eq.k1 .or. q.eq.k2 .or. q.eq.k3) then
ccc         write(6,*) 'q exactly coinsides with one of k1, k2 & k3 !!!'
ccc         pause
ccc      endif
c
c
      if(ireg.eq.1) then
         kernel_Gamma2d = kernel_Gamma2d_reg3rd(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_reg3rd: q=',
cc     &           q, kernel_Gamma2
      elseif(dabs(k2/k1-1.d0).lt.2.d-2) then
         if (q.gt.10.d0*max(k1, k2, k3)) then
            kernel_Gamma2d = kernel_Gamma2d_lowk(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_lowk: q=',
cc     &           q, kernel_Gamma2
         elseif(q.lt.0.1d0*min(k1, k2, k3)) then
            kernel_Gamma2d = kernel_Gamma2d_highk(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_highk: q=',
cc     &           q, kernel_Gamma2
         else
            kernel_Gamma2d = kernel_Gamma2d_reg3rd(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_reg3rd: q=',
cc     &           q, kernel_Gamma2
cc         else
cc            kernel_Gamma2d = kernel_Gamma2d_iso(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_iso: q=',
cc     &           q, kernel_Gamma2
         endif
      else
         if(q.lt.0.1d0*min(k1, k2, k3)) then
            kernel_Gamma2d = kernel_Gamma2d_highk(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_highk: q=',
cc     &           q, kernel_Gamma2
         elseif(q.gt.10.d0*max(k1, k2, k3)) then
            kernel_Gamma2d = kernel_Gamma2d_lowk(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_lowk: q=',
cc     &           q, kernel_Gamma2
         elseif(q.gt.50.d0*min(k1, k2) .and. (k1**2-k3**2).lt.q**2
     &           .and. (k1**2-k3**2).gt.-q**2) then
            kernel_Gamma2d = kernel_Gamma2d_elongate(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_elongate: q=',
cc     &           q, kernel_Gamma2
         elseif(q.gt.100.d0*k3 .and. k3.lt.10.d0*min(k1,k2)) then
            kernel_Gamma2d = kernel_Gamma2d_coll(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_coll: q=',
cc     &           q, kernel_Gamma2
         else
            kernel_Gamma2d = kernel_Gamma2d_exact(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_exact: q=',
cc     &           q, kernel_Gamma2
         endif
      endif
c
      end
c
c ******************************************************* c
c
      function kernel_Gamma2d_exact(k1, k2, k3, q)
c
c ******************************************************* c
c
c     Exact expression for kernel Gamma2
c
      implicit none
      real*8  kernel_Gamma2d_exact, k1, k2, k3, q
      real*8  kernel1, kernel2, kernel3, kernel4, kernel5
      real*8  WFunc, LFunc
      real*8  pi
cc      common /Gam2_kernel/ kernel1, kernel2, kernel3, kernel4, kernel5
      pi = 4.d0 * datan(1.d0)
c     -------------------------------------------------
c
      kernel1 = (pi*(15.d0*k1**6*k2**6*k3**4*
     -     (3.d0*(k1**2 - k2**2)**2*
     -     (13.d0*k1**4 - 4.d0*k1**2*k2**2 + 13.d0*k2**4) - 
     -     (k1**2 + k2**2)*
     -     (805.d0*k1**4 - 2306.d0*k1**2*k2**2 + 
     -     805.d0*k2**4)*k3**2 + 
     -     (377.d0*k1**4 + 940.d0*k1**2*k2**2 + 377.d0*k2**4)*k3**4 + 
     -     361.d0*(k1**2 + k2**2)*k3**6 + 28.d0*k3**8)/q**4 - 
     -     10.d0*k1**6*k2**6*k3**4*
     -     (3.d0*(k1**2 + k2**2)*
     -     (911.d0*k1**4 - 1570.d0*k1**2*k2**2 + 911.d0*k2**4) + 
     -     (-22261.d0*k1**4 + 45566.d0*k1**2*k2**2 - 
     -     22261.d0*k2**4)*k3**2 + 
     -     12037.d0*(k1**2 + k2**2)*k3**4 + 6891.d0*k3**6)/q**2 + 
     -     k1**4*k2**4*k3**2*
     -     (3150.d0*k1**2*k2**2*(k1**2 - k2**2)**2*(k1**2 + k2**2) + 
     -     3*(19475.d0*k1**8 - 139742.d0*k1**6*k2**2 + 
     -     246974.d0*k1**4*k2**4 - 139742.d0*k1**2*k2**6 + 
     -     19475.d0*k2**8)*k3**2 - 2.d0*(k1**2 + k2**2)*
     -     (53220.d0*k1**4 - 178337.d0*k1**2*k2**2 + 
     -     53220.d0*k2**4)*k3**4
     -     + (38925.d0*k1**4 + 9532.d0*k1**2*k2**2 + 38925.d0*k2**4)*
     -     k3**6 + 9090.d0*(k1**2 + k2**2)*k3**8) - 
     -     15.d0*k1**2*k2**2*(189.d0*k1**4*k2**4*(k1**2 - k2**2)**2*
     -     (k1**2 + k2**2) - 
     -     84.d0*k1**4*k2**4*(43.d0*k1**4 - 80.d0*k1**2*k2**2 + 
     -     43.d0*k2**4)*k3**2 + (k1**2 + k2**2)*
     -     (1949.d0*k1**8 - 10643.d0*k1**6*k2**2 + 
     -     20573.d0*k1**4*k2**4 - 
     -     10643.d0*k1**2*k2**6 + 1949.d0*k2**8)*k3**4 + 
     -     2.d0*(-1959.d0*k1**8 + 3283.d0*k1**6*k2**2 + 
     -     1907.d0*k1**4*k2**4 + 3283.d0*k1**2*k2**6 - 
     -     1959.d0*k2**8)*k3**6 + 3.d0*(k1**2 + k2**2)*
     -     (663.d0*k1**4 - 811.d0*k1**2*k2**2 + 663.d0*k2**4)*k3**8 - 
     -     20.d0*(k1**4 + k2**4)*k3**10)*q**2 + 
     -     45.d0*(-252.d0*k1**6*k2**6*(k1**2 - k2**2)**2 + 
     -     168.d0*k1**6*k2**6*(k1**2 + k2**2)*k3**2 + 
     -     (55.d0*k1**12 - 285.d0*k1**10*k2**2 + 157.d0*k1**8*k2**4 + 
     -     230.d0*k1**6*k2**6 + 157.d0*k1**4*k2**8 - 
     -     285.d0*k1**2*k2**10 + 55.d0*k2**12)*k3**4 - 
     -     3.d0*(k1**2 + k2**2)*
     -     (55.d0*k1**8 - 201.d0*k1**6*k2**2 + 156.d0*k1**4*k2**4 - 
     -     201.d0*k1**2*k2**6 + 55.d0*k2**8)*k3**6 + 
     -     3.d0*(55.d0*k1**8 - 51.d0*k1**6*k2**2 - 51.d0*k1**2*k2**6 + 
     -     55.d0*k2**8)*k3**8 - 55.d0*(k1**6 + k2**6)*k3**10)*q**4))/
     -     (1.55232d6*k1**8*k2**8*k3**4)  
c
      kernel2 = - (pi*(k1/q - 1.d0)**2*(k1/q + 1.d0)**2*
     -     (39.d0*k1**12 + 165.d0*(k2**2 - k3**2)**3*q**6 - 
     -     k1**10*(582.d0*k2**2 + 791.d0*k3**2 + 1947.d0*q**2) - 
     -     3.d0*k1**2*(k2 - k3)*(k2 + k3)*q**4*
     -     (558.d0*k2**4 - 473.d0*k2**2*k3**2 - 85.d0*k3**4 + 
     -     3.d0*(95.d0*k2**2 - 51.d0*k3**2)*q**2) + 
     -     k1**6*(492.d0*k2**6 - 633.d0*k2**4*k3**2 + 
     -     390.d0*k2**2*k3**4 + 151.d0*k3**6 + 
     -     (-6465.d0*k2**4 + 758.d0*k2**2*k3**2 + 179.d0*k3**4)*
     -     q**2 - 3.d0*(2428.d0*k2**2 + 371.d0*k3**2)*q**4 + 
     -     219.d0*q**6) + k1**8*(51.d0*k2**4 + 601.d0*k3**4 + 
     -     1787.d0*k3**2*q**2 + 1689.d0*q**4 + 
     -     k2**2*(2120.d0*k3**2 + 6891.d0*q**2)) + k1**4*q**2*
     -     (1017.d0*k2**6 + 269.d0*k3**6 - 321.d0*k3**4*q**2 + 
     -     405.d0*k3**2*q**4 + k2**4*(-1677.d0*k3**2 + 7269.d0*q**2) + 
     -     k2**2*(391.d0*k3**4 - 4376.d0*k3**2*q**2 + 471.d0*q**4)))*
     -     LFunc(k1,q))/(413952.d0*k1**9*k2**2*q) 
c
      kernel3 = - (pi*(k2/q - 1.d0)**2*(k2/q + 1.d0)**2*
     -     (k2**6*(492.d0*k1**6 + 39.d0*k2**6 - 791.d0*k2**4*k3**2 + 
     -     601.d0*k2**2*k3**4 + 151.d0*k3**6 + 
     -     k1**4*(51.d0*k2**2 - 633.d0*k3**2) + 
     -     k1**2*(-582.d0*k2**4 + 2120.d0*k2**2*k3**2 + 390.d0*k3**4)) + 
     -     k2**4*(1017.d0*k1**6 - 1947.d0*k2**6 + 1787.d0*k2**4*k3**2 + 
     -     179.d0*k2**2*k3**4 + 269.d0*k3**6 - 
     -     3.d0*k1**4*(2155.d0*k2**2 + 559.d0*k3**2) + k1**2*
     -     (6891.d0*k2**4 + 758.d0*k2**2*k3**2 + 391.d0*k3**4))*q**2 - 
     -     k2**2*(3.d0*(k1 - k2)*(k1 + k2)*
     -     (558.d0*k1**4 - 1865.d0*k1**2*k2**2 + 563.d0*k2**4) + 
     -     (-3093.d0*k1**4 + 4376.d0*k1**2*k2**2 + 1113.d0*k2**4)*k3**2+ 
     -     3.d0*(388.d0*k1**2 + 107.d0*k2**2)*k3**4 + 255.d0*k3**6)*q**4
     -     +3.d0*(55.d0*k1**6 - 15.d0*k1**4*(19.d0*k2**2 + 11.d0*k3**2)+ 
     -     (k2 - k3)*(k2 + k3)*
     -     (73.d0*k2**4 + 208.d0*k2**2*k3**2 + 55.d0*k3**4) + 
     -     k1**2*(157.d0*k2**4 + 438.d0*k2**2*k3**2 + 165.d0*k3**4))*
     -     q**6)* LFunc(k2,q))/(413952.d0*k1**2*k2**9*q) 
c
      kernel4 = (pi*(2.d0*(k3/q)**4 + 7.d0*(k3/q)**2 - 9.d0)*
     -     (k3**4*(k1**6 - 9.d0*k1**4*k2**2 - 9.d0*k1**2*k2**4 + k2**6 + 
     -     16.d0*(k1**2 - k2**2)**2*k3**2 - 
     -     15.d0*(k1**2 + k2**2)*k3**4 - 2.d0*k3**6) + 2.d0*k3**2*
     -     ((k1**2 - k2**2)**2*(k1**2 + k2**2) - 
     -     4.d0*(7.d0*k1**4 - 17.d0*k1**2*k2**2 + 7.d0*k2**4)*k3**2 + 
     -     23.d0*(k1**2 + k2**2)*k3**4)*q**2 - 
     -     (3.d0*(k1**2 - k2**2)**2*(k1**2 + k2**2) - 
     -     4.d0*(13.d0*k1**4 - 24.d0*k1**2*k2**2 + 13.d0*k2**4)*k3**2 + 
     -     47.d0*(k1**2 + k2**2)*k3**4 + 2.d0*k3**6)*q**4 + 
     -     4.d0*(-3.d0*(k1**2 - k2**2)**2 + 2.d0*(k1**2 + k2**2)*k3**2 + 
     -     k3**4)*q**6)*LFunc(k3,q))/(59136.d0*k1**2*k2**2*k3**5*q) 
c
      kernel5 = (3.d0*k3**3*pi*(k1**2 - q**2)**2*(-k2**2 + q**2)**2*
     -     WFunc(k1,k2,k3,q))/(4312.d0*k1**2*k2**2*q**5*
     -     dsqrt(k1**2*k2**2 - (k1**2 + k2**2 - k3**2)*q**2 + q**4)) + 
     -     (k2*pi*(k1**2 - q**2)**2*(2.d0*k3**4 + 
     -     7.d0*k3**2*q**2 - 9.d0*q**4)*WFunc(k1,k3,k2,q))/
     -     (7392.d0*k1**2*q**5*dsqrt(k1**2*k3**2 - 
     -     (k1**2 - k2**2 + k3**2)*q**2 + q**4)) + 
     -     (k1*pi*(k2**2 - q**2)**2*(2.d0*k3**4 + 7.d0*k3**2*q**2 - 
     -     9.d0*q**4)*WFunc(k2,k3,k1,q))/
     -     (7392.d0*k2**2*q**5*dsqrt(k1**2*q**2 + 
     -     (k2 - q)*(k3 - q)*(k2 + q)*(k3 + q)))
c
      kernel_Gamma2d_exact = 
     &     kernel1 + kernel2 + kernel3 + kernel4 + kernel5  
c
      end
c
c ******************************************************* c
c
      function kernel_Gamma2d_iso(k1, k2, k3, q)
c
c ******************************************************* c
c
c     Asymptotic limit for kernel Gamma2: 
c           the expression is valid in the close limit
c           for k1 and k2
c
      implicit none
      real*8  kernel_Gamma2d_iso, k1, k2, k3, q
      real*8  pi, eps
      pi = 4.d0 * datan(1.d0)
c     -------------------------------------------------
c
      eps = k2/k1 - 1.d0
c
      kernel_Gamma2d_iso =
     -     (pi*((-60.d0*eps*(k1 - q)*q*(k1 + q)*(165.d0*k3**6*q**6 + 
     -     k1**10*(-696.d0*k3**2 + 504.d0*q**2) - k1**8*(991.d0*k3**4 + 
     -     868.d0*k3**2*q**2) + k1**6*(-151.d0*k3**6 - 
     -     570.d0*k3**4*q**2 + 2396.d0*k3**2*q**4) + 
     -     k1**4*(-269.d0*k3**6*q**2 + 1485.d0*k3**4*q**4 - 
     -     1224.d0*k3**2*q**6) + 3.d0*k1**2*(85.d0*k3**6*q**4 - 
     -     12.d0*k3**4*q**6)))/k1**10 + 
     -     8.d0*q*((420.d0*eps*(k1**2 - q**2)**2*(2.d0*k3**4 + 
     -     7.d0*k3**2*q**2 - 9.d0*q**4))/(k1**2*k3**2 - k3**2*q**2 + 
     -     q**4) + (2160.d0*eps*k3**4*(-k1**2 + q**2)**3)/
     -     (k1**2*(k1**4 - 2.d0*k1**2*q**2 + k3**2*q**2 + q**4)) + 
     -     (-420.d0*eps*k1**12*k3**2*(k1**2 - q**2)*(2.d0*k3**4 + 
     -     7.d0*k3**2*q**2 - 9.d0*q**4) + 
     -     (k1**2*k3**2 - k3**2*q**2 + q**4)*(2475.d0*(-1.d0 + 
     -     5.d0*eps)*k3**8*q**8 + 360.d0*(1 + eps)*k1**12*k3**2*
     -     (29.d0*k3**2 - 21.d0*q**2) - 
     -     60.d0*(-1.d0 + 4.d0*eps)*k1**2*k3**6*q**6*(5.d0*k3**2 + 
     -     9.d0*q**2) - 45.d0*(-1.d0 + 3.d0*eps)*k1**4*k3**4*q**4*
     -     (202.d0*k3**4 - 515.d0*k3**2*q**2 + 408.d0*q**4) + 
     -     15.d0*k1**10*(847.d0*k3**6 - 348.d0*k3**4*q**2 + 
     -     644.d0*k3**2*q**4 + 252.d0*q**6) - 
     -     (-1.d0 + 2.d0*eps)*k1**6*k3**2*(210.d0*k3**8 - 
     -     34455.d0*k3**6*q**2 + 43691.d0*k3**4*q**4 - 
     -     68325.d0*k3**2*q**6 + 1890.d0*q**8) - 
     -     (-1.d0 + eps)*k1**8*(5415.d0*k3**8 - 120370.d0*k3**6*q**2 + 
     -     143794.d0*k3**4*q**4 - 47775.d0*k3**2*q**6 + 7560.d0*q**8)))/
     -     (k1**10*k3**2*(k1**2*k3**2 - k3**2*q**2 + q**4))) + 
     -     (15.d0*(165.d0*(2.d0 - 11.d0*eps)*k3**6*q**10 - 
     -     24.d0*(2.d0 + 3.d0*eps)*k1**14*(29.d0*k3**2 - 21.d0*q**2) + 
     -     3.d0*(-2.d0 + 9.d0*eps)*k1**2*k3**4*q**8*(25.d0*k3**2 + 
     -     12.d0*q**2) - (-2.d0 + 3.d0*eps)*k1**8*k3**2*q**2*
     -     (33.d0*k3**4 + 1634.d0*k3**2*q**2 - 6884.d0*q**4) - 
     -     (2.d0 + eps)*k1**12*(991.d0*k3**4 - 524.d0*k3**2*q**2 + 
     -     1008.d0*q**4) + 
     -     (-2.d0 + 7.d0*eps)*k1**4*k3**2*q**6*(614.d0*k3**4 - 
     -     1557.d0*k3**2*q**2 + 1224.d0*q**4) - 
     -     2.d0*(-2.d0 + 5.d0*eps)*k1**6*k3**2*q**4*(321.d0*k3**4 - 
     -     1788.d0*k3**2*q**2 + 2422.d0*q**4) + 
     -     (-2.d0 + eps)*k1**10*(151.d0*k3**6 - 1412.d0*k3**4*q**2 - 
     -     3436.d0*k3**2*q**4 - 504.d0*q**6))*
     -     dlog((k1 + q)**2/(k1 - q)**2))/k1**11 - 
     -     (210.d0*(2.d0*k3**4 + 7.d0*k3**2*q**2 - 9.d0*q**4)*
     -     (8.d0*(1 + eps)*k1**6*k3**2 - 4.d0*k1**4*(3.d0*k3**2*q**2 + 
     -     q**4) - (-1.d0 + eps)*k1**2*(15.d0*k3**6 - 46.d0*k3**4*q**2 + 
     -     47.d0*k3**2*q**4 - 8.d0*q**6) - (-1.d0 + 2.d0*eps)*k3**2*
     -     (k3**6 + k3**2*q**4 - 2.d0*q**6))*
     -     dlog((k3 + q)**2/(k3 - q)**2))/(k1**4*k3**3) + 
     -     (840.d0*(-k1 + q)*(k1 + q)*(-2.d0*k3**4 - 7.d0*k3**2*q**2 + 
     -     9.d0*q**4)*(2.d0*(1 + eps)*k1**4*k3**2 + 
     -     (-2.d0 + eps)*q**4*(-k3**2 + q**2) + 
     -     k1**2*q**2*(-((4.d0 + eps)*k3**2) + (2.d0 + 3*eps)*q**2))*
     -     dlog((-(k3**2*q**2) + q**4 + k1**2*(k3**2 + q**2) + 
     -     2*k1*q*dsqrt(k1**2*k3**2 - k3**2*q**2 + q**4))/
     -     (-(k3**2*q**2) + q**4 + k1**2*(k3**2 + q**2) - 
     -     2.d0*k1*q*dsqrt(k1**2*k3**2 - k3**2*q**2 + q**4))))/
     -     (k1*(k1**2*k3**2 - k3**2*q**2 + q**4)**1.5) + 
     -     (4320.d0*k3**3*(k1**2 - q**2)**3*
     -     ((1.d0 + eps)*k1**6 - 3.d0*k1**4*q**2 + 
     -     (-1.d0 + 2.d0*eps)*q**4*(k3**2 + q**2) + 
     -     k1**2*q**2*((1.d0 + 2.d0*eps)*k3**2 - 
     -     3.d0*(-1.d0 + eps)*q**2))*
     -     dlog(-((4.d0*k3**2*q**2 + 2.d0*(k1**2 - q**2)**2 + 
     -     4.d0*k3*q*dsqrt(k1**4 + (-2.d0*k1**2 + k3**2)*q**2 + q**4))/
     -     (-4.d0*k3**2*q**2 - 2.d0*(k1**2 - q**2)**2 + 4.d0*k3*q*
     -     dsqrt(k1**4 + (-2.d0*k1**2 + k3**2)*q**2 + q**4)))))/
     -     (k1**4*(k1**4 - 2.d0*k1**2*q**2 + k3**2*q**2 + q**4)**1.5)))/
     -     (6.20928d6*q**5)
c
      end
c
c ******************************************************* c
c
      function kernel_Gamma2d_highk(k1, k2, k3, q)
c
c ******************************************************* c
c
c     Asymptotic limit for kernel Gamma2: 
c           the expression is valid when k1, k2, k3 >> q
c
      implicit none
      real*8 kernel_Gamma2d_highk, k1, k2, k3, q
      real*8 pi
      pi = 4.d0 * datan(1.d0)
c     -------------------------------------------------
c
      kernel_Gamma2d_highk =
     -     (pi*(8085.d0*k1**4*k2**4*k3**6*(5.d0*(k1**2 - k2**2)**2 - 
     -     3.d0*(k1**2 + k2**2)*k3**2 - 2.d0*k3**4)/q**2 + 
     -     7.d0*k1**2*k2**2*k3**2*(28.d0*(k1**2 - 
     -     k2**2)**4*(k1**2 + k2**2) + 3.d0*(k1**2 - k2**2)**2*
     -     (1094.d0*k1**4 - 6321.d0*k1**2*k2**2 + 1094.d0*k2**4)*k3**2 - 
     -     6.d0*(k1**2 + k2**2)*(988.d0*k1**4 - 3189.d0*k1**2*k2**2 + 
     -     988.d0*k2**4)*k3**4 + (1970.d0*k1**4 + 741.d0*k1**2*k2**2 + 
     -     1970.d0*k2**4)*k3**6 + 
     -     576.d0*(k1**2 + k2**2)*k3**8 + 72.d0*k3**10) + 
     -     (-14.d0*(k1 - k2)**4*(k1 + k2)**4*(k1**2 + k2**2)*
     -     (12.d0*k1**4 - 55.d0*k1**2*k2**2 + 12.d0*k2**4) + 
     -     7.d0*(28.d0*k1**12 + 4005.d0*k1**8*k2**4 - 
     -     8066.d0*k1**6*k2**6 + 4005.d0*k1**4*k2**8 + 
     -     28.d0*k2**12)*k3**2 - 
     -     6.d0*(k1**2 + k2**2)*(2999.d0*k1**8 - 16730.d0*k1**6*k2**2 + 
     -     31403.d0*k1**4*k2**4 - 16730.d0*k1**2*k2**6 + 
     -     2999.d0*k2**8)*k3**4 + 
     -     (34488.d0*k1**8 - 51644.d0*k1**6*k2**2 - 
     -     33313.d0*k1**4*k2**4 - 51644.d0*k1**2*k2**6 + 
     -     34488.d0*k2**8)*k3**6 - 
     -     2.d0*(k1**2 + k2**2)*(7649.d0*k1**4 - 8021.d0*k1**2*k2**2 + 
     -     7649.d0*k2**4)*k3**8 - 1296.d0*(k1**4 + k2**4)*k3**10 + 
     -     504.d0*(k1**2 + k2**2)*k3**12 - 
     -     432.d0*k3**14)*q**2))/(339570.d0*k1**6*k2**6*k3**4)
c
      end
c
c ******************************************************* c
c
      function kernel_Gamma2d_lowk(k1, k2, k3, q)
c
c ******************************************************* c
c
c     Asymptotic limit for kernel Gamma2: 
c           the expression is valid when q >> k1, k2, k3
c
      implicit none
      real*8 kernel_Gamma2d_lowk, k1, k2, k3, q
      real*8 pi
      pi = 4.d0 * datan(1.d0)
c     -------------------------------------------------

      kernel_Gamma2d_lowk = (pi*(2426.d0*k1**8 - 
     -     4.d0*k1**6*(3110.d0*k2**2 + 2087.d0*k3**2 + 3006.d0*q**2) + 
     -     k1**2*(2.d0*(-6220.d0*k2**6 + 7198.d0*k2**4*k3**2 + 
     -     5449.d0*k2**2*k3**4 + 1073.d0*k3**6) + 
     -     (12024.d0*k2**4 - 76684.d0*k2**2*k3**2 - 
     -     20085.d0*k3**4)*q**2) + k1**4*(20028.d0*k2**4 + 
     -     3363.d0*k3**4 + 44518.d0*k3**2*q**2 + 
     -     4.d0*k2**2*(3599.d0*k3**2 + 3006.d0*q**2)) + 
     -     (k2 - k3)*(k2 + k3)*(2426.d0*k2**6 - 413.d0*k3**6 + 
     -     12409.d0*k3**4*q**2 - 18.d0*k2**4*(329.d0*k3**2 + 
     -     668.d0*q**2) + 
     -     k2**2*(-2559.d0*k3**4 + 32494.d0*k3**2*q**2))))/
     -     (339570.d0*k1**2*k2**2*q**4)
c
      end
c
c ******************************************************* c
c
      function kernel_Gamma2d_elongate(k1, k2, k3, q)
c
c ******************************************************* c
c
      implicit none
      real*8 kernel_Gamma2d_elongate, k1, k2, k3, q
      real*8 k, eps, pi
      pi = 4.d0 * datan(1.d0)
c     -------------------------------------------------
c
      if(k1.gt.k2) then
         k = k1
         eps = k2 / k1
      elseif(k2.gt.k1) then
         k = k2
         eps = k1 / k2
      endif
c
      kernel_Gamma2d_elongate = 
     -     (pi*((4.d0*k**16*q*(42100.d0*k**6 + 13841.d0*k3**6 - 
     -     10132.d0*k3**4*q**2 - 405090.d0*k3**2*q**4 - 139020.d0*q**6 - 
     -     3.d0*k**4*(13429.d0*k3**2 + 512318.d0*q**2) + 
     -     k**2*(54346.d0*k3**4 + 144594.d0*k3**2*q**2 - 
     -     2024631.d0*q**4)))/7.d0 - 
     -     (4.d0*k**10*q*(1350.d0*k**12*k3**4 - 7425.d0*k3**8*q**8 - 
     -     15.d0*k**10*(1501.d0*k3**6 + 1318.d0*k3**4*q**2 - 
     -     210.d0*k3**2*q**4 + 189.d0*q**6) - 
     -     2.d0*k**8*(7050.d0*k3**8 - 227830.d0*k3**6*q**2 + 
     -     370461.d0*k3**4*q**4 - 50400.d0*k3**2*q**6 + 11340.d0*q**8) + 
     -     k**6*(-5415.d0*k3**10 + 120370.d0*k3**8*q**2 - 
     -     250234.d0*k3**6*q**4 + 148950.d0*k3**4*q**6 - 
     -     7560.d0*k3**2*q**8) - 15.d0*k**4*(2595.d0*k3**8*q**4 - 
     -     6566.d0*k3**6*q**6 + 471.d0*k3**4*q**8) + 
     -     135.d0*k**2*(221.d0*k3**8*q**6 - 146.d0*k3**6*q**8))
     -     )/k3**4 - 15.d0*k**9*(k - q)**2*(k + q)**2*
     -     (-582.d0*k**10 + 495.d0*k3**4*q**6 + k**8*(2120.d0*k3**2 + 
     -     6891.d0*q**2) + k**6*(390.d0*k3**4 + 758.d0*k3**2*q**2 - 
     -     7284.d0*q**4) + k**4*(391.d0*k3**4*q**2 - 
     -     4376.d0*k3**2*q**4 + 471.d0*q**6) - 
     -     6.d0*k**2*(194.d0*k3**4*q**4 - 
     -     219*k3**2*q**6))*dlog((k + q)**2/(k - q)**2) - 
     -     (105.d0*k**16*(2.d0*k3**4 + 7.d0*k3**2*q**2 - 9.d0*q**4)*
     -     (15.d0*k3**8 - 46.d0*k3**6*q**2 + 47.d0*k3**4*q**4 - 
     -     8.d0*k3**2*q**6 + k**4*(9.d0*k3**4 + 2.d0*k3**2*q**2 - 
     -     3.d0*q**4) + 8.d0*k**2*(4.d0*k3**6 - 17.d0*k3**4*q**2 + 
     -     12.d0*k3**2*q**4 - 3.d0*q**6))*
     -     dlog((k3 + q)**2/(k3 - q)**2))/k3**5 + 
     -     (420.d0*k**19*q**3*(-k3**2 + q**2)*(2.d0*k3**2 + 9.d0*q**2)*
     -     (-4.d0*k*dsqrt(q**2*(k**2 - k3**2 + q**2)) + 
     -     q*(4.d0*k**2 - 3.d0*k3**2 + 3.d0*q**2)*
     -     dlog((2.d0*k**2*q - k3**2*q + q**3 + 
     -     2.d0*k*dsqrt(q**2*(k**2 - k3**2 + q**2)))/
     -     (2.d0*k**2*q - k3**2*q + q**3 - 2.d0*k*dsqrt(q**2*(k**2 - 
     -     k3**2 + q**2))))))/(q**2*(k**2 - k3**2 + q**2))**1.5
     -     + (2160.d0*k**16*k3**3*q**3*(k**2 - q**2)**2*
     -     (4.d0*k3*dsqrt(q**2*(-k**2 + k3**2 + q**2)) + 
     -     q*(3.d0*k**2 - 4.d0*k3**2 - 3.d0*q**2)*dlog(-((-(k**2*q) + 
     -     2.d0*k3**2*q + q**3 + 2.d0*k3*dsqrt(q**2*(-k**2 + k3**2 + 
     -     q**2)))/(k**2*q - 2.d0*k3**2*q - q**3 + 
     -     2.d0*k3*dsqrt(q**2*(-k**2 + k3**2 + q**2)))))))/
     -     (q**2*(-k**2 + k3**2 + q**2))**1.5 + 
     -     ((4.d0*k**14*q**3*(218739.d0*k**6 + 46820.d0*k3**6 - 
     -     49266.d0*k3**4*q**2 + 187740.d0*k3**2*q**4 - 22995.d0*q**6 - 
     -     6.d0*k**4*(66043.d0*k3**2 - 333130.d0*q**2) + 
     -     k**2*(88699.d0*k3**4 - 918974.d0*k3**2*q**2 + 847245*q**4)))/
     -     7.d0 + 
     -     (4.d0*k**8*q*(585.d0*k**14*k3**4 - 2475.d0*k3**10*q**8 + 
     -     15.d0*k**2*k3**8*q**6*(20.d0*k3**2 - 459.d0*q**2) + 
     -     45.d0*k**4*k3**6*q**4*(202.d0*k3**4 + 148.d0*k3**2*q**2 + 
     -     135.d0*q**4) - 
     -     15.d0*k**12*(805.d0*k3**6 + 1822.d0*k3**4*q**2 - 
     -     210.d0*k3**2*q**4 + 189.d0*q**6) + 
     -     k**10*(5655.d0*k3**8 + 222610.d0*k3**6*q**2 - 
     -     419226.d0*k3**4*q**4 + 54180.d0*k3**2*q**6 - 11340.d0*q**8) + 
     -     2.d0*k**6*k3**4*(210.d0*k3**8 - 34455.d0*k3**6*q**2 + 
     -     4766.d0*k3**4*q**4 - 28605.d0*k3**2*q**6 + 5175.d0*q**8) + 
     -     k**8*k3**2*(5415.d0*k3**8 - 120370.d0*k3**6*q**2 + 
     -     250234.d0*k3**4*q**4 - 148950.d0*k3**2*q**6 + 
     -     7560.d0*q**8)))/k3**4 -
     -     15.d0*k**7*(k - q)**2*(k + q)**2*(39.d0*k**12 - 
     -     165.d0*k3**6*q**6 - k**10*(791.d0*k3**2 + 1947.d0*q**2) + 
     -     k**8*(601.d0*k3**4 + 1787.d0*k3**2*q**2 + 1689.d0*q**4) + 
     -     k**6*(151.d0*k3**6 + 179.d0*k3**4*q**2 - 
     -     1113.d0*k3**2*q**4 + 219.d0*q**6) + 
     -     k**4*(269.d0*k3**6*q**2 - 321.d0*k3**4*q**4 + 
     -     405.d0*k3**2*q**6) - 51.d0*k**2*(5.d0*k3**6*q**4 + 
     -     9.d0*k3**4*q**6))*
     -     dlog((k + q)**2/(k - q)**2) + (105.d0*k**14*(2*k3**4 + 
     -     7.d0*k3**2*q**2 - 9.d0*q**4)*
     -     (k**6*(k3**4 + 2.d0*k3**2*q**2 - 3.d0*q**4) + 
     -     4.d0*k**4*(4.d0*k3**6 - 14.d0*k3**4*q**2 + 13.d0*k3**2*q**4 - 
     -     3.d0*q**6) - 
     -     2.d0*k3**4*(k3**6 + k3**2*q**4 - 2.d0*q**6) + 
     -     k**2*(-15.d0*k3**8 + 46.d0*k3**6*q**2 - 47.d0*k3**4*q**4 + 
     -     8.d0*k3**2*q**6))*dlog((k3 + q)**2/(k3 - q)**2))/k3**5 - 
     -     (840.d0*k**17*q**4*(-2.d0*k3**4 - 7.d0*k3**2*q**2 + 
     -     9.d0*q**4)*
     -     dlog((2.d0*k**2*q - k3**2*q + q**3 + 
     -     2.d0*k*dsqrt(q**2*(k**2 - k3**2 + q**2)))/
     -     (2.d0*k**2*q - k3**2*q + q**3 - 
     -     2.d0*k*dsqrt(q**2*(k**2 - k3**2 + q**2)))))/
     -     dsqrt(q**2*(k**2 - k3**2 + q**2))
     -     + (4320.d0*k**14*k3**3*q**4*(k**2 - q**2)**2*
     -     dlog(-((-(k**2*q) + 2.d0*k3**2*q + q**3 + 
     -     2.d0*k3*dsqrt(q**2*(-k**2 + k3**2 + q**2)))/
     -     (k**2*q - 2.d0*k3**2*q - q**3 + 
     -     2.d0*k3*dsqrt(q**2*(-k**2 + k3**2 + q**2))))))/
     -     dsqrt(q**2*(-k**2 + k3**2 + q**2))) 
     -     /eps**2))/(6.20928d6*k**18*q**5)
c
      end
c
c
c ******************************************************* c
c
      function kernel_Gamma2d_coll(k1, k2, k3, q)
c
c ******************************************************* c
c
c     Asymptotic limit for Kernel Gamma_2:   k3 << k1, k2
c
c     4th order expansion in eps = k3/k2
c
      implicit none
      real*8 kernel_Gamma2d_coll, k1, k2, k3, q
      real*8 kernel1, kernel2
      real*8 eps, pi
      pi = 4.d0 * datan(1.d0)
c     -------------------------------------------------
c
      eps = k3/k2
c
      kernel_Gamma2d_coll = 
     -     (pi*(-84.d0*k1**7*k2**7*q**3*(43.d0*k1**6 + 43.d0*k2**6 - 
     -     3408.d0*k2**4*q**2 - 2275.d0*k2**2*q**4 + 180.d0*q**6 - 
     -     k1**4*(403.d0*k2**2 + 3408.d0*q**2) + 
     -     k1**2*(-403.d0*k2**4 + 7736.d0*k2**2*q**2 - 2275.d0*q**4)) + 
     -     12.d0*k1*k2*q*(195.d0*k1**14*k2**6 + 825.d0*k2**12*q**8 - 
     -     5.d0*k1**2*k2**10*q**6*(1949.d0*k2**2 + 855.d0*q**2) + 
     -     5.d0*k1**4*k2**8*q**4*(3895.d0*k2**4 + 8694.d0*k2**2*q**2 + 
     -     471.d0*q**4) + 
     -     k1**10*k2**2*(510.d0*k2**8 + 6590.d0*k2**6*q**2 - 
     -     139742.d0*k2**4*q**4 + 43470.d0*k2**2*q**6 - 4275.d0*q**8) - 
     -     5.d0*k1**12*(90.d0*k2**8 + 1822.d0*k2**6*q**2 - 
     -     3895.d0*k2**4*q**4 + 1949.d0*k2**2*q**6 - 165.d0*q**8) + 
     -     k1**8*k2**4*(-450.d0*k2**8 + 6590.d0*k2**6*q**2 + 
     -     246974.d0*k2**4*q**4 - 49650.d0*k2**2*q**6 + 2355.d0*q**8) + 
     -     k1**6*k2**6*(195.d0*k2**8 - 9110.d0*k2**6*q**2 - 
     -     139742.d0*k2**4*q**4 - 49650.d0*k2**2*q**6 + 3450.d0*q**8)) - 
     -     45.d0*k2**7*(k1 - q)**2*(k1 + q)**2*(13.d0*k1**12 + 
     -     55.d0*k2**6*q**6 - k1**10*(194.d0*k2**2 + 649.d0*q**2) + 
     -     k1**8*(17.d0*k2**4 + 2297.d0*k2**2*q**2 + 563.d0*q**4) + 
     -     k1**6*(164.d0*k2**6 - 2155.d0*k2**4*q**2 - 
     -     2428.d0*k2**2*q**4 + 73.d0*q**6) + 
     -     k1**4*(339.d0*k2**6*q**2 + 2423.d0*k2**4*q**4 + 
     -     157.d0*k2**2*q**6) - 3.d0*k1**2*(186.d0*k2**6*q**4 + 
     -     95.d0*k2**4*q**6))*dlog((k1 + q)**2/(k1 - q)**2) - 
     -     45.d0*k1**7*(k2 - q)**2*(k2 + q)**2*(k1**6*(164.d0*k2**6 + 
     -     339.d0*k2**4*q**2 - 558.d0*k2**2*q**4 + 55.d0*q**6) + 
     -     k2**6*(13.d0*k2**6 - 649.d0*k2**4*q**2 + 563.d0*k2**2*q**4 + 
     -     73.d0*q**6) + k1**4*(17.d0*k2**8 - 2155.d0*k2**6*q**2 + 
     -     2423.d0*k2**4*q**4 - 285.d0*k2**2*q**6) + 
     -     k1**2*(-194.d0*k2**10 + 2297.d0*k2**8*q**2 - 
     -     2428.d0*k2**6*q**4 + 157.d0*k2**4*q**6))*
     -     dlog((k2 + q)**2/(k2 - q)**2) - 
     -     (7560.d0*k1**10*k2**7*q**4*(k2**2 - q**2)**2*
     -     dlog((2.d0*k1**2*q - k2**2*q + q**3 + 
     -     2.d0*k1*dsqrt(q**2*(k1**2 - k2**2 + q**2)))/
     -     (2.d0*k1**2*q - k2**2*q + q**3 - 
     -     2.d0*k1*dsqrt(q**2*(k1**2 - k2**2 + q**2)))))/
     -     dsqrt(q**2*(k1**2 - k2**2 + q**2)) - 
     -     (7560.d0*k1**7*k2**10*q**4*(k1**2 - q**2)**2*
     -     dlog(-((-(k1**2*q) + 2.d0*k2**2*q + q**3 + 
     -     2.d0*k2*dsqrt(q**2*(-k1**2 + k2**2 + q**2)))/
     -     (k1**2*q - 2.d0*k2**2*q - q**3 + 
     -     2.d0*k2*dsqrt(q**2*(-k1**2 + k2**2 + q**2))))))/
     -     dsqrt(q**2*(-k1**2 + k2**2 + q**2))))/
     -     (6.20928d6*k1**9*k2**9*q**5) + 
     -     (eps**2*pi*(8.d0*k1**7*k2**9*q*
     -     (353.d0*k1**6 + 353.d0*k2**6 - 12896.d0*k2**4*q**2 - 
     -     30541.d0*k2**2*q**4 + 1785.d0*q**6 - k1**4*(2033.d0*k2**2 + 
     -     12896.d0*q**2) + k1**2*(-2033.d0*k2**4 + 
     -     31896.d0*k2**2*q**2 - 30541.d0*q**4)) - 
     -     4.d0*k1*k2**3*q*(12075.d0*k1**12*k2**6 + 
     -     7425.d0*k2**10*q**8 - 90.d0*k1**2*k2**8*q**6*(653.d0*k2**2 + 
     -     219.d0*q**2) + 
     -     15.d0*k1**4*k2**6*q**4*(7096.d0*k2**4 + 6566.d0*k2**2*q**2 - 
     -     405.d0*q**4) + 
     -     k1**6*k2**4*(12075.d0*k2**8 - 222610.d0*k2**6*q**2 - 
     -     250234.d0*k2**4*q**4 + 57210.d0*k2**2*q**6 - 6075.d0*q**8) - 
     -     5.d0*k1**10*(4503.d0*k2**8 + 44522.d0*k2**6*q**2 - 
     -     21288.d0*k2**4*q**4 + 11754.d0*k2**2*q**6 - 1485*q**8) + 
     -     k1**8*(-22515.d0*k2**10 + 455660.d0*k2**8*q**2 - 
     -     250234.d0*k2**6*q**4 + 98490.d0*k2**4*q**6 - 
     -     19710.d0*k2**2*q**8)) + 
     -     15.d0*k2**9*(k1 - q)**2*(k1 + q)**2*(791.d0*k1**10 + 
     -     495.d0*k2**4*q**6 - k1**8*(2120.d0*k2**2 + 1787.d0*q**2) + 
     -     k1**6*(633.d0*k2**4 - 758.d0*k2**2*q**2 + 1113.d0*q**4) + 
     -     k1**4*(1677.d0*k2**4*q**2 + 4376.d0*k2**2*q**4 - 
     -     405.d0*q**6) - 
     -     3.d0*k1**2*(1031.d0*k2**4*q**4 + 438.d0*k2**2*q**6))*
     -     dlog((k1 + q)**2/(k1 - q)**2) + 
     -     15.d0*k1**7*k2**2*(k2 - q)**2*(k2 + q)**2*
     -     (k2**4*(791.d0*k2**6 - 1787.d0*k2**4*q**2 + 
     -     1113.d0*k2**2*q**4 - 405.d0*q**6) + 
     -     3.d0*k1**4*(211.d0*k2**6 + 559.d0*k2**4*q**2 - 
     -     1031.d0*k2**2*q**4 + 165.d0*q**6) - 
     -     2.d0*k1**2*(1060.d0*k2**8 + 379.d0*k2**6*q**2 - 
     -     2188.d0*k2**4*q**4 + 657.d0*k2**2*q**6))*
     -     dlog((k2 + q)**2/(k2 - q)**2) + 
     -     (420.d0*k1**10*k2**9*q**3*(k2**2 - q**2)**2*
     -     (-36.d0*k1*dsqrt(q**2*(k1**2 - k2**2 + q**2)) + 
     -     q*(14.d0*k1**2 - 5.d0*k2**2 + 5.d0*q**2)*
     -     dlog((2.d0*k1**2*q - k2**2*q + q**3 + 2.d0*k1*
     -     dsqrt(q**2*(k1**2 - k2**2 + q**2)))/
     -     (2.d0*k1**2*q - k2**2*q + q**3 - 2.d0*k1*
     -     dsqrt(q**2*(k1**2 - k2**2 + q**2))))))/
     -     (q**2*(k1**2 - k2**2 + q**2))**1.5 - 
     -     (420.d0*k1**7*k2**12*q**3*(k1**2 - q**2)**2*
     -     (36.d0*k2*dsqrt(q**2*(-k1**2 + k2**2 + q**2)) + 
     -     q*(5.d0*k1**2 - 14.d0*k2**2 - 5.d0*q**2)*
     -     dlog(-((-(k1**2*q) + 2.d0*k2**2*q + q**3 + 
     -     2.d0*k2*dsqrt(q**2*(-k1**2 + k2**2 + q**2)))/
     -     (k1**2*q - 2.d0*k2**2*q - q**3 + 
     -     2.d0*k2*dsqrt(q**2*(-k1**2 + k2**2 + q**2)))))))/
     -     (q**2*(-k1**2 + k2**2 + q**2))**1.5))/
     -     (6.20928d6*k1**9*k2**9*q**5) + 
     -     (eps**4*pi*(17280.d0*k1**7*k2**11*q*(k1**2 - q**2)*
     -     (k2**2 - q**2) + 
     -     (4.d0*k1**7*k2**11*(304.d0*k1**6 + 304.d0*k2**6 - 
     -     4416.d0*k2**4*q**2 + 21649.d0*k2**2*q**4 + 224.d0*q**6 - 
     -     64.d0*k1**4*(38.d0*k2**2 + 69.d0*q**2) + 
     -     k1**2*(-2432.d0*k2**4 + 15872.d0*k2**2*q**2 + 
     -     21649.d0*q**4)))/q + 
     -     4.d0*k1*k2**5*q*(5655.d0*k1**10*k2**6 + 7425.d0*k2**8*q**8 + 
     -     45.d0*k1**4*(865.d0*k2**8*q**4 + 148.d0*k2**6*q**6) + 
     -     k1**6*k2**2*(5655.d0*k2**8 - 120370.d0*k2**6*q**2 + 
     -     9532.d0*k2**4*q**4 + 6660.d0*k2**2*q**6 - 6885.d0*q**8) + 
     -     5.d0*k1**8*(2820.d0*k2**8 - 24074.d0*k2**6*q**2 + 
     -     7785.d0*k2**4*q**4 - 5967.d0*k2**2*q**6 + 1485.d0*q**8) - 
     -     2295.d0*k1**2*(13.d0*k2**8*q**6 + 3.d0*k2**6*q**8)) - 
     -     15.d0*k2**11*(k1 - q)**2*(k1 + q)**2*(601.d0*k1**8 + 
     -     495.d0*k2**2*q**6 + k1**6*(390.d0*k2**2 + 179.d0*q**2) + 
     -     k1**4*(391.d0*k2**2*q**2 - 321.d0*q**4) - 
     -     3.d0*k1**2*(388.d0*k2**2*q**4 + 153.d0*q**6))*
     -     dlog((k1 + q)**2/(k1 - q)**2) - 
     -     15.d0*k1**7*k2**4*(k2 - q)**2*(k2 + q)**2*
     -     (601.d0*k2**8 + 179.d0*k2**6*q**2 - 321.d0*k2**4*q**4 - 
     -     459.d0*k2**2*q**6 + 
     -     k1**2*(390.d0*k2**6 + 391.d0*k2**4*q**2 - 
     -     1164.d0*k2**2*q**4 + 495.d0*q**6))*
     -     dlog((k2 + q)**2/(k2 - q)**2) + 
     -     (105.d0*k1**10*k2**11*q*(k2**2 - q**2)**6*
     -     dsqrt(q**2*(k1**2 - k2**2 + q**2))*
     -     (-4.d0*k1*dsqrt(q**2*(k1**2 - k2**2 + q**2))*
     -     (-10.d0*k1**2 + 17.d0*(-k2**2 + q**2)) + 
     -     q*(16.d0*k1**4 - 60.d0*k1**2*(k2**2 - q**2) + 
     -     17.d0*(k2**2 - q**2)**2)*
     -     dlog((2.d0*k1**2*q - k2**2*q + q**3 + 
     -     2.d0*k1*dsqrt(q**2*(k1**2 - k2**2 + q**2)))/
     -     (2.d0*k1**2*q - k2**2*q + q**3 - 
     -     2.d0*k1*dsqrt(q**2*(k1**2 - k2**2 + q**2))))))/
     -     ((k1**2 - k2**2 + q**2)**3*(-(k2**2*q) + q**3)**4) + 
     -     (105.d0*k1**7*k2**14*q*(k1**2 - q**2)**6*
     -     dsqrt(q**2*(-k1**2 + k2**2 + q**2))*
     -     (-4.d0*k2*dsqrt(q**2*(-k1**2 + k2**2 + q**2))*
     -     (-17.d0*k1**2 - 10.d0*k2**2 + 17.d0*q**2) + 
     -     q*(17.d0*k1**4 + 16.d0*k2**4 + 60.d0*k2**2*q**2 + 
     -     17.d0*q**4 - 2.d0*k1**2*(30.d0*k2**2 + 17.d0*q**2))*
     -     dlog(-((-(k1**2*q) + 2.d0*k2**2*q + q**3 + 
     -     2.d0*k2*dsqrt(q**2*(-k1**2 + k2**2 + q**2)))/
     -     (k1**2*q - 2.d0*k2**2*q - q**3 + 
     -     2.d0*k2*dsqrt(q**2*(-k1**2 + k2**2 + q**2)))))))/
     -     ((-k1**2 + k2**2 + q**2)**3*(-(k1**2*q) + q**3)**4)))/
     -     (6.20928d6*k1**9*k2**9*q**5)
c
      end
c
c ******************************************************* c
c
      function kernel_Gamma2d_reg3rd(k1, k2, k3, q)
c
c ******************************************************* c
c
      implicit none
      integer i
      real*8  kernel_Gamma2d_reg3rd, k1, k2, k3, q
      real*8  pi, betafunc, small_beta, big_beta
      real*8  kernel_poly(13), kernel_poly_sum
      real*8  kernel_beta(5), kernel_beta_sum
      real*8  ss1, ss2, ss3
      pi = 4.d0 * datan(1.d0)
c     -------------------------------------------------
c
      kernel_poly(1) =  
     c     (-210*k1**11*k2**9*k3**8 - 210*k1**9*k2**11*k3**8 - 
     c        540*k1**9*k2**9*k3**10)*pi - 
     c     (1050*k1**11*k2**9*k3**7 + 1050*k1**9*k2**11*k3**7 + 
     c        840*k1**11*k2**8*k3**8 + 840*k1**10*k2**9*k3**8 + 
     c        840*k1**9*k2**10*k3**8 + 840*k1**8*k2**11*k3**8 + 
     c        2700*k1**9*k2**9*k3**9 + 
     c        2160*k1**9*k2**8*k3**10 + 2160*k1**8*k2**9*k3**10)*
     c     pi*q - (-140*k1**13*k2**7*k3**6 + 
     c        3045*k1**11*k2**9*k3**6 + 
     c        3045*k1**9*k2**11*k3**6 - 
     c        140*k1**7*k2**13*k3**6 + 
     c        4200*k1**11*k2**8*k3**7 + 
     c        4200*k1**10*k2**9*k3**7 + 
     c        4200*k1**9*k2**10*k3**7 + 
     c        4200*k1**8*k2**11*k3**7 - 
     c        22050*k1**11*k2**7*k3**8 + 
     c        3360*k1**10*k2**8*k3**8 + 
     c        54120*k1**9*k2**9*k3**8 + 
     c        3360*k1**8*k2**10*k3**8 - 
     c        22050*k1**7*k2**11*k3**8 + 
     c        10800*k1**9*k2**8*k3**9 + 
     c        10800*k1**8*k2**9*k3**9 + 
     c        16560*k1**9*k2**7*k3**10 + 
     c        8640*k1**8*k2**8*k3**10 + 
     c     16560*k1**7*k2**9*k3**10 + 8880*k1**7*k2**7*k3**12
     c     )*pi*q**2 
c
      kernel_poly(2) = - (-280*k1**13*k2**7*k3**5 + 
     c        3045*k1**11*k2**9*k3**5 + 
     c        3045*k1**9*k2**11*k3**5 - 
     c        280*k1**7*k2**13*k3**5 - 
     c        15320*k1**13*k2**6*k3**6 - 
     c        1730*k1**12*k2**7*k3**6 + 
     c        10650*k1**11*k2**8*k3**6 + 
     c        29640*k1**10*k2**9*k3**6 + 
     c        29640*k1**9*k2**10*k3**6 + 
     c        10650*k1**8*k2**11*k3**6 - 
     c        1730*k1**7*k2**12*k3**6 - 
     c        15320*k1**6*k2**13*k3**6 - 
     c        103530*k1**11*k2**7*k3**7 + 
     c        16800*k1**10*k2**8*k3**7 + 
     c        235560*k1**9*k2**9*k3**7 + 
     c        16800*k1**8*k2**10*k3**7 - 
     c        103530*k1**7*k2**11*k3**7 - 
     c        73410*k1**11*k2**6*k3**8 - 
     c        64470*k1**10*k2**7*k3**8 + 
     c        148680*k1**9*k2**8*k3**8 + 
     c        148680*k1**8*k2**9*k3**8 - 
     c        64470*k1**7*k2**10*k3**8 - 
     c        73410*k1**6*k2**11*k3**8 + 
     c        76500*k1**9*k2**7*k3**9 + 
     c        43200*k1**8*k2**8*k3**9 + 
     c        76500*k1**7*k2**9*k3**9 + 
     c        43740*k1**9*k2**6*k3**10 + 
     c        48210*k1**8*k2**7*k3**10 + 
     c        48210*k1**7*k2**8*k3**10 + 
     c        43740*k1**6*k2**9*k3**10 + 
     c        43560*k1**7*k2**7*k3**11 + 
     c        30990*k1**7*k2**6*k3**12 + 
     c        30990*k1**6*k2**7*k3**12)*pi*q**3 - 
     c     (-1750*k1**13*k2**7*k3**4 + 
     c        9520*k1**11*k2**9*k3**4 + 
     c        9520*k1**9*k2**11*k3**4 - 
     c        1750*k1**7*k2**13*k3**4 - 
     c        74920*k1**13*k2**6*k3**5 - 
     c        6970*k1**12*k2**7*k3**5 + 
     c        4530*k1**11*k2**8*k3**5 + 
     c        99480*k1**10*k2**9*k3**5 + 
     c        99480*k1**9*k2**10*k3**5 + 
     c        4530*k1**8*k2**11*k3**5 - 
     c        6970*k1**7*k2**12*k3**5 - 
     c        74920*k1**6*k2**13*k3**5 - 
     c        2160*k1**13*k2**5*k3**6 - 
     c        65960*k1**12*k2**6*k3**6 - 
     c        111003*k1**11*k2**7*k3**6 + 
     c        112440*k1**10*k2**8*k3**6 + 
     c        292656*k1**9*k2**9*k3**6 + 
     c        112440*k1**8*k2**10*k3**6 - 
     c        111003*k1**7*k2**11*k3**6 - 
     c        65960*k1**6*k2**12*k3**6 - 
     c        2160*k1**5*k2**13*k3**6 - 
     c        340170*k1**11*k2**6*k3**7 - 
     c        295470*k1**10*k2**7*k3**7 + 
     c        603240*k1**9*k2**8*k3**7 + 
     c        603240*k1**8*k2**9*k3**7 - 
     c        295470*k1**7*k2**10*k3**7 - 
     c        340170*k1**6*k2**11*k3**7 - 
     c        131130*k1**11*k2**5*k3**8 - 
     c        198720*k1**10*k2**6*k3**8 + 
     c        288522*k1**9*k2**7*k3**8 + 
     c        323520*k1**8*k2**8*k3**8 + 
     c        288522*k1**7*k2**9*k3**8 - 
     c        198720*k1**6*k2**10*k3**8 - 
     c        131130*k1**5*k2**11*k3**8 + 
     c        193500*k1**9*k2**6*k3**9 + 
     c        215850*k1**8*k2**7*k3**9 + 
     c        215850*k1**7*k2**8*k3**9 + 
     c        193500*k1**6*k2**9*k3**9 + 
     c        81940*k1**9*k2**5*k3**10 + 
     c        102840*k1**8*k2**6*k3**10 + 
     c        294336*k1**7*k2**7*k3**10 + 
     c        102840*k1**6*k2**8*k3**10 + 
     c        81940*k1**5*k2**9*k3**10 + 
     c        151590*k1**7*k2**6*k3**11 + 
     c        151590*k1**6*k2**7*k3**11 + 
     c        54600*k1**7*k2**5*k3**12 + 
     c        105840*k1**6*k2**6*k3**12 + 
     c        54600*k1**5*k2**7*k3**12)*pi*q**4 
c
      kernel_poly(3) = - (-980*k1**13*k2**7*k3**3 - 
     c     8050*k1**11*k2**9*k3**3 - 
     c        8050*k1**9*k2**11*k3**3 - 
     c        980*k1**7*k2**13*k3**3 - 
     c        154600*k1**13*k2**6*k3**4 - 
     c        18700*k1**12*k2**7*k3**4 + 
     c        22780*k1**11*k2**8*k3**4 + 
     c        212680*k1**10*k2**9*k3**4 + 
     c        212680*k1**9*k2**10*k3**4 + 
     c        22780*k1**8*k2**11*k3**4 - 
     c        18700*k1**7*k2**12*k3**4 - 
     c        154600*k1**6*k2**13*k3**4 - 
     c        8280*k1**13*k2**5*k3**5 - 
     c        323080*k1**12*k2**6*k3**5 + 
     c        304585*k1**11*k2**7*k3**5 + 
     c        367320*k1**10*k2**8*k3**5 - 
     c        529280*k1**9*k2**9*k3**5 + 
     c        367320*k1**8*k2**10*k3**5 + 
     c        304585*k1**7*k2**11*k3**5 - 
     c        323080*k1**6*k2**12*k3**5 - 
     c        8280*k1**5*k2**13*k3**5 - 
     c        75710*k1**13*k2**4*k3**6 - 
     c        15660*k1**12*k2**5*k3**6 - 
     c        213702*k1**11*k2**6*k3**6 - 
     c        43862*k1**10*k2**7*k3**6 + 
     c        304374*k1**9*k2**8*k3**6 + 
     c        304374*k1**8*k2**9*k3**6 - 
     c        43862*k1**7*k2**10*k3**6 - 
     c        213702*k1**6*k2**11*k3**6 - 
     c        15660*k1**5*k2**12*k3**6 - 
     c        75710*k1**4*k2**13*k3**6 - 
     c        615330*k1**11*k2**5*k3**7 - 
     c        886080*k1**10*k2**6*k3**7 + 
     c        739260*k1**9*k2**7*k3**7 + 
     c        1056960*k1**8*k2**8*k3**7 + 
     c        739260*k1**7*k2**9*k3**7 - 
     c        886080*k1**6*k2**10*k3**7 - 
     c        615330*k1**5*k2**11*k3**7 + 
     c        41790*k1**11*k2**4*k3**8 - 
     c        382140*k1**10*k2**5*k3**8 - 
     c        99352*k1**9*k2**6*k3**8 + 
     c        1042858*k1**8*k2**7*k3**8 + 
     c        1042858*k1**7*k2**8*k3**8 - 
     c        99352*k1**6*k2**9*k3**8 - 
     c        382140*k1**5*k2**10*k3**8 + 
     c        41790*k1**4*k2**11*k3**8 + 
     c        371900*k1**9*k2**5*k3**9 + 
     c        413400*k1**8*k2**6*k3**9 + 
     c        1038220*k1**7*k2**7*k3**9 + 
     c        413400*k1**6*k2**8*k3**9 + 
     c        371900*k1**5*k2**9*k3**9 + 
     c        16270*k1**9*k2**4*k3**10 + 
     c        219580*k1**8*k2**5*k3**10 + 
     c        677194*k1**7*k2**6*k3**10 + 
     c        677194*k1**6*k2**7*k3**10 + 
     c        219580*k1**5*k2**8*k3**10 + 
     c        16270*k1**4*k2**9*k3**10 + 
     c        267960*k1**7*k2**5*k3**11 + 
     c        515760*k1**6*k2**6*k3**11 + 
     c        267960*k1**5*k2**7*k3**11 + 
     c        20650*k1**7*k2**4*k3**12 + 
     c        191220*k1**6*k2**5*k3**12 + 
     c        191220*k1**5*k2**6*k3**12 + 
     c        20650*k1**4*k2**7*k3**12)*pi*q**5 - 
     c     (-3780*k1**13*k2**7*k3**2 - 945*k1**11*k2**9*k3**2 - 
     c        945*k1**9*k2**11*k3**2 - 
     c        3780*k1**7*k2**13*k3**2 - 
     c        151520*k1**13*k2**6*k3**3 - 
     c        15620*k1**12*k2**7*k3**3 - 
     c        47500*k1**11*k2**8*k3**3 + 
     c        142400*k1**10*k2**9*k3**3 + 
     c        142400*k1**9*k2**10*k3**3 - 
     c        47500*k1**8*k2**11*k3**3 - 
     c        15620*k1**7*k2**12*k3**3 - 
     c        151520*k1**6*k2**13*k3**3 - 
     c        23700*k1**13*k2**5*k3**4 - 
     c        665200*k1**12*k2**6*k3**4 + 
     c        946640*k1**11*k2**7*k3**4 + 
     c        789520*k1**10*k2**8*k3**4 - 
     c        1678160*k1**9*k2**9*k3**4 + 
     c        789520*k1**8*k2**10*k3**4 + 
     c        946640*k1**7*k2**11*k3**4 - 
     c        665200*k1**6*k2**12*k3**4 - 
     c        23700*k1**5*k2**13*k3**4 - 
     c        376870*k1**13*k2**4*k3**5 - 
     c        68220*k1**12*k2**5*k3**5 + 
     c        1853890*k1**11*k2**6*k3**5 + 
     c        2261490*k1**10*k2**7*k3**5 - 
     c        3660770*k1**9*k2**8*k3**5 - 
     c        3660770*k1**8*k2**9*k3**5 + 
     c        2261490*k1**7*k2**10*k3**5 + 
     c        1853890*k1**6*k2**11*k3**5 - 
     c        68220*k1**5*k2**12*k3**5 - 
     c        376870*k1**4*k2**13*k3**5 - 
     c        44780*k1**13*k2**3*k3**6 - 
     c        307520*k1**12*k2**4*k3**6 - 
     c        904953*k1**11*k2**5*k3**6 + 
     c        691792*k1**10*k2**6*k3**6 + 
     c        983773*k1**9*k2**7*k3**6 - 
     c        2186304*k1**8*k2**8*k3**6 + 
     c        983773*k1**7*k2**9*k3**6 + 
     c        691792*k1**6*k2**10*k3**6 - 
     c        904953*k1**5*k2**11*k3**6 - 
     c        307520*k1**4*k2**12*k3**6 - 
     c        44780*k1**3*k2**13*k3**6 + 
     c        235830*k1**11*k2**4*k3**7 - 
     c        1749420*k1**10*k2**5*k3**7 - 
     c        2141360*k1**9*k2**6*k3**7 + 
     c        2987690*k1**8*k2**7*k3**7 + 
     c        2987690*k1**7*k2**8*k3**7 - 
     c        2141360*k1**6*k2**9*k3**7 - 
     c        1749420*k1**5*k2**10*k3**7 + 
     c        235830*k1**4*k2**11*k3**7 + 
     c        59730*k1**11*k2**3*k3**8 + 
     c        262080*k1**10*k2**4*k3**8 - 
     c        314308*k1**9*k2**5*k3**8 + 
     c        133872*k1**8*k2**6*k3**8 + 
     c        3788204*k1**7*k2**7*k3**8 + 
     c        133872*k1**6*k2**8*k3**8 - 
     c        314308*k1**5*k2**9*k3**8 + 
     c        262080*k1**4*k2**10*k3**8 + 
     c        59730*k1**3*k2**11*k3**8 + 
     c        56150*k1**9*k2**4*k3**9 + 
     c        946700*k1**8*k2**5*k3**9 + 
     c        1959330*k1**7*k2**6*k3**9 + 
     c        1959330*k1**6*k2**7*k3**9 + 
     c        946700*k1**5*k2**8*k3**9 + 
     c        56150*k1**4*k2**9*k3**9 - 
     c        16280*k1**9*k2**3*k3**10 - 
     c        7040*k1**8*k2**4*k3**10 + 
     c        1125136*k1**7*k2**5*k3**10 + 
     c        1392176*k1**6*k2**6*k3**10 + 
     c        1125136*k1**5*k2**7*k3**10 - 
     c        7040*k1**4*k2**8*k3**10 - 
     c        16280*k1**3*k2**9*k3**10 + 
     c        99890*k1**7*k2**4*k3**11 + 
     c        935940*k1**6*k2**5*k3**11 + 
     c        935940*k1**5*k2**6*k3**11 + 
     c        99890*k1**4*k2**7*k3**11 + 
     c        2080*k1**7*k2**3*k3**12 + 
     c        64480*k1**6*k2**4*k3**12 + 
     c        335520*k1**5*k2**5*k3**12 + 
     c        64480*k1**4*k2**6*k3**12 + 2080*k1**3*k2**7*k3**12
     c     )*pi*q**6 
c
      kernel_poly(4) = - (1260*k1**13*k2**7*k3 - 
     c        2205*k1**11*k2**9*k3 - 2205*k1**9*k2**11*k3 + 
     c        1260*k1**7*k2**13*k3 - 88920*k1**13*k2**6*k3**2 - 
     c        20970*k1**12*k2**7*k3**2 - 
     c        11430*k1**11*k2**8*k3**2 + 
     c        83520*k1**10*k2**9*k3**2 + 
     c        83520*k1**9*k2**10*k3**2 - 
     c        11430*k1**8*k2**11*k3**2 - 
     c        20970*k1**7*k2**12*k3**2 - 
     c        88920*k1**6*k2**13*k3**2 - 
     c        19080*k1**13*k2**5*k3**3 - 
     c        652880*k1**12*k2**6*k3**3 + 
     c        788440*k1**11*k2**7*k3**3 + 
     c        508400*k1**10*k2**8*k3**3 - 
     c        1728280*k1**9*k2**9*k3**3 + 
     c        508400*k1**8*k2**10*k3**3 + 
     c        788440*k1**7*k2**11*k3**3 - 
     c        652880*k1**6*k2**12*k3**3 - 
     c        19080*k1**5*k2**13*k3**3 - 
     c        758500*k1**13*k2**4*k3**4 - 
     c        165000*k1**12*k2**5*k3**4 + 
     c        4704210*k1**11*k2**6*k3**4 + 
     c        5540710*k1**10*k2**7*k3**4 - 
     c        8914540*k1**9*k2**8*k3**4 - 
     c        8914540*k1**8*k2**9*k3**4 + 
     c        5540710*k1**7*k2**10*k3**4 + 
     c        4704210*k1**6*k2**11*k3**4 - 
     c        165000*k1**5*k2**12*k3**4 - 
     c        758500*k1**4*k2**13*k3**4 - 
     c        223480*k1**13*k2**3*k3**5 - 
     c        1530880*k1**12*k2**4*k3**5 + 
     c        718335*k1**11*k2**5*k3**5 + 
     c        11318160*k1**10*k2**6*k3**5 - 
     c        440535*k1**9*k2**7*k3**5 - 
     c        20511680*k1**8*k2**8*k3**5 - 
     c        440535*k1**7*k2**9*k3**5 + 
     c        11318160*k1**6*k2**10*k3**5 + 
     c        718335*k1**5*k2**11*k3**5 - 
     c        1530880*k1**4*k2**12*k3**5 - 
     c        223480*k1**3*k2**13*k3**5 + 
     c        52860*k1**13*k2**2*k3**6 - 
     c        180290*k1**12*k2**3*k3**6 - 
     c        132642*k1**11*k2**4*k3**6 - 
     c        1803612*k1**10*k2**5*k3**6 - 
     c        1894968*k1**9*k2**6*k3**6 + 
     c        1490722*k1**8*k2**7*k3**6 + 
     c        1490722*k1**7*k2**8*k3**6 - 
     c        1894968*k1**6*k2**9*k3**6 - 
     c        1803612*k1**5*k2**10*k3**6 - 
     c        132642*k1**4*k2**11*k3**6 - 
     c        180290*k1**3*k2**12*k3**6 + 
     c        52860*k1**2*k2**13*k3**6 + 
     c        305370*k1**11*k2**3*k3**7 + 
     c        1417920*k1**10*k2**4*k3**7 - 
     c        4624440*k1**9*k2**5*k3**7 - 
     c        3561840*k1**8*k2**6*k3**7 + 
     c        10024860*k1**7*k2**7*k3**7 - 
     c        3561840*k1**6*k2**8*k3**7 - 
     c        4624440*k1**5*k2**9*k3**7 + 
     c        1417920*k1**4*k2**10*k3**7 + 
     c        305370*k1**3*k2**11*k3**7 - 
     c        100710*k1**11*k2**2*k3**8 + 
     c        262650*k1**10*k2**3*k3**8 + 
     c        372928*k1**9*k2**4*k3**8 + 
     c        277988*k1**8*k2**5*k3**8 + 
     c        3941126*k1**7*k2**6*k3**8 + 
     c        3941126*k1**6*k2**7*k3**8 + 
     c        277988*k1**5*k2**8*k3**8 + 
     c        372928*k1**4*k2**9*k3**8 + 
     c        262650*k1**3*k2**10*k3**8 - 
     c        100710*k1**2*k2**11*k3**8 - 
     c        87700*k1**9*k2**3*k3**9 - 
     c        136000*k1**8*k2**4*k3**9 + 
     c        3192620*k1**7*k2**5*k3**9 + 
     c        2483120*k1**6*k2**6*k3**9 + 
     c        3192620*k1**5*k2**7*k3**9 - 
     c        136000*k1**4*k2**8*k3**9 - 
     c        87700*k1**3*k2**9*k3**9 + 
     c        42840*k1**9*k2**2*k3**10 - 
     c        83150*k1**8*k2**3*k3**10 + 
     c        359494*k1**7*k2**4*k3**10 + 
     c        2257544*k1**6*k2**5*k3**10 + 
     c        2257544*k1**5*k2**6*k3**10 + 
     c        359494*k1**4*k2**7*k3**10 - 
     c        83150*k1**3*k2**8*k3**10 + 
     c        42840*k1**2*k2**9*k3**10 + 
     c        9560*k1**7*k2**3*k3**11 + 
     c        308960*k1**6*k2**4*k3**11 + 
     c        1647360*k1**5*k2**5*k3**11 + 
     c        308960*k1**4*k2**6*k3**11 + 
     c        9560*k1**3*k2**7*k3**11 + 
     c        5010*k1**7*k2**2*k3**12 + 
     c        3790*k1**6*k2**3*k3**12 + 
     c        129180*k1**5*k2**4*k3**12 + 
     c        129180*k1**4*k2**5*k3**12 + 
     c        3790*k1**3*k2**6*k3**12 + 5010*k1**2*k2**7*k3**12)*
     c      pi*q**7 
c
      kernel_poly(5) = - (5670*k1**13*k2**7 - 5670*k1**11*k2**9 - 
     c     5670*k1**9*k2**11 + 5670*k1**7*k2**13 - 
     c        9720*k1**13*k2**6*k3 + 3870*k1**12*k2**7*k3 - 
     c        10350*k1**11*k2**8*k3 + 8640*k1**10*k2**9*k3 + 
     c        8640*k1**9*k2**10*k3 - 10350*k1**8*k2**11*k3 + 
     c        3870*k1**7*k2**12*k3 - 9720*k1**6*k2**13*k3 - 
     c        29280*k1**13*k2**5*k3**2 - 
     c        379080*k1**12*k2**6*k3**2 + 
     c        314805*k1**11*k2**7*k3**2 + 
     c        303480*k1**10*k2**8*k3**2 - 
     c        683820*k1**9*k2**9*k3**2 + 
     c        303480*k1**8*k2**10*k3**2 + 
     c        314805*k1**7*k2**11*k3**2 - 
     c        379080*k1**6*k2**12*k3**2 - 
     c        29280*k1**5*k2**13*k3**2 - 
     c        755420*k1**13*k2**4*k3**3 - 
     c        146520*k1**12*k2**5*k3**3 + 
     c        4346850*k1**11*k2**6*k3**3 + 
     c        4797590*k1**10*k2**7*k3**3 - 
     c        8509220*k1**9*k2**8*k3**3 - 
     c        8509220*k1**8*k2**9*k3**3 + 
     c        4797590*k1**7*k2**10*k3**3 + 
     c        4346850*k1**6*k2**11*k3**3 - 
     c        146520*k1**5*k2**12*k3**3 - 
     c        755420*k1**4*k2**13*k3**3 - 
     c        448150*k1**13*k2**3*k3**4 - 
     c        3080800*k1**12*k2**4*k3**4 + 
     c        3213640*k1**11*k2**5*k3**4 + 
     c        25293440*k1**10*k2**6*k3**4 - 
     c        2619000*k1**9*k2**7*k3**4 - 
     c        43853760*k1**8*k2**8*k3**4 - 
     c        2619000*k1**7*k2**9*k3**4 + 
     c        25293440*k1**6*k2**10*k3**4 + 
     c        3213640*k1**5*k2**11*k3**4 - 
     c        3080800*k1**4*k2**12*k3**4 - 
     c        448150*k1**3*k2**13*k3**4 + 
     c        264300*k1**13*k2**2*k3**5 - 
     c        899770*k1**12*k2**3*k3**5 - 
     c        2333690*k1**11*k2**4*k3**5 + 
     c        6208740*k1**10*k2**5*k3**5 + 
     c        10942680*k1**9*k2**6*k3**5 - 
     c        15817350*k1**8*k2**7*k3**5 - 
     c        15817350*k1**7*k2**8*k3**5 + 
     c        10942680*k1**6*k2**9*k3**5 + 
     c        6208740*k1**5*k2**10*k3**5 - 
     c        2333690*k1**4*k2**11*k3**5 - 
     c        899770*k1**3*k2**12*k3**5 + 
     c        264300*k1**2*k2**13*k3**5 + 
     c        3960*k1**13*k2*k3**6 + 
     c        211440*k1**12*k2**2*k3**6 + 
     c        341967*k1**11*k2**3*k3**6 + 
     c        2153992*k1**10*k2**4*k3**6 - 
     c        8735142*k1**9*k2**5*k3**6 - 
     c        7746192*k1**8*k2**6*k3**6 + 
     c        14450810*k1**7*k2**7*k3**6 - 
     c        7746192*k1**6*k2**8*k3**6 - 
     c        8735142*k1**5*k2**9*k3**6 + 
     c        2153992*k1**4*k2**10*k3**6 + 
     c        341967*k1**3*k2**11*k3**6 + 
     c        211440*k1**2*k2**12*k3**6 + 
     c        3960*k1*k2**13*k3**6 - 
     c        503550*k1**11*k2**2*k3**7 + 
     c        1340130*k1**10*k2**3*k3**7 + 
     c        1372600*k1**9*k2**4*k3**7 - 
     c        7300860*k1**8*k2**5*k3**7 + 
     c        3942230*k1**7*k2**6*k3**7 + 
     c        3942230*k1**6*k2**7*k3**7 - 
     c        7300860*k1**5*k2**8*k3**7 + 
     c        1372600*k1**4*k2**9*k3**7 + 
     c        1340130*k1**3*k2**10*k3**7 - 
     c        503550*k1**2*k2**11*k3**7 - 
     c        11880*k1**11*k2*k3**8 - 
     c        402840*k1**10*k2**2*k3**8 + 
     c        178912*k1**9*k2**3*k3**8 - 
     c        26608*k1**8*k2**4*k3**8 + 
     c        4885714*k1**7*k2**5*k3**8 + 
     c        3813024*k1**6*k2**6*k3**8 + 
     c        4885714*k1**5*k2**7*k3**8 - 
     c        26608*k1**4*k2**8*k3**8 + 
     c        178912*k1**3*k2**9*k3**8 - 
     c        402840*k1**2*k2**10*k3**8 - 
     c        11880*k1*k2**11*k3**8 + 
     c        214200*k1**9*k2**2*k3**9 - 
     c        440950*k1**8*k2**3*k3**9 + 
     c        809630*k1**7*k2**4*k3**9 + 
     c        3398680*k1**6*k2**5*k3**9 + 
     c        3398680*k1**5*k2**6*k3**9 + 
     c        809630*k1**4*k2**7*k3**9 - 
     c        440950*k1**3*k2**8*k3**9 + 
     c        214200*k1**2*k2**9*k3**9 + 
     c        11880*k1**9*k2*k3**10 + 
     c        171360*k1**8*k2**2*k3**10 - 
     c        74624*k1**7*k2**3*k3**10 + 
     c        717576*k1**6*k2**4*k3**10 + 
     c        3463436*k1**5*k2**5*k3**10 + 
     c        717576*k1**4*k2**6*k3**10 - 
     c        74624*k1**3*k2**7*k3**10 + 
     c        171360*k1**2*k2**8*k3**10 + 
     c        11880*k1*k2**9*k3**10 + 
     c        25050*k1**7*k2**2*k3**11 + 
     c        15590*k1**6*k2**3*k3**11 + 
     c        625740*k1**5*k2**4*k3**11 + 
     c        625740*k1**4*k2**5*k3**11 + 
     c        15590*k1**3*k2**6*k3**11 + 
     c        25050*k1**2*k2**7*k3**11 - 3960*k1**7*k2*k3**12 + 
     c        20040*k1**6*k2**2*k3**12 + 
     c        13800*k1**5*k2**3*k3**12 + 
     c        23120*k1**4*k2**4*k3**12 + 
     c        13800*k1**3*k2**5*k3**12 + 
     c        20040*k1**2*k2**6*k3**12 - 3960*k1*k2**7*k3**12)*
     c     pi*q**8 
c
      kernel_poly(6) = - (22680*k1**13*k2**6 + 
     c        22680*k1**12*k2**7 - 22680*k1**11*k2**8 - 
     c        22680*k1**10*k2**9 - 22680*k1**9*k2**10 - 
     c        22680*k1**8*k2**11 + 22680*k1**7*k2**12 + 
     c        22680*k1**6*k2**13 + 6240*k1**13*k2**5*k3 - 
     c        43560*k1**12*k2**6*k3 + 87657*k1**11*k2**7*k3 + 
     c        28440*k1**10*k2**8*k3 - 207324*k1**9*k2**9*k3 + 
     c        28440*k1**8*k2**10*k3 + 87657*k1**7*k2**11*k3 - 
     c        43560*k1**6*k2**12*k3 + 6240*k1**5*k2**13*k3 - 
     c        390870*k1**13*k2**4*k3**2 - 
     c        152220*k1**12*k2**5*k3**2 + 
     c        1784670*k1**11*k2**6*k3**2 + 
     c        2135070*k1**10*k2**7*k3**2 - 
     c        3563130*k1**9*k2**8*k3**2 - 
     c        3563130*k1**8*k2**9*k3**2 + 
     c        2135070*k1**7*k2**10*k3**2 + 
     c        1784670*k1**6*k2**11*k3**2 - 
     c        152220*k1**5*k2**12*k3**2 - 
     c        390870*k1**4*k2**13*k3**2 - 
     c        447380*k1**13*k2**3*k3**3 - 
     c        3068480*k1**12*k2**4*k3**3 + 
     c        2845310*k1**11*k2**5*k3**3 + 
     c        23422720*k1**10*k2**6*k3**3 - 
     c        2707278*k1**9*k2**7*k3**3 - 
     c        39809280*k1**8*k2**8*k3**3 - 
     c        2707278*k1**7*k2**9*k3**3 + 
     c        23422720*k1**6*k2**10*k3**3 + 
     c        2845310*k1**5*k2**11*k3**3 - 
     c        3068480*k1**4*k2**12*k3**3 - 
     c        447380*k1**3*k2**13*k3**3 + 
     c        528600*k1**13*k2**2*k3**4 - 
     c        1804300*k1**12*k2**3*k3**4 - 
     c        5425270*k1**11*k2**4*k3**4 + 
     c        17532460*k1**10*k2**5*k3**4 + 
     c        28922920*k1**9*k2**6*k3**4 - 
     c        39858850*k1**8*k2**7*k3**4 - 
     c        39858850*k1**7*k2**8*k3**4 + 
     c        28922920*k1**6*k2**9*k3**4 + 
     c        17532460*k1**5*k2**10*k3**4 - 
     c        5425270*k1**4*k2**11*k3**4 - 
     c        1804300*k1**3*k2**12*k3**4 + 
     c        528600*k1**2*k2**13*k3**4 + 
     c        19800*k1**13*k2*k3**5 + 
     c        1057200*k1**12*k2**2*k3**5 - 
     c        679085*k1**11*k2**3*k3**5 + 
     c        257640*k1**10*k2**4*k3**5 - 
     c        257550*k1**9*k2**5*k3**5 - 
     c        4954320*k1**8*k2**6*k3**5 + 
     c        539566*k1**7*k2**7*k3**5 - 
     c        4954320*k1**6*k2**8*k3**5 - 
     c        257550*k1**5*k2**9*k3**5 + 
     c        257640*k1**4*k2**10*k3**5 - 
     c        679085*k1**3*k2**11*k3**5 + 
     c        1057200*k1**2*k2**12*k3**5 + 
     c        19800*k1*k2**13*k3**5 - 4950*k1**13*k3**6 + 
     c        15840*k1**12*k2*k3**6 - 
     c        664290*k1**11*k2**2*k3**6 + 
     c        2556058*k1**10*k2**3*k3**6 + 
     c        1376058*k1**9*k2**4*k3**6 - 
     c        17106078*k1**8*k2**5*k3**6 + 
     c        3816522*k1**7*k2**6*k3**6 + 
     c        3816522*k1**6*k2**7*k3**6 - 
     c        17106078*k1**5*k2**8*k3**6 + 
     c        1376058*k1**4*k2**9*k3**6 + 
     c        2556058*k1**3*k2**10*k3**6 - 
     c        664290*k1**2*k2**11*k3**6 + 
     c        15840*k1*k2**12*k3**6 - 4950*k2**13*k3**6 - 
     c        59400*k1**11*k2*k3**7 - 
     c        2014200*k1**10*k2**2*k3**7 + 
     c        1585450*k1**9*k2**3*k3**7 + 
     c        246000*k1**8*k2**4*k3**7 - 
     c        132740*k1**7*k2**5*k3**7 + 
     c        2880480*k1**6*k2**6*k3**7 - 
     c        132740*k1**5*k2**7*k3**7 + 
     c        246000*k1**4*k2**8*k3**7 + 
     c        1585450*k1**3*k2**9*k3**7 - 
     c        2014200*k1**2*k2**10*k3**7 - 
     c        59400*k1*k2**11*k3**7 + 14850*k1**11*k3**8 - 
     c        47520*k1**10*k2*k3**8 - 
     c        215280*k1**9*k2**2*k3**8 - 
     c        649582*k1**8*k2**3*k3**8 + 
     c        2094318*k1**7*k2**4*k3**8 + 
     c        4030196*k1**6*k2**5*k3**8 + 
     c        4030196*k1**5*k2**6*k3**8 + 
     c        2094318*k1**4*k2**7*k3**8 - 
     c        649582*k1**3*k2**8*k3**8 - 
     c        215280*k1**2*k2**9*k3**8 - 
     c        47520*k1*k2**10*k3**8 + 14850*k2**11*k3**8 + 
     c        59400*k1**9*k2*k3**9 + 856800*k1**8*k2**2*k3**9 - 
     c        496780*k1**7*k2**3*k3**9 + 
     c        865320*k1**6*k2**4*k3**9 + 
     c        3725020*k1**5*k2**5*k3**9 + 
     c        865320*k1**4*k2**6*k3**9 - 
     c        496780*k1**3*k2**7*k3**9 + 
     c        856800*k1**2*k2**8*k3**9 + 59400*k1*k2**9*k3**9 - 
     c        14850*k1**9*k3**10 + 47520*k1**8*k2*k3**10 + 
     c        320910*k1**7*k2**2*k3**10 - 
     c        71646*k1**6*k2**3*k3**10 + 
     c        1306874*k1**5*k2**4*k3**10 + 
     c        1306874*k1**4*k2**5*k3**10 - 
     c        71646*k1**3*k2**6*k3**10 + 
     c        320910*k1**2*k2**7*k3**10 + 
     c        47520*k1*k2**8*k3**10 - 14850*k2**9*k3**10 - 
     c        19800*k1**7*k2*k3**11 + 
     c        100200*k1**6*k2**2*k3**11 + 
     c        63960*k1**5*k2**3*k3**11 + 
     c        102160*k1**4*k2**4*k3**11 + 
     c        63960*k1**3*k2**5*k3**11 + 
     c        100200*k1**2*k2**6*k3**11 - 
     c        19800*k1*k2**7*k3**11 + 4950*k1**7*k3**12 - 
     c        15840*k1**6*k2*k3**12 + 
     c        30060*k1**5*k2**2*k3**12 - 
     c        6550*k1**4*k2**3*k3**12 - 
     c        6550*k1**3*k2**4*k3**12 + 
     c        30060*k1**2*k2**5*k3**12 - 
     c        15840*k1*k2**6*k3**12 + 4950*k2**7*k3**12)*pi*q**9 
c
      kernel_poly(7) = 
     c     - (34020*k1**13*k2**5 + 90720*k1**12*k2**6 + 
     c        22680*k1**11*k2**7 - 90720*k1**10*k2**8 - 
     c        113400*k1**9*k2**9 - 90720*k1**8*k2**10 + 
     c        22680*k1**7*k2**11 + 90720*k1**6*k2**12 + 
     c        34020*k1**5*k2**13 - 70110*k1**13*k2**4*k3 + 
     c        17940*k1**12*k2**5*k3 + 496038*k1**11*k2**6*k3 + 
     c        485478*k1**10*k2**7*k3 - 954546*k1**9*k2**8*k3 - 
     c        954546*k1**8*k2**9*k3 + 485478*k1**7*k2**10*k3 + 
     c        496038*k1**6*k2**11*k3 + 17940*k1**5*k2**12*k3 - 
     c        70110*k1**4*k2**13*k3 - 
     c        226980*k1**13*k2**3*k3**2 - 
     c        1586880*k1**12*k2**4*k3**2 + 
     c        834105*k1**11*k2**5*k3**2 + 
     c        10372080*k1**10*k2**6*k3**2 - 
     c        861015*k1**9*k2**7*k3**2 - 
     c        17257920*k1**8*k2**8*k3**2 - 
     c        861015*k1**7*k2**9*k3**2 + 
     c        10372080*k1**6*k2**10*k3**2 + 
     c        834105*k1**5*k2**11*k3**2 - 
     c        1586880*k1**4*k2**12*k3**2 - 
     c        226980*k1**3*k2**13*k3**2 + 
     c        528600*k1**13*k2**2*k3**3 - 
     c        1801220*k1**12*k2**3*k3**3 - 
     c        6176510*k1**11*k2**4*k3**3 + 
     c        15397220*k1**10*k2**5*k3**3 + 
     c        27847688*k1**9*k2**6*k3**3 - 
     c        35470922*k1**8*k2**7*k3**3 - 
     c        35470922*k1**7*k2**8*k3**3 + 
     c        27847688*k1**6*k2**9*k3**3 + 
     c        15397220*k1**5*k2**10*k3**3 - 
     c        6176510*k1**4*k2**11*k3**3 - 
     c        1801220*k1**3*k2**12*k3**3 + 
     c        528600*k1**2*k2**13*k3**3 + 
     c        39600*k1**13*k2*k3**4 + 
     c        2114400*k1**12*k2**2*k3**4 - 
     c        2286880*k1**11*k2**3*k3**4 - 
     c        3844880*k1**10*k2**4*k3**4 + 
     c        14573280*k1**9*k2**5*k3**4 + 
     c        1140880*k1**8*k2**6*k3**4 - 
     c        25204600*k1**7*k2**7*k3**4 + 
     c        1140880*k1**6*k2**8*k3**4 + 
     c        14573280*k1**5*k2**9*k3**4 - 
     c        3844880*k1**4*k2**10*k3**4 - 
     c        2286880*k1**3*k2**11*k3**4 + 
     c        2114400*k1**2*k2**12*k3**4 + 
     c        39600*k1*k2**13*k3**4 - 24750*k1**13*k3**5 + 
     c        79200*k1**12*k2*k3**5 + 
     c        706950*k1**11*k2**2*k3**5 + 
     c        2267010*k1**10*k2**3*k3**5 - 
     c        1889630*k1**9*k2**4*k3**5 - 
     c        13607910*k1**8*k2**5*k3**5 + 
     c        6781954*k1**7*k2**6*k3**5 + 
     c        6781954*k1**6*k2**7*k3**5 - 
     c        13607910*k1**5*k2**8*k3**5 - 
     c        1889630*k1**4*k2**9*k3**5 + 
     c        2267010*k1**3*k2**10*k3**5 + 
     c        706950*k1**2*k2**11*k3**5 + 
     c        79200*k1*k2**12*k3**5 - 24750*k2**13*k3**5 - 
     c        19800*k1**12*k3**6 - 95040*k1**11*k2*k3**6 - 
     c        3714360*k1**10*k2**2*k3**6 + 
     c        3336012*k1**9*k2**3*k3**6 - 
     c        103848*k1**8*k2**4*k3**6 - 
     c        8005147*k1**7*k2**5*k3**6 + 
     c        2975456*k1**6*k2**6*k3**6 - 
     c        8005147*k1**5*k2**7*k3**6 - 
     c        103848*k1**4*k2**8*k3**6 + 
     c        3336012*k1**3*k2**9*k3**6 - 
     c        3714360*k1**2*k2**10*k3**6 - 
     c        95040*k1*k2**11*k3**6 - 19800*k2**12*k3**6 + 
     c        74250*k1**11*k3**7 - 237600*k1**10*k2*k3**7 - 
     c        2790000*k1**9*k2**2*k3**7 + 
     c        102450*k1**8*k2**3*k3**7 + 
     c        3853430*k1**7*k2**4*k3**7 + 
     c        1589180*k1**6*k2**5*k3**7 + 
     c        1589180*k1**5*k2**6*k3**7 + 
     c        3853430*k1**4*k2**7*k3**7 + 
     c        102450*k1**3*k2**8*k3**7 - 
     c        2790000*k1**2*k2**9*k3**7 - 
     c        237600*k1*k2**10*k3**7 + 74250*k2**11*k3**7 + 
     c        59400*k1**10*k3**8 + 47520*k1**9*k2*k3**8 + 
     c        1153080*k1**8*k2**2*k3**8 - 
     c        815478*k1**7*k2**3*k3**8 + 
     c        1580752*k1**6*k2**4*k3**8 + 
     c        2613184*k1**5*k2**5*k3**8 + 
     c        1580752*k1**4*k2**6*k3**8 - 
     c        815478*k1**3*k2**7*k3**8 + 
     c        1153080*k1**2*k2**8*k3**8 + 
     c        47520*k1*k2**9*k3**8 + 59400*k2**10*k3**8 - 
     c        74250*k1**9*k3**9 + 237600*k1**8*k2*k3**9 + 
     c        1404150*k1**7*k2**2*k3**9 - 
     c        545670*k1**6*k2**3*k3**9 + 
     c        1278130*k1**5*k2**4*k3**9 + 
     c        1278130*k1**4*k2**5*k3**9 - 
     c        545670*k1**3*k2**6*k3**9 + 
     c        1404150*k1**2*k2**7*k3**9 + 
     c        237600*k1*k2**8*k3**9 - 74250*k2**9*k3**9 - 
     c        59400*k1**8*k3**10 + 31680*k1**7*k2*k3**10 + 
     c        426840*k1**6*k2**2*k3**10 + 
     c        51896*k1**5*k2**3*k3**10 + 
     c        254096*k1**4*k2**4*k3**10 + 
     c        51896*k1**3*k2**5*k3**10 + 
     c        426840*k1**2*k2**6*k3**10 + 
     c        31680*k1*k2**7*k3**10 - 59400*k2**8*k3**10 + 
     c        24750*k1**7*k3**11 - 79200*k1**6*k2*k3**11 + 
     c        150300*k1**5*k2**2*k3**11 - 
     c        36110*k1**4*k2**3*k3**11 - 
     c        36110*k1**3*k2**4*k3**11 + 
     c        150300*k1**2*k2**5*k3**11 - 
     c        79200*k1*k2**6*k3**11 + 24750*k2**7*k3**11 + 
     c        19800*k1**6*k3**12 - 23760*k1**5*k2*k3**12 + 
     c        20040*k1**4*k2**2*k3**12 - 
     c        4720*k1**3*k2**3*k3**12 + 
     c        20040*k1**2*k2**4*k3**12 - 
     c        23760*k1*k2**5*k3**12 + 19800*k2**6*k3**12)*pi*
     c      q**10 
c
      kernel_poly(8) = - (22680*k1**13*k2**4 + 136080*k1**12*k2**5 + 
     c        204120*k1**11*k2**6 - 22680*k1**10*k2**7 - 
     c        340200*k1**9*k2**8 - 340200*k1**8*k2**9 - 
     c        22680*k1**7*k2**10 + 204120*k1**6*k2**11 + 
     c        136080*k1**5*k2**12 + 22680*k1**4*k2**13 - 
     c        43380*k1**13*k2**3*k3 - 285120*k1**12*k2**4*k3 + 
     c        385557*k1**11*k2**5*k3 + 
     c        2469552*k1**10*k2**6*k3 - 371787*k1**9*k2**7*k3 - 
     c        4257984*k1**8*k2**8*k3 - 371787*k1**7*k2**9*k3 + 
     c        2469552*k1**6*k2**10*k3 + 
     c        385557*k1**5*k2**11*k3 - 285120*k1**4*k2**12*k3 - 
     c        43380*k1**3*k2**13*k3 + 
     c        264300*k1**13*k2**2*k3**2 - 
     c        913770*k1**12*k2**3*k3**2 - 
     c        3547350*k1**11*k2**4*k3**2 + 
     c        5668020*k1**10*k2**5*k3**2 + 
     c        12684420*k1**9*k2**6*k3**2 - 
     c        14372340*k1**8*k2**7*k3**2 - 
     c        14372340*k1**7*k2**8*k3**2 + 
     c        12684420*k1**6*k2**9*k3**2 + 
     c        5668020*k1**5*k2**10*k3**2 - 
     c        3547350*k1**4*k2**11*k3**2 - 
     c        913770*k1**3*k2**12*k3**2 + 
     c        264300*k1**2*k2**13*k3**2 + 
     c        39600*k1**13*k2*k3**3 + 
     c        2114400*k1**12*k2**2*k3**3 - 
     c        2671820*k1**11*k2**3*k3**3 - 
     c        7291120*k1**10*k2**4*k3**3 + 
     c        13049052*k1**9*k2**5*k3**3 + 
     c        5207312*k1**8*k2**6*k3**3 - 
     c        21778976*k1**7*k2**7*k3**3 + 
     c        5207312*k1**6*k2**8*k3**3 + 
     c        13049052*k1**5*k2**9*k3**3 - 
     c        7291120*k1**4*k2**10*k3**3 - 
     c        2671820*k1**3*k2**11*k3**3 + 
     c        2114400*k1**2*k2**12*k3**3 + 
     c        39600*k1*k2**13*k3**3 - 49500*k1**13*k3**4 + 
     c        158400*k1**12*k2*k3**4 + 
     c        2924550*k1**11*k2**2*k3**4 + 
     c        487030*k1**10*k2**3*k3**4 - 
     c        8182660*k1**9*k2**4*k3**4 - 
     c        2929880*k1**8*k2**5*k3**4 + 
     c        7750340*k1**7*k2**6*k3**4 + 
     c        7750340*k1**6*k2**7*k3**4 - 
     c        2929880*k1**5*k2**8*k3**4 - 
     c        8182660*k1**4*k2**9*k3**4 + 
     c        487030*k1**3*k2**10*k3**4 + 
     c        2924550*k1**2*k2**11*k3**4 + 
     c        158400*k1*k2**12*k3**4 - 49500*k2**13*k3**4 - 
     c        99000*k1**12*k3**5 - 2458200*k1**10*k2**2*k3**5 + 
     c        3409720*k1**9*k2**3*k3**5 - 
     c        1810760*k1**8*k2**4*k3**5 - 
     c        5733499*k1**7*k2**5*k3**5 + 
     c        10495776*k1**6*k2**6*k3**5 - 
     c        5733499*k1**5*k2**7*k3**5 - 
     c        1810760*k1**4*k2**8*k3**5 + 
     c        3409720*k1**3*k2**9*k3**5 - 
     c        2458200*k1**2*k2**10*k3**5 - 99000*k2**12*k3**5 + 
     c        118800*k1**11*k3**6 - 459360*k1**10*k2*k3**6 - 
     c        6015840*k1**9*k2**2*k3**6 + 
     c        1440588*k1**8*k2**3*k3**6 + 
     c        5736868*k1**7*k2**4*k3**6 - 
     c        1497356*k1**6*k2**5*k3**6 - 
     c        1497356*k1**5*k2**6*k3**6 + 
     c        5736868*k1**4*k2**7*k3**6 + 
     c        1440588*k1**3*k2**8*k3**6 - 
     c        6015840*k1**2*k2**9*k3**6 - 
     c        459360*k1*k2**10*k3**6 + 118800*k2**11*k3**6 + 
     c        297000*k1**10*k3**7 - 237600*k1**9*k2*k3**7 - 
     c        1089000*k1**8*k2**2*k3**7 - 
     c        311050*k1**7*k2**3*k3**7 + 
     c        3376880*k1**6*k2**4*k3**7 + 
     c        531960*k1**5*k2**5*k3**7 + 
     c        3376880*k1**4*k2**6*k3**7 - 
     c        311050*k1**3*k2**7*k3**7 - 
     c        1089000*k1**2*k2**8*k3**7 - 
     c        237600*k1*k2**9*k3**7 + 297000*k2**10*k3**7 - 
     c        59400*k1**9*k3**8 + 427680*k1**8*k2*k3**8 + 
     c        2395920*k1**7*k2**2*k3**8 - 
     c        957872*k1**6*k2**3*k3**8 + 
     c        901148*k1**5*k2**4*k3**8 + 
     c        901148*k1**4*k2**5*k3**8 - 
     c        957872*k1**3*k2**6*k3**8 + 
     c        2395920*k1**2*k2**7*k3**8 + 
     c        427680*k1*k2**8*k3**8 - 59400*k2**9*k3**8 - 
     c        297000*k1**8*k3**9 + 316800*k1**7*k2*k3**9 + 
     c        1332600*k1**6*k2**2*k3**9 - 
     c        314780*k1**5*k2**3*k3**9 + 
     c        303120*k1**4*k2**4*k3**9 - 
     c        314780*k1**3*k2**5*k3**9 + 
     c        1332600*k1**2*k2**6*k3**9 + 
     c        316800*k1*k2**7*k3**9 - 297000*k2**8*k3**9 - 
     c        39600*k1**7*k3**10 - 110880*k1**6*k2*k3**10 + 
     c        426060*k1**5*k2**2*k3**10 - 
     c        106126*k1**4*k2**3*k3**10 - 
     c        106126*k1**3*k2**4*k3**10 + 
     c        426060*k1**2*k2**5*k3**10 - 
     c        110880*k1*k2**6*k3**10 - 39600*k2**7*k3**10 + 
     c        99000*k1**6*k3**11 - 118800*k1**5*k2*k3**11 + 
     c        100200*k1**4*k2**2*k3**11 - 
     c        24440*k1**3*k2**3*k3**11 + 
     c        100200*k1**2*k2**4*k3**11 - 
     c        118800*k1*k2**5*k3**11 + 99000*k2**6*k3**11 + 
     c        29700*k1**5*k3**12 - 15840*k1**4*k2*k3**12 + 
     c        5010*k1**3*k2**2*k3**12 + 
     c        5010*k1**2*k2**3*k3**12 - 15840*k1*k2**4*k3**12 + 
     c        29700*k2**5*k3**12)*pi*q**11 
c     
      kernel_poly(9) = -(5670*k1**13*k2**3 + 90720*k1**12*k2**4 + 
     c        334530*k1**11*k2**5 + 362880*k1**10*k2**6 - 
     c        340200*k1**9*k2**7 - 907200*k1**8*k2**8 - 
     c        340200*k1**7*k2**9 + 362880*k1**6*k2**10 + 
     c        334530*k1**5*k2**11 + 90720*k1**4*k2**12 + 
     c        5670*k1**3*k2**13 + 52860*k1**13*k2**2*k3 - 
     c        174690*k1**12*k2**3*k3 - 562302*k1**11*k2**4*k3 + 
     c        1766628*k1**10*k2**5*k3 + 
     c        2915892*k1**9*k2**6*k3 - 3932868*k1**8*k2**7*k3 - 
     c        3932868*k1**7*k2**8*k3 + 2915892*k1**6*k2**9*k3 + 
     c        1766628*k1**5*k2**10*k3 - 
     c        562302*k1**4*k2**11*k3 - 174690*k1**3*k2**12*k3 + 
     c        52860*k1**2*k2**13*k3 + 19800*k1**13*k2*k3**2 + 
     c        1057200*k1**12*k2**2*k3**2 - 
     c        1475325*k1**11*k2**3*k3**2 - 
     c        5266200*k1**10*k2**4*k3**2 + 
     c        3901830*k1**9*k2**5*k3**2 + 
     c        4002360*k1**8*k2**6*k3**2 - 
     c        6126150*k1**7*k2**7*k3**2 + 
     c        4002360*k1**6*k2**8*k3**2 + 
     c        3901830*k1**5*k2**9*k3**2 - 
     c        5266200*k1**4*k2**10*k3**2 - 
     c        1475325*k1**3*k2**11*k3**2 + 
     c        1057200*k1**2*k2**12*k3**2 + 
     c        19800*k1*k2**13*k3**2 - 49500*k1**13*k3**3 + 
     c        158400*k1**12*k2*k3**3 + 
     c        3327390*k1**11*k2**2*k3**3 - 
     c        1163050*k1**10*k2**3*k3**3 - 
     c        13226372*k1**9*k2**4*k3**3 - 
     c        1101952*k1**8*k2**5*k3**3 + 
     c        10843876*k1**7*k2**6*k3**3 + 
     c        10843876*k1**6*k2**7*k3**3 - 
     c        1101952*k1**5*k2**8*k3**3 - 
     c        13226372*k1**4*k2**9*k3**3 - 
     c        1163050*k1**3*k2**10*k3**3 + 
     c        3327390*k1**2*k2**11*k3**3 + 
     c        158400*k1*k2**12*k3**3 - 49500*k2**13*k3**3 - 
     c        198000*k1**12*k3**4 + 178200*k1**11*k2*k3**4 + 
     c        1126200*k1**10*k2**2*k3**4 + 
     c        1421960*k1**9*k2**3*k3**4 - 
     c        7065440*k1**8*k2**4*k3**4 - 
     c        301490*k1**7*k2**5*k3**4 + 
     c        17206320*k1**6*k2**6*k3**4 - 
     c        301490*k1**5*k2**7*k3**4 - 
     c        7065440*k1**4*k2**8*k3**4 + 
     c        1421960*k1**3*k2**9*k3**4 + 
     c        1126200*k1**2*k2**10*k3**4 + 
     c        178200*k1*k2**11*k3**4 - 198000*k2**12*k3**4 - 
     c        396000*k1**10*k2*k3**5 - 
     c        5360160*k1**9*k2**2*k3**5 + 
     c        1994620*k1**8*k2**3*k3**5 + 
     c        7195124*k1**7*k2**4*k3**5 + 
     c        906244*k1**6*k2**5*k3**5 + 
     c        906244*k1**5*k2**6*k3**5 + 
     c        7195124*k1**4*k2**7*k3**5 + 
     c        1994620*k1**3*k2**8*k3**5 - 
     c        5360160*k1**2*k2**9*k3**5 - 
     c        396000*k1*k2**10*k3**5 + 574200*k1**10*k3**6 - 
     c        649440*k1**9*k2*k3**6 - 
     c        4645800*k1**8*k2**2*k3**6 + 
     c        955267*k1**7*k2**3*k3**6 + 
     c        5839000*k1**6*k2**4*k3**6 - 
     c        1013844*k1**5*k2**5*k3**6 + 
     c        5839000*k1**4*k2**6*k3**6 + 
     c        955267*k1**3*k2**7*k3**6 - 
     c        4645800*k1**2*k2**8*k3**6 - 
     c        649440*k1*k2**9*k3**6 + 574200*k2**10*k3**6 + 
     c        297000*k1**9*k3**7 + 237600*k1**8*k2*k3**7 + 
     c        1026960*k1**7*k2**2*k3**7 - 
     c        515560*k1**6*k2**3*k3**7 + 
     c        712580*k1**5*k2**4*k3**7 + 
     c        712580*k1**4*k2**5*k3**7 - 
     c        515560*k1**3*k2**6*k3**7 + 
     c        1026960*k1**2*k2**7*k3**7 + 
     c        237600*k1*k2**8*k3**7 + 297000*k2**9*k3**7 - 
     c        534600*k1**8*k3**8 + 681120*k1**7*k2*k3**8 + 
     c        2206920*k1**6*k2**2*k3**8 - 
     c        754228*k1**5*k2**3*k3**8 + 
     c        274240*k1**4*k2**4*k3**8 - 
     c        754228*k1**3*k2**5*k3**8 + 
     c        2206920*k1**2*k2**6*k3**8 + 
     c        681120*k1*k2**7*k3**8 - 534600*k2**8*k3**8 - 
     c        396000*k1**7*k3**9 + 79200*k1**6*k2*k3**9 + 
     c        927900*k1**5*k2**2*k3**9 - 
     c        279270*k1**4*k2**3*k3**9 - 
     c        279270*k1**3*k2**4*k3**9 + 
     c        927900*k1**2*k2**5*k3**9 + 79200*k1*k2**6*k3**9 - 
     c        396000*k2**7*k3**9 + 138600*k1**6*k3**10 - 
     c        225720*k1**5*k2*k3**10 + 
     c        255480*k1**4*k2**2*k3**10 - 
     c        68944*k1**3*k2**3*k3**10 + 
     c        255480*k1**2*k2**4*k3**10 - 
     c        225720*k1*k2**5*k3**10 + 138600*k2**6*k3**10 + 
     c        148500*k1**5*k3**11 - 79200*k1**4*k2*k3**11 + 
     c        25050*k1**3*k2**2*k3**11 + 
     c        25050*k1**2*k2**3*k3**11 - 
     c        79200*k1*k2**4*k3**11 + 148500*k2**5*k3**11 + 
     c        19800*k1**4*k3**12 - 3960*k1**3*k2*k3**12 - 
     c        3960*k1*k2**3*k3**12 + 19800*k2**4*k3**12)*pi*q**12 
c
      kernel_poly(10) = 
     c     - (22680*k1**12*k2**3 + 226800*k1**11*k2**4 + 
     c        657720*k1**10*k2**5 + 249480*k1**9*k2**6 - 
     c        1156680*k1**8*k2**7 - 1156680*k1**7*k2**8 + 
     c        249480*k1**6*k2**9 + 657720*k1**5*k2**10 + 
     c        226800*k1**4*k2**11 + 22680*k1**3*k2**12 + 
     c        3960*k1**13*k2*k3 + 211440*k1**12*k2**2*k3 - 
     c        258273*k1**11*k2**3*k3 - 625848*k1**10*k2**4*k3 + 
     c        1641198*k1**9*k2**5*k3 + 469848*k1**8*k2**6*k3 - 
     c        2832990*k1**7*k2**7*k3 + 469848*k1**6*k2**8*k3 + 
     c        1641198*k1**5*k2**9*k3 - 625848*k1**4*k2**10*k3 - 
     c        258273*k1**3*k2**11*k3 + 211440*k1**2*k2**12*k3 + 
     c        3960*k1*k2**13*k3 - 24750*k1**13*k3**2 + 
     c        79200*k1**12*k2*k3**2 + 
     c        1714050*k1**11*k2**2*k3**2 - 
     c        1085250*k1**10*k2**3*k3**2 - 
     c        8968380*k1**9*k2**4*k3**2 - 
     c        1557810*k1**8*k2**5*k3**2 + 
     c        8446860*k1**7*k2**6*k3**2 + 
     c        8446860*k1**6*k2**7*k3**2 - 
     c        1557810*k1**5*k2**8*k3**2 - 
     c        8968380*k1**4*k2**9*k3**2 - 
     c        1085250*k1**3*k2**10*k3**2 + 
     c        1714050*k1**2*k2**11*k3**2 + 
     c        79200*k1*k2**12*k3**2 - 24750*k2**13*k3**2 - 
     c        198000*k1**12*k3**3 + 225720*k1**11*k2*k3**3 + 
     c        2737560*k1**10*k2**2*k3**3 - 
     c        995588*k1**9*k2**3*k3**3 - 
     c        12012928*k1**8*k2**4*k3**3 + 
     c        189014*k1**7*k2**5*k3**3 + 
     c        18454704*k1**6*k2**6*k3**3 + 
     c        189014*k1**5*k2**7*k3**3 - 
     c        12012928*k1**4*k2**8*k3**3 - 
     c        995588*k1**3*k2**9*k3**3 + 
     c        2737560*k1**2*k2**10*k3**3 + 
     c        225720*k1*k2**11*k3**3 - 198000*k2**12*k3**3 - 
     c        222750*k1**11*k3**4 - 79200*k1**10*k2*k3**4 - 
     c        1150800*k1**9*k2**2*k3**4 + 
     c        726490*k1**8*k2**3*k3**4 + 
     c        3558700*k1**7*k2**4*k3**4 + 
     c        3244480*k1**6*k2**5*k3**4 + 
     c        3244480*k1**5*k2**6*k3**4 + 
     c        3558700*k1**4*k2**7*k3**4 + 
     c        726490*k1**3*k2**8*k3**4 - 
     c        1150800*k1**2*k2**9*k3**4 - 
     c        79200*k1*k2**10*k3**4 - 222750*k2**11*k3**4 + 
     c        495000*k1**10*k3**5 - 681120*k1**9*k2*k3**5 - 
     c        4920840*k1**8*k2**2*k3**5 + 
     c        2088971*k1**7*k2**3*k3**5 + 
     c        7136376*k1**6*k2**4*k3**5 - 
     c        220564*k1**5*k2**5*k3**5 + 
     c        7136376*k1**4*k2**6*k3**5 + 
     c        2088971*k1**3*k2**7*k3**5 - 
     c        4920840*k1**2*k2**8*k3**5 - 
     c        681120*k1*k2**9*k3**5 + 495000*k2**10*k3**5 + 
     c        811800*k1**9*k3**6 - 237600*k1**8*k2*k3**6 - 
     c        1992600*k1**7*k2**2*k3**6 + 
     c        695080*k1**6*k2**3*k3**6 + 
     c        950920*k1**5*k2**4*k3**6 + 
     c        950920*k1**4*k2**5*k3**6 + 
     c        695080*k1**3*k2**6*k3**6 - 
     c        1992600*k1**2*k2**7*k3**6 - 
     c        237600*k1*k2**8*k3**6 + 811800*k2**9*k3**6 - 
     c        297000*k1**8*k3**7 + 649440*k1**7*k2*k3**7 + 
     c        1496040*k1**6*k2**2*k3**7 - 
     c        680650*k1**5*k2**3*k3**7 - 
     c        157760*k1**4*k2**4*k3**7 - 
     c        680650*k1**3*k2**5*k3**7 + 
     c        1496040*k1**2*k2**6*k3**7 + 
     c        649440*k1*k2**7*k3**7 - 297000*k2**8*k3**7 - 
     c        851400*k1**7*k3**8 + 396000*k1**6*k2*k3**8 + 
     c        1365480*k1**5*k2**2*k3**8 - 
     c        444440*k1**4*k2**3*k3**8 - 
     c        444440*k1**3*k2**4*k3**8 + 
     c        1365480*k1**2*k2**5*k3**8 + 
     c        396000*k1*k2**6*k3**8 - 851400*k2**7*k3**8 - 
     c        99000*k1**6*k3**9 - 178200*k1**5*k2*k3**9 + 
     c        475800*k1**4*k2**2*k3**9 - 
     c        158580*k1**3*k2**3*k3**9 + 
     c        475800*k1**2*k2**4*k3**9 - 
     c        178200*k1*k2**5*k3**9 - 99000*k2**6*k3**9 + 
     c        282150*k1**5*k3**10 - 158400*k1**4*k2*k3**10 + 
     c        63870*k1**3*k2**2*k3**10 + 
     c        63870*k1**2*k2**3*k3**10 - 
     c        158400*k1*k2**4*k3**10 + 282150*k2**5*k3**10 + 
     c        99000*k1**4*k3**11 - 19800*k1**3*k2*k3**11 - 
     c        19800*k1*k2**3*k3**11 + 99000*k2**4*k3**11 + 
     c        4950*k1**3*k3**12 + 4950*k2**3*k3**12)*pi*q**13 
c
      kernel_poly(11) = 
     c    -  (56700*k1**11*k2**3 + 453600*k1**10*k2**4 + 
     c        771120*k1**9*k2**5 - 453600*k1**8*k2**6 - 
     c        1655640*k1**7*k2**7 - 453600*k1**6*k2**8 + 
     c        771120*k1**5*k2**9 + 453600*k1**4*k2**10 + 
     c        56700*k1**3*k2**11 - 4950*k1**13*k3 + 
     c        15840*k1**12*k2*k3 + 342810*k1**11*k2**2*k3 - 
     c        110202*k1**10*k2**3*k3 - 1180812*k1**9*k2**4*k3 + 
     c        160182*k1**8*k2**5*k3 + 751932*k1**7*k2**6*k3 + 
     c        751932*k1**6*k2**7*k3 + 160182*k1**5*k2**8*k3 - 
     c        1180812*k1**4*k2**9*k3 - 110202*k1**3*k2**10*k3 + 
     c        342810*k1**2*k2**11*k3 + 15840*k1*k2**12*k3 - 
     c        4950*k2**13*k3 - 99000*k1**12*k3**2 + 
     c        118800*k1**11*k2*k3**2 + 
     c        1570200*k1**10*k2**2*k3**2 - 
     c        1231170*k1**9*k2**3*k3**2 - 
     c        7791240*k1**8*k2**4*k3**2 + 
     c        398265*k1**7*k2**5*k3**2 + 
     c        11279280*k1**6*k2**6*k3**2 + 
     c        398265*k1**5*k2**7*k3**2 - 
     c        7791240*k1**4*k2**8*k3**2 - 
     c        1231170*k1**3*k2**9*k3**2 + 
     c        1570200*k1**2*k2**10*k3**2 + 
     c        118800*k1*k2**11*k3**2 - 99000*k2**12*k3**2 - 
     c        282150*k1**11*k3**3 + 110880*k1**10*k2*k3**3 + 
     c        1423920*k1**9*k2**2*k3**3 - 
     c        1194262*k1**8*k2**3*k3**3 - 
     c        2374372*k1**7*k2**4*k3**3 + 
     c        2353016*k1**6*k2**5*k3**3 + 
     c        2353016*k1**5*k2**6*k3**3 - 
     c        2374372*k1**4*k2**7*k3**3 - 
     c        1194262*k1**3*k2**8*k3**3 + 
     c        1423920*k1**2*k2**9*k3**3 + 
     c        110880*k1*k2**10*k3**3 - 282150*k2**11*k3**3 + 
     c        99000*k1**10*k3**4 - 316800*k1**9*k2*k3**4 - 
     c        1776600*k1**8*k2**2*k3**4 + 
     c        1541200*k1**7*k2**3*k3**4 + 
     c        4099680*k1**6*k2**4*k3**4 + 
     c        509720*k1**5*k2**5*k3**4 + 
     c        4099680*k1**4*k2**6*k3**4 + 
     c        1541200*k1**3*k2**7*k3**4 - 
     c        1776600*k1**2*k2**8*k3**4 - 
     c        316800*k1*k2**9*k3**4 + 99000*k2**10*k3**4 + 
     c        851400*k1**9*k3**5 - 427680*k1**8*k2*k3**5 - 
     c        2973240*k1**7*k2**2*k3**5 + 
     c        1586904*k1**6*k2**3*k3**5 + 
     c        1171224*k1**5*k2**4*k3**5 + 
     c        1171224*k1**4*k2**5*k3**5 + 
     c        1586904*k1**3*k2**6*k3**5 - 
     c        2973240*k1**2*k2**7*k3**5 - 
     c        427680*k1*k2**8*k3**5 + 851400*k2**9*k3**5 + 
     c        297000*k1**8*k3**6 + 237600*k1**7*k2*k3**6 - 
     c        444600*k1**6*k2**2*k3**6 - 
     c        91250*k1**5*k2**3*k3**6 - 
     c        763440*k1**4*k2**4*k3**6 - 
     c        91250*k1**3*k2**5*k3**6 - 
     c        444600*k1**2*k2**6*k3**6 + 
     c        237600*k1*k2**7*k3**6 + 297000*k2**8*k3**6 - 
     c        811800*k1**7*k3**7 + 459360*k1**6*k2*k3**7 + 
     c        1087560*k1**5*k2**2*k3**7 - 
     c        454520*k1**4*k2**3*k3**7 - 
     c        454520*k1**3*k2**4*k3**7 + 
     c        1087560*k1**2*k2**5*k3**7 + 
     c        459360*k1*k2**6*k3**7 - 811800*k2**7*k3**7 - 
     c        495000*k1**6*k3**8 + 651000*k1**4*k2**2*k3**8 - 
     c        239360*k1**3*k2**3*k3**8 + 
     c        651000*k1**2*k2**4*k3**8 - 495000*k2**6*k3**8 + 
     c        222750*k1**5*k3**9 - 158400*k1**4*k2*k3**9 + 
     c        118950*k1**3*k2**2*k3**9 + 
     c        118950*k1**2*k2**3*k3**9 - 
     c        158400*k1*k2**4*k3**9 + 222750*k2**5*k3**9 + 
     c        198000*k1**4*k3**10 - 39600*k1**3*k2*k3**10 - 
     c        39600*k1*k2**3*k3**10 + 198000*k2**4*k3**10 + 
     c        24750*k1**3*k3**11 + 24750*k2**3*k3**11)*pi*q**14 
c
      kernel_poly(12) = - (113400*k1**10*k2**3 + 567000*k1**9*k2**4 + 
     c     340200*k1**8*k2**5 - 1020600*k1**7*k2**6 - 
     c        1020600*k1**6*k2**7 + 340200*k1**5*k2**8 + 
     c        567000*k1**4*k2**9 + 113400*k1**3*k2**10 - 
     c        19800*k1**12*k3 + 23760*k1**11*k2*k3 + 
     c        314040*k1**10*k2**2*k3 - 93018*k1**9*k2**3*k3 - 
     c        1114728*k1**8*k2**4*k3 + 59493*k1**7*k2**5*k3 + 
     c        1610736*k1**6*k2**6*k3 + 59493*k1**5*k2**7*k3 - 
     c        1114728*k1**4*k2**8*k3 - 93018*k1**3*k2**9*k3 + 
     c        314040*k1**2*k2**10*k3 + 23760*k1*k2**11*k3 - 
     c        19800*k2**12*k3 - 148500*k1**11*k3**2 + 
     c        79200*k1**10*k2*k3**2 + 
     c        1033800*k1**9*k2**2*k3**2 - 
     c        1128810*k1**8*k2**3*k3**2 - 
     c        2262510*k1**7*k2**4*k3**2 + 
     c        1481820*k1**6*k2**5*k3**2 + 
     c        1481820*k1**5*k2**6*k3**2 - 
     c        2262510*k1**4*k2**7*k3**2 - 
     c        1128810*k1**3*k2**8*k3**2 + 
     c        1033800*k1**2*k2**9*k3**2 + 
     c        79200*k1*k2**10*k3**2 - 148500*k2**11*k3**2 - 
     c        138600*k1**10*k3**3 - 31680*k1**9*k2*k3**3 + 
     c        465480*k1**8*k2**2*k3**3 + 
     c        5612*k1**7*k2**3*k3**3 - 
     c        156288*k1**6*k2**4*k3**3 + 
     c        184864*k1**5*k2**5*k3**3 - 
     c        156288*k1**4*k2**6*k3**3 + 
     c        5612*k1**3*k2**7*k3**3 + 
     c        465480*k1**2*k2**8*k3**3 - 31680*k1*k2**9*k3**3 - 
     c        138600*k2**10*k3**3 + 396000*k1**9*k3**4 - 
     c        237600*k1**8*k2*k3**4 - 
     c        1429650*k1**7*k2**2*k3**4 + 
     c        1096170*k1**6*k2**3*k3**4 + 
     c        630720*k1**5*k2**4*k3**4 + 
     c        630720*k1**4*k2**5*k3**4 + 
     c        1096170*k1**3*k2**6*k3**4 - 
     c        1429650*k1**2*k2**7*k3**4 - 
     c        237600*k1*k2**8*k3**4 + 396000*k2**9*k3**4 + 
     c        534600*k1**8*k3**5 - 47520*k1**7*k2*k3**5 - 
     c        1350360*k1**6*k2**2*k3**5 + 
     c        337446*k1**5*k2**3*k3**5 - 
     c        969264*k1**4*k2**4*k3**5 + 
     c        337446*k1**3*k2**5*k3**5 - 
     c        1350360*k1**2*k2**6*k3**5 - 
     c        47520*k1*k2**7*k3**5 + 534600*k2**8*k3**5 - 
     c        297000*k1**7*k3**6 + 237600*k1**6*k2*k3**6 + 
     c        233100*k1**5*k2**2*k3**6 - 
     c        301110*k1**4*k2**3*k3**6 - 
     c        301110*k1**3*k2**4*k3**6 + 
     c        233100*k1**2*k2**5*k3**6 + 
     c        237600*k1*k2**6*k3**6 - 297000*k2**7*k3**6 - 
     c        574200*k1**6*k3**7 + 95040*k1**5*k2*k3**7 + 
     c        570840*k1**4*k2**2*k3**7 - 
     c        217400*k1**3*k2**3*k3**7 + 
     c        570840*k1**2*k2**4*k3**7 + 95040*k1*k2**5*k3**7 - 
     c        574200*k2**6*k3**7 - 79200*k1**4*k2*k3**8 + 
     c        162750*k1**3*k2**2*k3**8 + 
     c        162750*k1**2*k2**3*k3**8 - 79200*k1*k2**4*k3**8 + 
     c        198000*k1**4*k3**9 - 39600*k1**3*k2*k3**9 - 
     c        39600*k1*k2**3*k3**9 + 198000*k2**4*k3**9 + 
     c        49500*k1**3*k3**10 + 49500*k2**3*k3**10)*pi*q**15 - 
     c     (141750*k1**9*k2**3 + 362880*k1**8*k2**4 - 
     c        141750*k1**7*k2**5 - 725760*k1**6*k2**6 - 
     c        141750*k1**5*k2**7 + 362880*k1**4*k2**8 + 
     c        141750*k1**3*k2**9 - 29700*k1**11*k3 + 
     c        15840*k1**10*k2*k3 + 206760*k1**9*k2**2*k3 - 
     c        114882*k1**8*k2**3*k3 - 281142*k1**7*k2**4*k3 + 
     c        195564*k1**6*k2**5*k3 + 195564*k1**5*k2**6*k3 - 
     c        281142*k1**4*k2**7*k3 - 114882*k1**3*k2**8*k3 + 
     c        206760*k1**2*k2**9*k3 + 15840*k1*k2**10*k3 - 
     c        29700*k2**11*k3 - 99000*k1**10*k3**2 + 
     c        19800*k1**9*k2*k3**2 + 513000*k1**8*k2**2*k3**2 - 
     c        272565*k1**7*k2**3*k3**2 - 
     c        655920*k1**6*k2**4*k3**2 + 
     c        118080*k1**5*k2**5*k3**2 - 
     c        655920*k1**4*k2**6*k3**2 - 
     c        272565*k1**3*k2**7*k3**2 + 
     c        513000*k1**2*k2**8*k3**2 + 19800*k1*k2**9*k3**2 - 
     c        99000*k2**10*k3**2 + 39600*k1**9*k3**3 - 
     c        47520*k1**8*k2*k3**3 - 80730*k1**7*k2**2*k3**3 + 
     c        88218*k1**6*k2**3*k3**3 - 
     c        35112*k1**5*k2**4*k3**3 - 
     c        35112*k1**4*k2**5*k3**3 + 
     c        88218*k1**3*k2**6*k3**3 - 
     c        80730*k1**2*k2**7*k3**3 - 47520*k1*k2**8*k3**3 + 
     c        39600*k2**9*k3**3 + 297000*k1**8*k3**4 - 
     c        59400*k1**7*k2*k3**4 - 788400*k1**6*k2**2*k3**4 + 
     c        251430*k1**5*k2**3*k3**4 - 
     c        606960*k1**4*k2**4*k3**4 + 
     c        251430*k1**3*k2**5*k3**4 - 
     c        788400*k1**2*k2**6*k3**4 - 59400*k1*k2**7*k3**4 + 
     c        297000*k2**8*k3**4 + 59400*k1**7*k3**5 + 
     c        47520*k1**6*k2*k3**5 - 268740*k1**5*k2**2*k3**5 - 
     c        167166*k1**4*k2**3*k3**5 - 
     c        167166*k1**3*k2**4*k3**5 - 
     c        268740*k1**2*k2**5*k3**5 + 47520*k1*k2**6*k3**5 + 
     c        59400*k2**7*k3**5 - 297000*k1**6*k3**6 + 
     c        59400*k1**5*k2*k3**6 + 275400*k1**4*k2**2*k3**6 - 
     c        102840*k1**3*k2**3*k3**6 + 
     c        275400*k1**2*k2**4*k3**6 + 59400*k1*k2**5*k3**6 - 
     c        297000*k2**6*k3**6 - 118800*k1**5*k3**7 - 
     c        15840*k1**4*k2*k3**7 + 142710*k1**3*k2**2*k3**7 + 
     c        142710*k1**2*k2**3*k3**7 - 15840*k1*k2**4*k3**7 - 
     c        118800*k2**5*k3**7 + 99000*k1**4*k3**8 - 
     c        19800*k1**3*k2*k3**8 - 19800*k1*k2**3*k3**8 + 
     c        99000*k2**4*k3**8 + 49500*k1**3*k3**9 + 
     c        49500*k2**3*k3**9)*pi*q**16 
c
      kernel_poly(13) = -  (90720*k1**8*k2**3 + 90720*k1**7*k2**4 - 
     c        181440*k1**6*k2**5 - 181440*k1**5*k2**6 + 
     c        90720*k1**4*k2**7 + 90720*k1**3*k2**8 - 
     c        19800*k1**10*k3 + 3960*k1**9*k2*k3 + 
     c        102600*k1**8*k2**2*k3 - 11673*k1**7*k2**3*k3 - 
     c        82800*k1**6*k2**4*k3 + 13536*k1**5*k2**5*k3 - 
     c        82800*k1**4*k2**6*k3 - 11673*k1**3*k2**7*k3 + 
     c        102600*k1**2*k2**8*k3 + 3960*k1*k2**9*k3 - 
     c        19800*k2**10*k3 - 24750*k1**9*k3**2 + 
     c        128250*k1**7*k2**2*k3**2 - 
     c        93330*k1**6*k2**3*k3**2 - 
     c        131130*k1**5*k2**4*k3**2 - 
     c        131130*k1**4*k2**5*k3**2 - 
     c        93330*k1**3*k2**6*k3**2 + 
     c        128250*k1**2*k2**7*k3**2 - 24750*k2**9*k3**2 + 
     c        59400*k1**8*k3**3 - 11880*k1**7*k2*k3**3 - 
     c        157680*k1**6*k2**2*k3**3 + 
     c        38232*k1**5*k2**3*k3**3 - 
     c        97200*k1**4*k2**4*k3**3 + 
     c        38232*k1**3*k2**5*k3**3 - 
     c        157680*k1**2*k2**6*k3**3 - 11880*k1*k2**7*k3**3 + 
     c        59400*k2**8*k3**3 + 74250*k1**7*k3**4 - 
     c        197100*k1**5*k2**2*k3**4 - 
     c        90990*k1**4*k2**3*k3**4 - 
     c        90990*k1**3*k2**4*k3**4 - 
     c        197100*k1**2*k2**5*k3**4 + 74250*k2**7*k3**4 - 
     c        59400*k1**6*k3**5 + 11880*k1**5*k2*k3**5 + 
     c        55080*k1**4*k2**2*k3**5 - 
     c        23004*k1**3*k2**3*k3**5 + 
     c        55080*k1**2*k2**4*k3**5 + 11880*k1*k2**5*k3**5 - 
     c        59400*k2**6*k3**5 - 74250*k1**5*k3**6 + 
     c        68850*k1**3*k2**2*k3**6 + 
     c        68850*k1**2*k2**3*k3**6 - 74250*k2**5*k3**6 + 
     c        19800*k1**4*k3**7 - 3960*k1**3*k2*k3**7 - 
     c        3960*k1*k2**3*k3**7 + 19800*k2**4*k3**7 + 
     c        24750*k1**3*k3**8 + 24750*k2**3*k3**8)*pi*q**17 - 
     c     (22680*k1**7*k2**3 - 45360*k1**5*k2**5 + 
     c        22680*k1**3*k2**7 - 4950*k1**9*k3 + 
     c        25650*k1**7*k2**2*k3 - 6570*k1**6*k2**3*k3 - 
     c        14130*k1**5*k2**4*k3 - 14130*k1**4*k2**5*k3 - 
     c        6570*k1**3*k2**6*k3 + 25650*k1**2*k2**7*k3 - 
     c        4950*k2**9*k3 - 15120*k1**5*k2**3*k3**2 - 
     c        15120*k1**3*k2**5*k3**2 + 14850*k1**7*k3**3 - 
     c        39420*k1**5*k2**2*k3**3 - 
     c        12150*k1**4*k2**3*k3**3 - 
     c        12150*k1**3*k2**4*k3**3 - 
     c        39420*k1**2*k2**5*k3**3 + 14850*k2**7*k3**3 - 
     c        7560*k1**3*k2**3*k3**4 - 14850*k1**5*k3**5 + 
     c        13770*k1**3*k2**2*k3**5 + 
     c        13770*k1**2*k2**3*k3**5 - 14850*k2**5*k3**5 + 
     c        4950*k1**3*k3**7 + 4950*k2**3*k3**7)*pi*q**18 
c
      kernel_beta(1) = (pi*((-840*k1**10*k2**7*
     c     (k2**2 - q**2)**2*
     c          (-2*k3**4 - 7*k3**2*q**2 + 9*q**4))/
     c        dsqrt(k3**2*(k2**2 - q**2) + 
     c          q**2*(k1**2 - k2**2 + q**2)) - 
     c       (840*k1**7*k2**10*(k1**2 - q**2)**2*
     c          (-2*k3**4 - 7*k3**2*q**2 + 9*q**4))/
     c        dsqrt(k3**2*(k1**2 - q**2) + 
     c          q**2*(-k1**2 + k2**2 + q**2)) + 
     c       (4320*k1**7*k2**7*k3**3*(k1**2 - q**2)**2*
     c          (k2**2 - q**2)**2)/
     c        dsqrt(k1**2*(k2**2 - q**2) + 
     c          q**2*(-k2**2 + k3**2 + q**2)) - 
     c       (4320*k1**7*k2**7*k3**3*(k1**2 - q**2)**2*
     c          (k2**2 - q**2)**2*
     c          (1 - dsqrt(k1**2*k2**2 + 
     c                (-k1**2 - k2**2 + k3**2)*q**2 + q**4)/
     c              (k3*q))**2)/
     c        (dsqrt(k1**2*(k2**2 - q**2) + 
     c            q**2*(-k2**2 + k3**2 + q**2))*
     c          (1 + dsqrt(k1**2*k2**2 + 
     c                (-k1**2 - k2**2 + k3**2)*q**2 + q**4)/
     c              (k3*q))**2) + 
     c       (840*k1**7*k2**10*(k1**2 - q**2)**2*
     c          (-2*k3**4 - 7*k3**2*q**2 + 9*q**4)*
     c          (1 - dsqrt(k1**2*k3**2 - 
     c                (k1**2 - k2**2 + k3**2)*q**2 + q**4)/
     c              (k2*q))**2)/
     c        (dsqrt(k3**2*(k1**2 - q**2) + 
     c            q**2*(-k1**2 + k2**2 + q**2))*
     c          (1 + dsqrt(k1**2*k3**2 - 
     c                (k1**2 - k2**2 + k3**2)*q**2 + q**4)/
     c              (k2*q))**2) + 
     c       (840*k1**10*k2**7*(k2**2 - q**2)**2*
     c          (-2*k3**4 - 7*k3**2*q**2 + 9*q**4)*
     c          (1 - dsqrt(k2**2*k3**2 - 
     c                (-k1**2 + k2**2 + k3**2)*q**2 + q**4)/
     c              (k1*q))**2)/
     c        (dsqrt(k3**2*(k2**2 - q**2) + 
     c            q**2*(k1**2 - k2**2 + q**2))*
     c          (1 + dsqrt(k2**2*k3**2 - 
     c                (-k1**2 + k2**2 + k3**2)*q**2 + q**4)/
     c              (k1*q))**2)))/(2.483712d7*k1**9*k2**9*q**5) 
c
      kernel_beta(2) = - 
     c  (pi*(k1**2 - q**2)*(39*k1**12 + 
     c       165*(k2**2 - k3**2)**3*q**6 - 
     c       k1**10*(582*k2**2 + 791*k3**2 + 1947*q**2) - 
     c       3*k1**2*(-k2**2 + k3**2)*q**4*
     c        (85*k3**4 - 3*k2**2*(186*k2**2 + 95*q**2) + 
     c          k3**2*(473*k2**2 + 153*q**2)) + 
     c       k1**8*(51*k2**4 + 601*k3**4 + 6891*k2**2*q**2 + 
     c          1689*q**4 + k3**2*(2120*k2**2 + 1787*q**2)) + 
     c       k1**6*(492*k2**6 + 151*k3**6 - 6465*k2**4*q**2 - 
     c          7284*k2**2*q**4 + 219*q**6 + 
     c          k3**4*(390*k2**2 + 179*q**2) + 
     c          k3**2*(-633*k2**4 + 758*k2**2*q**2 - 1113*q**4)) 
     c     + k1**4*q**2*(1017*k2**6 + 269*k3**6 + 7269*k2**4*q**2 + 
     c          471*k2**2*q**4 + k3**4*(391*k2**2 - 321*q**2) + 
     c          k3**2*(-1677*k2**4 - 4376*k2**2*q**2 + 405*q**4))
     c     )*(k1+q)**2*small_beta(k1, q))/
     c     (1.655808d6*k1**9*k2**2*q**5) 
c
      kernel_beta(3) = - 
     c     (pi*(k2**2 - q**2)*
     c     (k3**6*(151*k2**6 + 269*k2**4*q**2 - 
     c          255*k2**2*q**4 - 165*q**6) + 
     c       k3**4*(601*k2**8 + 179*k2**6*q**2 - 
     c          321*k2**4*q**4 - 459*k2**2*q**6 + 
     c          k1**2*(390*k2**6 + 391*k2**4*q**2 - 
     c             1164*k2**2*q**4 + 495*q**6)) + 
     c       k3**2*(-791*k2**10 + 1787*k2**8*q**2 - 
     c          1113*k2**6*q**4 + 405*k2**4*q**6 - 
     c          3*k1**4*(211*k2**6 + 559*k2**4*q**2 - 
     c             1031*k2**2*q**4 + 165*q**6) + 
     c          2*k1**2*(1060*k2**8 + 379*k2**6*q**2 - 
     c             2188*k2**4*q**4 + 657*k2**2*q**6)) + 
     c       3*(k1**6*(164*k2**6 + 339*k2**4*q**2 - 
     c             558*k2**2*q**4 + 55*q**6) + 
     c          k2**6*(13*k2**6 - 649*k2**4*q**2 + 
     c             563*k2**2*q**4 + 73*q**6) + 
     c          k1**4*(17*k2**8 - 2155*k2**6*q**2 + 
     c             2423*k2**4*q**4 - 285*k2**2*q**6) + 
     c          k1**2*(-194*k2**10 + 2297*k2**8*q**2 - 
     c             2428*k2**6*q**4 + 157*k2**4*q**6)))*
     c     (k2+q)**2*small_beta(k2, q))/
     c   (1.655808d6*k1**2*k2**9*q**5) 
c
      kernel_beta(4) = 
     c     (pi*(2*k3**2 + 9*q**2)*
     c     (-15*(k1**2 + k2**2)*k3**8 - 2*k3**10 - 
     c       3*(k1**2 - k2**2)**2*q**4*
     c        (k1**2 + k2**2 + 4*q**2) + 
     c       2*k3**6*(8*k1**4 + 8*k2**4 + 23*k2**2*q**2 - 
     c          q**4 + k1**2*(-16*k2**2 + 23*q**2)) + 
     c       k3**4*(k1**6 + k2**6 - 56*k2**4*q**2 - 
     c          47*k2**2*q**4 + 4*q**6 - 
     c          k1**4*(9*k2**2 + 56*q**2) + 
     c          k1**2*(-9*k2**4 + 136*k2**2*q**2 - 47*q**4)) + 
     c       2*k3**2*q**2*(k1**6 + k2**6 + 26*k2**4*q**2 + 
     c          4*k2**2*q**4 - k1**4*(k2**2 - 26*q**2) - 
     c          k1**2*(k2**4 + 48*k2**2*q**2 - 4*q**4)))*
     c     (k3+q)**2*small_beta(k3, q))/
     c   (236544.d0*k1**2*k2**2*k3**5*q**5) 
c
      kernel_beta(5) = (3*k3**3*pi*(k1**2 - q**2)*(k2**2 - q**2)* 
     c     big_beta(k1, k2, k3, q)) / (17248.*k1**2*k2**2*q**5) - 
     c     (-k2*pi*(2*k3**2 + 9*q**2)*(k1**2 - q**2)*
     c     big_beta(k1, k3, k2, q)) /(29568.*k1**2*q**5) - 
     c     (-k1*pi*(2*k3**2 + 9*q**2)*(k2**2 - q**2)*
     c     big_beta(k2, k3, k1, q)) /(29568.*k2**2*q**5)
c
c
      kernel_poly_sum = 0.d0
      do i = 1, 13
         kernel_poly_sum = kernel_poly_sum + kernel_poly (i) /
     c        (776160.d0*k1**5*k2**5*k3*q**4*(k1 + q)**4*(k2 + q)**4*
     c        (k3 + q)**5) 
cc         write(6,'(A,i3,A,1p1e18.10)') 
cc     &        'kernel_poly(',i,')=',kernel_poly(i)
      enddo
c
      kernel_beta_sum = 0.d0
      do i=1, 5
         kernel_beta_sum = kernel_beta_sum + kernel_beta(i)
cc         write(6,'(A,i3,A,1p1e18.10)') 
cc     &        'kernel_beta(',i,')=', kernel_beta(i)
      enddo
c
      kernel_Gamma2d_reg3rd = kernel_poly_sum + kernel_beta_sum
c
c     /////// Multiplied by factor 4 ///////
      kernel_Gamma2d_reg3rd = 4.d0 * kernel_Gamma2d_reg3rd 
c
      end
c
