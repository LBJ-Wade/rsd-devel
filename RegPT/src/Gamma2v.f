c ******************************************************* c
c
      subroutine one_loop_Gamma2v(k1, k2, k3, ss)
c
c ******************************************************* c
c
c     computing one-loop propagator, Gamma2 
c     
      implicit none
c
      integer  ikmax, ik_max
      integer  iq, iqmax, iq_max
      parameter(ikmax=2000)
ccc      parameter(iqmax=300)
      parameter(iqmax=100)
      real*8   ak(ikmax), pk(ikmax)
      real*8   q, qq(iqmax), wq(iqmax)
      real*8   k1, k2, k3
c     /-/-/-/ check  /-/-/-/  
cc      real*8   kernel1, kernel2, kernel3, kernel4, kernel5, kernel6
c     /-/-/-/ check  /-/-/-/
      real*8   kernel_Gamma2v
      real*8   pi, qmin, qmax
      real*8   ss, pklinq
      common /pk_data/ ak, pk, ik_max
c     /-/-/-/ check  /-/-/-/
cc      common /Gam2_kernel/ kernel1, kernel2, kernel3, kernel4, kernel5,
cc     &     kernel6
c     /-/-/-/ check  /-/-/-/
      pi = 4.d0 * datan(1.d0)
c     -------------------------------------------------
c
      iq_max = iqmax
      qmin = ak(1)
      qmax = ak(ik_max)
      ss = 0.d0
c
c     /-/-/-/ check  /-/-/-/
cc      open(9,file='kernel_Gamma2.dat',status='unknown')
c     /-/-/-/ check  /-/-/-/
c
      call gauleg(dlog(qmin), dlog(qmax), qq, wq, iq_max)
c
      do 20 iq=1, iq_max
c
         q = dexp(qq(iq))
         call find_pk(q, pklinq)
c
c     /-/-/-/ check  /-/-/-/
cc         write(6,'(1p7e18.10)') q,
cc     &        kernel1, kernel2, kernel3, kernel4, kernel5, kernel6
c     /-/-/-/ check  /-/-/-/
c
         ss = ss + wq(iq) * 
     &        kernel_Gamma2v(k1, k2, k3, q) * q**3 * pklinq
c     
 20   continue
c
      ss = ss / (2.d0*pi)**3
c
c     /-/-/-/ check  /-/-/-/
cc      close(9)
c     /-/-/-/ check  /-/-/-/
c
      end
c
c ******************************************************* c
c
      function kernel_Gamma2v(k1, k2, k3, q)
c
c ******************************************************* c
c
      implicit none
      integer ireg
      real*8  kernel_Gamma2v, k1, k2, k3, q
      real*8  kernel_Gamma2v_reg3rd
      real*8  kernel_Gamma2v_highk, kernel_Gamma2v_lowk
      real*8  kernel_Gamma2v_exact, kernel_Gamma2v_iso
      real*8  kernel_Gamma2v_elongate, kernel_Gamma2v_coll
c     -------------------------------------------------
c
c     Tag for whther we use regularized 3rd-order expression or not
      if ( (dabs(k1/q-1.d0).lt.1.d-3).or.(dabs(k2/q-1.d0).lt.1.d-3).or.
     &     (dabs(k3/q-1.d0).lt.1.d-3) ) then
         ireg = 1
      else
         ireg = 0
      endif
c
ccc      if( q.eq.k1 .or. q.eq.k2 .or. q.eq.k3) then
ccc         write(6,*) 'q exactly coinsides with one of k1, k2 & k3 !!!'
ccc         pause
ccc      endif
c
c
      if(ireg.eq.1) then
         kernel_Gamma2v = kernel_Gamma2v_reg3rd(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_reg3rd: q=',
cc     &           q, kernel_Gamma2v
      elseif(dabs(k2/k1-1.d0).lt.2.d-2) then
         if (q.gt.10.d0*max(k1, k2, k3)) then
            kernel_Gamma2v = kernel_Gamma2v_lowk(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_lowk: q=',
cc     &           q, kernel_Gamma2v
         elseif(q.lt.0.1d0*min(k1, k2, k3)) then
            kernel_Gamma2v = kernel_Gamma2v_highk(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_highk: q=',
cc     &           q, kernel_Gamma2
         else
            kernel_Gamma2v = kernel_Gamma2v_reg3rd(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_reg3rd: q=',
cc     &           q, kernel_Gamma2v
cc         else
cc            kernel_Gamma2v = kernel_Gamma2v_iso(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_iso: q=',
cc     &           q, kernel_Gamma2v
         endif
      else
         if(q.lt.0.1d0*min(k1, k2, k3)) then
            kernel_Gamma2v = kernel_Gamma2v_highk(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_highk: q=',
cc     &           q, kernel_Gamma2v
         elseif(q.gt.10.d0*max(k1, k2, k3)) then
            kernel_Gamma2v = kernel_Gamma2v_lowk(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_lowk: q=',
cc     &           q, kernel_Gamma2v
         elseif(q.gt.50.d0*min(k1, k2) .and. (k1**2-k3**2).lt.q**2
     &           .and. (k1**2-k3**2).gt.-q**2) then
            kernel_Gamma2v = kernel_Gamma2v_elongate(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_elongate: q=',
cc     &           q, kernel_Gamma2v
         elseif(q.gt.100.d0*k3 .and. k3.lt.10.d0*min(k1,k2)) then
cc         elseif(q.gt.20.d0*k3 .and. k3.lt.5.d0*min(k1,k2)) then
            kernel_Gamma2v = kernel_Gamma2v_coll(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_coll: q=',
cc     &           q, kernel_Gamma2v
         else
            kernel_Gamma2v = kernel_Gamma2v_exact(k1, k2, k3, q)
cc            write(6,'(A,1p2e18.10)') 'in kernel_G2_exact: q=',
cc     &           q, kernel_Gamma2v
         endif
      endif
c
      end
c
c ******************************************************* c
c
      function kernel_Gamma2v_exact(k1, k2, k3, q)
c
c ******************************************************* c
c
c     Exact expression for kernel Gamma2
c
      implicit none
      real*8  kernel_Gamma2v_exact, k1, k2, k3, q
      real*8  kernel1, kernel2, kernel3, kernel4, kernel5, kernel6
      real*8  WFunc, LFunc
      real*8  pi
cc      common /Gam2_kernel/ kernel1, kernel2, kernel3, kernel4, kernel5,
cc     &     kernel6 
      pi = 4.d0 * datan(1.d0)
c     -------------------------------------------------
c
      kernel1 = (pi*(15*k1**6*k2**6*k3**4*
     -     ((k1**2 - k2**2)**2*(13*k1**4 - 4*k1**2*k2**2 + 13*k2**4) - 
     -     (k1**2 + k2**2)*(1977*k1**4 - 4010*k1**2*k2**2 + 1977*k2**4)*
     -     k3**2 + (683*k1**4 + 1252*k1**2*k2**2 + 683*k2**4)*k3**4 + 
     -     1169*(k1**2 + k2**2)*k3**6 + 112*k3**8) - 
     -     10*k1**6*k2**6*k3**4*(9*(k1**2 + k2**2)*
     -      (67*k1**4 - 106*k1**2*k2**2 + 67*k2**4) + 
     -     (-24507*k1**4 + 50506*k1**2*k2**2 - 24507*k2**4)*k3**2 + 
     -     8119*(k1**2 + k2**2)*k3**4 + 13385*k3**6)*q**2 - 
     -     k1**4*k2**4*k3**2*(1260*k1**2*k2**2*(k1**2 - k2**2)**2*
     -     (k1**2 + k2**2) + (-19475*k1**8 + 93542*k1**6*k2**2 - 
     -     160734*k1**4*k2**4 + 93542*k1**2*k2**6 - 19475*k2**8)*k3**2 + 
     -     4*(k1**2 + k2**2)*(345*k1**4 + 628*k1**2*k2**2 + 345*k2**4)*
     -     k3**4 + (50385*k1**4 + 92816*k1**2*k2**2 + 
     -     50385*k2**4)*k3**6 - 32290*(k1**2 + k2**2)*k3**8)*q**4 - 
     -     5*k1**2*k2**2*(189*k1**4*k2**4*(k1**2 - k2**2)**2*
     -     (k1**2 + k2**2) - 252*k1**4*k2**4*
     -     (7*k1**4 - 12*k1**2*k2**2 + 7*k2**4)*k3**2 + 
     -     (k1**2 + k2**2)*(1949*k1**8 - 10643*k1**6*k2**2 + 
     -     19341*k1**4*k2**4 - 10643*k1**2*k2**6 + 1949*k2**8)*k3**4 + 
     -     6*(-235*k1**8 + 757*k1**6*k2**2 + 
     -     137*k1**4*k2**4 + 757*k1**2*k2**6 - 235*k2**8)*k3**6 - 
     -     3*(k1**2 + k2**2)*
     -     (1009*k1**4 - 421*k1**2*k2**2 + 1009*k2**4)*      
     -     k3**8 + 2488*(k1**4 + k2**4)*k3**10)*q**6 + 
     -     15*(-252*k1**6*k2**6*(k1**2 - k2**2)**2 + 
     -     168*k1**6*k2**6*(k1**2 + k2**2)*k3**2 + 
     -     (55*k1**12 - 285*k1**10*k2**2 + 
     -     157*k1**8*k2**4 + 230*k1**6*k2**6 + 
     -     157*k1**4*k2**8 - 285*k1**2*k2**10 + 55*k2**12)*k3**4 - 
     -     3*(k1**2 + k2**2)*(55*k1**8 - 201*k1**6*k2**2 + 
     -     156*k1**4*k2**4 - 201*k1**2*k2**6 + 55*k2**8
     -     )*k3**6 + 3*(55*k1**8 - 51*k1**6*k2**2 - 
     -     51*k1**2*k2**6 + 55*k2**8)*k3**8 - 
     -     55*(k1**6 + k2**6)*k3**10)*q**8)) / 
     -     (1.55232d6*k1**8*k2**8*k3**4*q**4) 
c
      kernel2 = - (pi*(k1 - q)**2*(k1 + q)**2*
     -     (13*k1**12 + 55*(k2**2 - k3**2)**3*q**6 - 
     -     k1**10*(194*k2**2 + 1921*k3**2 + 649*q**2) + 
     -     k1**6*(164*k2**6 + 801*k2**4*k3**2 + 
     -     306*k2**2*k3**4 + 329*k3**6 - 
     -     (2155*k2**4 + 3414*k2**2*k3**2 + 1759*k3**4)*
     -     q**2 + (-2428*k2**2 + 25*k3**2)*q**4 + 73*q**6) 
     -     - 3*k1**2*(k2 - k3)*(k2 + k3)*q**4*
     -     (186*k2**4 - 307*k3**4 - 51*k3**2*q**2 + 
     -     k2**2*(121*k3**2 + 95*q**2)) + 
     -     k1**8*(17*k2**4 + 1579*k3**4 + 2913*k3**2*q**2 + 
     -     563*q**4 + k2**2*(1176*k3**2 + 2297*q**2)) + 
     -     k1**4*q**2*(339*k2**6 + 647*k3**6 + 
     -     333*k3**4*q**2 + 135*k3**2*q**4 + 
     -     k2**4*(321*k3**2 + 2423*q**2) + 
     -     k2**2*(-1307*k3**4 - 784*k3**2*q**2 + 157*q**4)))*
     -     LFunc(k1,q))/(413952.d0*k1**9*k2**2*q**5) 
c
      kernel3 = - (pi*(k2 - q)**2*(k2 + q)**2*
     -     (k2**6*(164*k1**6 + k1**4*(17*k2**2 + 801*k3**2) + 
     -     (k2 - k3)*(k2 + k3)*
     -     (13*k2**4 - 1908*k2**2*k3**2 - 329*k3**4) + 
     -     2*k1**2*(-97*k2**4 + 588*k2**2*k3**2 + 153*k3**4)) + 
     -     k2**4*(339*k1**6 - 649*k2**6 + 2913*k2**4*k3**2 - 
     -     1759*k2**2*k3**4 + 647*k3**6 + 
     -     k1**4*(-2155*k2**2 + 321*k3**2) + 
     -     k1**2*(2297*k2**4 - 3414*k2**2*k3**2 - 
     -     1307*k3**4))*q**2 + k2**2*(-558*k1**6 + 
     -     k1**4*(2423*k2**2 + 195*k3**2) - 
     -     4*k1**2*(607*k2**4 + 196*k2**2*k3**2 - 321*k3**4) + 
     -     (k2 - k3)*(k2 + k3)*
     -     (563*k2**4 + 588*k2**2*k3**2 + 921*k3**4))*q**4 
     -     + (55*k1**6 - 15*k1**4*(19*k2**2 + 11*k3**2) + 
     -     (k2 - k3)*(k2 + k3)*(73*k2**4 + 208*k2**2*k3**2 + 55*k3**4) + 
     -     k1**2*(157*k2**4 + 438*k2**2*k3**2 + 165*k3**4))*
     -     q**6)*LFunc(k2,q)) / (413952.d0*k1**2*k2**9*q**5) 
c
      kernel4 = (pi*(k3 - q)*(k3 + q)*(8*k3**2 + 3*q**2)*
     -     (k3**4*(k1**6 - 9*k1**4*k2**2 - 9*k1**2*k2**4 + 
     -     k2**6 + 16*(k1**2 - k2**2)**2*k3**2 - 
     -     15*(k1**2 + k2**2)*k3**4 - 2*k3**6) + 
     -     2*k3**2*((k1**2 - k2**2)**2*(k1**2 + k2**2) - 
     -     4*(7*k1**4 - 17*k1**2*k2**2 + 7*k2**4)*k3**2 + 
     -     23*(k1**2 + k2**2)*k3**4)*q**2 - 
     -     (3*(k1**2 - k2**2)**2*(k1**2 + k2**2) - 
     -     4*(13*k1**4 - 24*k1**2*k2**2 + 13*k2**4)*
     -     k3**2 + 47*(k1**2 + k2**2)*k3**4 + 2*k3**6)*
     -     q**4 + 4*(-3*(k1**2 - k2**2)**2 + 
     -     2*(k1**2 + k2**2)*k3**2 + k3**4)*q**6)*LFunc(k3,q)) / 
     -     (59136.d0*k1**2*k2**2*k3**5*q**5) 
c
      kernel5 = (3*k3**3*pi*(k1**2 - q**2)**2*(-k2**2 + q**2)**2*
     -     WFunc(k1,k2,k3,q))/(1078.*k1**2*k2**2*q**5*
     -     dsqrt(k1**2*k2**2 - (k1**2 + k2**2 - k3**2)*q**2 + q**4)) 
     -     + (k2*pi*(k1 - q)**2*(k3 - q)*(k1 + q)**2*(k3 + q)*
     -     (8*k3**2 + 3*q**2)*WFunc(k1,k3,k2,q))/
     -     (7392.d0*k1**2*q**5*dsqrt(k1**2*k3**2 - 
     -     (k1**2 - k2**2 + k3**2)*q**2 + q**4)) 
c
      kernel6 = (k1*pi*(k2 - q)**2*(k3 - q)*(k2 + q)**2*(k3 + q)*
     -     (8*k3**2 + 3*q**2)*WFunc(k2,k3,k1,q))/
     -     (7392.d0*k2**2*q**5*dsqrt(k1**2*q**2 + 
     -     (k2 - q)*(k3 - q)*(k2 + q)*(k3 + q)))
c
cc      write(6,'(1p7e18.10)') q,
cc     &     kernel1, kernel2, kernel3, kernel4, kernel5, kernel6
c
      kernel_Gamma2v_exact = kernel1 + kernel2 + kernel3 + kernel4 +
     &     kernel5 + kernel6
c
      end
c
c ******************************************************* c
c
      function kernel_Gamma2v_iso(k1, k2, k3, q)
c
c ******************************************************* c
c
c     Asymptotic limit for kernel Gamma2: 
c           the expression is valid in the close limit
c           for k1 and k2
c
      implicit none
      real*8  kernel_Gamma2v_iso, k1, k2, k3, q
      real*8  pi, eps
      pi = 4.d0 * datan(1.d0)
c     -------------------------------------------------
c
      eps = k2/k1 - 1.d0
c
      kernel_Gamma2v_iso = (pi*((-60*eps*(k1 - q)*q*(k1 + q)*
     -     (55*k3**6*q**6 - 56*k1**10*(k3**2 - 3*q**2) - 
     -     5*k1**8*(377*k3**4 - 36*k3**2*q**2) + 
     -     k1**6*(-329*k3**6 + 3066*k3**4*q**2 + 564*k3**2*q**4) - 
     -     k1**4*(647*k3**6*q**2 + 1617*k3**4*q**4 + 408*k3**2*q**6) + 
     -     3*k1**2*(307*k3**6*q**4 - 4*k3**4*q**6)))/k1**10 + 
     -     8*q*((8640*eps*k3**4*(-k1**2 + q**2)**3)/
     -     (k1**2*(k1**4 - 2*k1**2*q**2 + k3**2*q**2 + 
     -     q**4)) - (420*eps*(k1**2 - q**2)**2*
     -     (-8*k3**4 + 5*k3**2*q**2 + 3*q**4))/
     -     (k1**2*k3**2 - k3**2*q**2 + q**4) + 
     -     (-420*eps*k1**12*k3**2*(k1 - q)*(k3 - q)*
     -     (k1 + q)*(k3 + q)*(8*k3**2 + 3*q**2) + 
     -     (k1**2*k3**2 - k3**2*q**2 + q**4)*
     -     (825*(-1 + 5*eps)*k3**8*q**8 + 
     -     20*(-1 + 4*eps)*k1**2*k3**6*q**6*
     -     (622*k3**2 - 9*q**2) + 840*(1 + eps)*k1**12*k3**2*
     -     (k3**2 - 3*q**2) - 5*(-1 + 3*eps)*k1**4*k3**4*q**4*
     -     (6458*k3**4 + 4791*k3**2*q**2 + 1224*q**4) + 
     -     5*k1**10*(3927*k3**6 - 1492*k3**4*q**2 + 
     -     1260*k3**2*q**4 + 252*q**6) - 
     -     (-1 + 2*eps)*k1**6*k3**2*
     -     (840*k3**8 - 66925*k3**6*q**2 - 
     -     96793*k3**4*q**4 - 17715*k3**2*q**6 + 630*q**8) - 
     -     (-1 + eps)*k1**8*(17535*k3**8 - 81190*k3**6*q**2 - 
     -     5272*k3**4*q**4 - 9765*k3**2*q**6 + 2520*q**8)))/
     -     (k1**10*k3**2*(k1**2*k3**2 - k3**2*q**2 + q**4))) 
     -     + (15*(55*(2 - 11*eps)*k3**6*q**10 - 
     -     (-2 + 9*eps)*k1**2*k3**4*q**8*
     -     (811*k3**2 - 12*q**2) - 
     -     56*(2 + 3*eps)*k1**14*(k3**2 - 3*q**2) - 
     -     (-2 + 3*eps)*k1**8*k3**2*q**2*
     -     (11*k3**4 - 9634*k3**2*q**2 - 1356*q**4) - 
     -     (2 + eps)*k1**12*(1885*k3**4 - 292*k3**2*q**2 + 336*q**4) + 
     -     (-2 + 7*eps)*k1**4*k3**2*q**6*
     -     (2434*k3**4 + 1593*k3**2*q**2 + 408*q**4) - 
     -     2*(-2 + 5*eps)*k1**6*k3**2*q**4*
     -     (943*k3**4 + 3144*k3**2*q**2 + 690*q**4) + 
     -     (-2 + eps)*k1**10*(329*k3**6 - 6836*k3**4*q**2 - 
     -     148*k3**2*q**4 - 168*q**6))*
     -     dlog((k1 + q)**2/(k1 - q)**2))/k1**11 - 
     -     (210*(k3 - q)*(k3 + q)*(8*k3**2 + 3*q**2)*
     -     (8*(1 + eps)*k1**6*k3**2 - 4*k1**4*(3*k3**2*q**2 + q**4) - 
     -     (-1 + eps)*k1**2*(15*k3**6 - 46*k3**4*q**2 + 47*k3**2*q**4 - 
     -     8*q**6) - (-1 + 2*eps)*k3**2*(k3**6 + k3**2*q**4 - 2*q**6))*
     -     dlog((k3 + q)**2/(k3 - q)**2))/(k1**4*k3**3) + 
     -     (840*(-k1**2 + q**2)* (-8*k3**4 + 5*k3**2*q**2 + 3*q**4)*
     -     (2*(1 + eps)*k1**4*k3**2 + (-2 + eps)*q**4*(-k3**2 + q**2) + 
     -     k1**2*q**2*(-((4 + eps)*k3**2) + (2 + 3*eps)*q**2))*
     -     dlog((-(k3**2*q**2) + q**4 + k1**2*(k3**2 + q**2) + 
     -     2*k1*q*dsqrt(k1**2*k3**2 - k3**2*q**2 + q**4))/
     -     (-(k3**2*q**2) + q**4 + k1**2*(k3**2 + q**2) - 
     -     2*k1*q*dsqrt(k1**2*k3**2 - k3**2*q**2 + q**4)))
     -     )/(k1*(k1**2*k3**2 - k3**2*q**2 + q**4)**1.5) + 
     -     (17280*k3**3*(k1**2 - q**2)**3*
     -     ((1 + eps)*k1**6 - 3*k1**4*q**2 + 
     -     (-1 + 2*eps)*q**4*(k3**2 + q**2) + 
     -     k1**2*q**2*((1 + 2*eps)*k3**2 - 
     -     3*(-1 + eps)*q**2))*
     -     dlog(-((4*k3**2*q**2 + 2*(k1**2 - q**2)**2 + 
     -     4*k3*q*dsqrt(k1**4 + (-2*k1**2 + k3**2)*q**2 + q**4))/
     -     (-4*k3**2*q**2 - 2*(k1**2 - q**2)**2 + 4*k3*q*Sqrt(k1**4 + 
     -     (-2*k1**2 + k3**2)*q**2 + q**4)))))/
     -     (k1**4*(k1**4 - 2*k1**2*q**2 + k3**2*q**2 + q**4)**
     -     1.5)))/(6.20928d6*q**5)
c
      end
c
c ******************************************************* c
c
      function kernel_Gamma2v_highk(k1, k2, k3, q)
c
c ******************************************************* c
c
c     Asymptotic limit for kernel Gamma2: 
c           the expression is valid when k1, k2, k3 >> q
c
      implicit none
      real*8 kernel_Gamma2v_highk, k1, k2, k3, q
      real*8 pi
      pi = 4.d0 * datan(1.d0)
c     -------------------------------------------------
c
      kernel_Gamma2v_highk = (pi*(8085.d0*k1**4*k2**4*k3**6*
     -     (3.d0*(k1**2 - k2**2)**2 + (k1**2 + k2**2)*k3**2 - 4*k3**4) + 
     -     7.d0*k1**2*k2**2*k3**2*(112.d0*(k1**2 - k2**2)**4*
     -     (k1**2 + k2**2) + (k1**2 - k2**2)**2*(1094.d0*k1**4 - 
     -     2779.d0*k1**2*k2**2 + 1094.d0*k2**4)*k3**2 - 
     -     2.d0*(k1**2 + k2**2)*(42.d0*k1**4 + 661.d0*k1**2*k2**2 + 
     -     42.d0*k2**4)*k3**4 - (3274.d0*k1**4 + 6243.d0*k1**2*k2**2 + 
     -     3274.d0*k2**4)*k3**6 + 1864.d0*(k1**2 + k2**2)*k3**8 + 
     -     288.d0*k3**10)*q**2 + 
     -     (-14.d0*(k1 - k2)**4*(k1 + k2)**4*(k1**2 + k2**2)*
     -     (48.d0*k1**4 + 11.d0*k1**2*k2**2 + 48.d0*k2**4) + 
     -     7.d0*(112.d0*k1**12 + 81.d0*k1**8*k2**4 - 
     -     386.d0*k1**6*k2**6 + 81.d0*k1**4*k2**8 + 
     -     112.d0*k2**12)*k3**2 - 
     -     2.d0*(k1**2 + k2**2)*(2999.d0*k1**8 - 16730.d0*k1**6*k2**2 + 
     -     27861.d0*k1**4*k2**4 - 16730.d0*k1**2*k2**6 + 
     -     2999.d0*k2**8)*k3**4 + 
     -     (2388.d0*k1**8 - 5012.d0*k1**6*k2**2 - 9865.d0*k1**4*k2**4 - 
     -     5012.d0 *k1**2*k2**6 + 2388.d0*k2**8)*k3**6 + 
     -     34.d0*(k1**2 + k2**2)*(353.d0*k1**4 - 149.d0*k1**2*k2**2 + 
     -     353.d0*k2**4)*k3**8 - 8792.d0*(k1**4 + k2**4)*k3**10 + 
     -     2016.d0*(k1**2 + k2**2)*k3**12 - 
     -     1728.d0*k3**14)*q**4))/(339570.d0*k1**6*k2**6*k3**4*q**2)
c
      end
c
c ******************************************************* c
c
      function kernel_Gamma2v_lowk(k1, k2, k3, q)
c
c ******************************************************* c
c
c     Asymptotic limit for kernel Gamma2: 
c           the expression is valid when q >> k1, k2, k3
c
      implicit none
      real*8 kernel_Gamma2v_lowk, k1, k2, k3, q
      real*8 pi
      pi = 4.d0 * datan(1.d0)
c     -------------------------------------------------
c
      kernel_Gamma2v_lowk = (pi*(2426.d0*k1**8 - 
     -     8.d0*k1**6*(1555.d0*k2**2 + 7770.d0*k3**2 + 1503.d0*q**2) + 
     -     k1**2*(-12440.d0*k2**6 + 76656.d0*k2**4*k3**2 + 
     -     105102.d0*k2**2*k3**4 + 34882.d0*k3**6 + 
     -     9.d0*(1336.d0*k2**4 - 60504.d0*k2**2*k3**2 - 
     -     19531.d0*k3**4)*q**2) + 
     -     (k2 - k3)*(k2 + k3)*(2426.d0*k2**6 - 59734.d0*k2**4*k3**2 - 
     -     42841.d0*k2**2*k3**4 - 7959.d0*k3**6 + 
     -     9.d0*(-1336.d0*k2**4 + 27412.d0*k2**2*k3**2 + 
     -     7881.d0*k3**4)*q**2) + 
     -     3.d0*k1**4*(6676.d0*k2**4 + 5631.d0*k3**4 + 
     -     86244.d0*k3**2*q**2 + 8.d0*k2**2*(3194.d0*k3**2 + 
     -     501.d0*q**2)))) / (1.01871d6*k1**2*k2**2*q**4)
c
      end
c
c ******************************************************* c
c
      function kernel_Gamma2v_elongate(k1, k2, k3, q)
c
c ******************************************************* c
c
      implicit none
      real*8 kernel_Gamma2v_elongate, k1, k2, k3, q
      real*8 k, eps, pi
      pi = 4.d0 * datan(1.d0)
c     -------------------------------------------------
c
      if(k1.gt.k2) then
         k = k1
         eps = k2 / k1
      elseif(k2.gt.k1) then
         k = k2
         eps = k1 / k2
      endif
c
      kernel_Gamma2v_elongate = (Pi*((4*k**16*q*(42100*k**6 + 
     -     86573*k3**6 - 1473132*k3**4*q**2 - 927150*k3**2*q**4 - 
     -     139020*q**6 + 3*k**4*(121079*k3**2 - 512318*q**2) + 
     -     3*k**2*(116030*k3**4 - 680530*k3**2*q**2 - 
     -     674877*q**4)))/21.d0 - 
     -     (4*k**10*q*(450*k**12*k3**4 - 2475*k3**8*q**8 - 
     -     15.d0*k**10*(2033*k3**6 + 234*k3**4*q**2 + 
     -     84*k3**2*q**4 + 63*q**6) - 
     -     2*k**8*(9390*k3**8 - 252530*k3**6*q**2 + 
     -     80367*k3**4*q**4 - 7560*k3**2*q**6 + 
     -     3780*q**8) + k**6*(-17535*k3**10 + 81190*k3**8*q**2 + 
     -     3892*k3**6*q**4 + 43490*k3**4*q**6 - 2520*k3**2*q**8) + 
     -     15*k**4*(3359*k3**8*q**4 + 1514*k3**6*q**6 - 
     -     157*k3**4*q**8) - 
     -     15*k**2*(1009*k3**8*q**6 + 438*k3**6*q**8)))/
     -     k3**4 - 15*k**9*(k - q)**2*(k + q)**2*
     -     (-194*k**10 + 165*k3**4*q**6 + 
     -     k**8*(1176*k3**2 + 2297*q**2) + 
     -     k**6*(306*k3**4 - 3414*k3**2*q**2 - 2428*q**4) + 
     -     k**4*(-1307*k3**4*q**2 - 784*k3**2*q**4 + 157*q**6) + 
     -     6*k**2*(214*k3**4*q**4 + 73*k3**2*q**6))*
     -     dlog((k + q)**2/(k - q)**2) - 
     -     (105*k**16*(k3 - q)*(k3 + q)*(8*k3**2 + 3*q**2)*
     -     (15*k3**8 - 46*k3**6*q**2 + 47*k3**4*q**4 - 
     -     8*k3**2*q**6 + k**4*(9*k3**4 + 2*k3**2*q**2 - 3*q**4) + 
     -     8*k**2*(4*k3**6 - 17*k3**4*q**2 + 12*k3**2*q**4 - 3*q**6))*
     -     dlog((k3 + q)**2/(k3 - q)**2))/k3**5 + 
     -     (420*k**19*q**3*(-k3 + q)*(k3 + q)*(8*k3**2 + 3*q**2)*
     -     (-4*k*dsqrt(q**2*(k**2 - k3**2 + q**2)) + 
     -     q*(4*k**2 - 3*k3**2 + 3*q**2)*
     -     dlog((2.d0*k**2*q - k3**2*q + q**3 + 
     -     2.d0*k*dsqrt(q**2*(k**2 - k3**2 + q**2)))/
     -     (2.d0*k**2*q - k3**2*q + q**3 - 
     -     2.d0*k*dsqrt(q**2*(k**2 - k3**2 + q**2))))))/
     -     (q**2*(k**2 - k3**2 + q**2))**1.5 + 
     -     (8640.d0*k**16*k3**3*q**3*(k**2 - q**2)**2*
     -     (4.d0*k3*dsqrt(q**2*(-k**2 + k3**2 + q**2)) + 
     -     q*(3*k**2 - 4*k3**2 - 3*q**2)*
     -     dlog(-((-(k**2*q) + 2*k3**2*q + q**3 + 
     -     2.d0*k3*dsqrt(q**2*(-k**2 + k3**2 + q**2)))/
     -     (k**2*q - 2*k3**2*q - q**3 + 
     -     2.d0*k3*dsqrt(q**2*(-k**2 + k3**2 + q**2)))))
     -     ))/(q**2*(-k**2 + k3**2 + q**2))**1.5 + 
     -     ((4.d0*k**14*q**3*(72913.d0*k**6 + 130696.d0*k3**6 + 
     -     251538.d0*k3**4*q**2 + 21000.d0*k3**2*q**4 - 
     -     7665.d0*q**6 + k**4*(-37530*k3**2 + 666260*q**2) + 
     -     k**2*(-334079*k3**4 + 196742*k3**2*q**2 + 282415*q**4)))/7. + 
     -     (4*k**8*q*(195*k**14*k3**4 - 825*k3**10*q**8 - 
     -     5.d0*k**2*k3**8*q**6*(2488*k3**2 + 459*q**2) + 
     -     5*k**4*k3**6*q**4*(6458*k3**4 + 1764*k3**2*q**2 + 405*q**4) - 
     -     45.d0*k**12*(659*k3**6 + 134*k3**4*q**2 + 28*k3**2*q**4 + 
     -     21.d0*q**6) + k**10*(10245*k3**8 + 245070*k3**6*q**2 - 
     -     93542.d0*k3**4*q**4 + 8820.d0*k3**2*q**6 - 3780*q**8) + 
     -     2.d0*k**6*k3**4*(840.d0*k3**8 - 66925.d0*k3**6*q**2 - 
     -     46408.d0*k3**4*q**4 - 2055.d0*k3**2*q**6 + 
     -     1725.d0*q**8) + k**8*k3**2*
     -     (17535.d0*k3**8 - 81190.d0*k3**6*q**2 - 
     -     3892.d0*k3**4*q**4 - 43490.d0*k3**2*q**6 + 
     -     2520.d0 *q**8)))/k3**4 - 15.d0*k**7*(k - q)**2*(k + q)**2*
     -     (13.d0*k**12 - 55.d0*k3**6*q**6 - 
     -     k**10*(1921.d0*k3**2 + 649.d0*q**2) + 
     -     k**8*(1579.d0*k3**4 + 2913.d0*k3**2*q**2 + 
     -     563.d0*q**4) + k**6*(329*k3**6 - 1759*k3**4*q**2 + 
     -     25.d0*k3**2*q**4 + 73.d0*q**6) + 
     -     k**4*(647.d0*k3**6*q**2 + 333.d0*k3**4*q**4 + 
     -     135.d0*k3**2*q**6) - 3*k**2*(307*k3**6*q**4 + 
     -     51*k3**4*q**6))*dlog((k + q)**2/(k - q)**2) + 
     -     (105.d0*k**14*(k3 - q)*(k3 + q)*(8*k3**2 + 3*q**2)*
     -     (k**6*(k3**4 + 2*k3**2*q**2 - 3*q**4) + 
     -     4.d0*k**4*(4.d0*k3**6 - 14.d0*k3**4*q**2 + 
     -     13.d0*k3**2*q**4 - 3.d0*q**6) - 
     -     2.d0*k3**4*(k3**6 + k3**2*q**4 - 2*q**6) + 
     -     k**2*(-15*k3**8 + 46*k3**6*q**2 - 
     -     47.d0*k3**4*q**4 + 8*k3**2*q**6))*
     -     dlog((k3 + q)**2/(k3 - q)**2))/k3**5 - 
     -     (840.d0*k**17*q**4*(-k3 + q)*(k3 + q)*
     -     (8.d0*k3**2 + 3*q**2)*dlog((2*k**2*q - k3**2*q + q**3 + 
     -     2.d0*k*dsqrt(q**2*(k**2 - k3**2 + q**2)))/
     -     (2.d0*k**2*q - k3**2*q + q**3 - 
     -     2.d0*k*dsqrt(q**2*(k**2 - k3**2 + q**2)))))/
     -     dsqrt(q**2*(k**2 - k3**2 + q**2)) + 
     -     (17280.d0*k**14*k3**3*q**4*(k**2 - q**2)**2*
     -     dlog(-((-(k**2*q) + 2*k3**2*q + q**3 + 
     -     2.d0*k3*dsqrt(q**2*(-k**2 + k3**2 + q**2)))/
     -     (k**2*q - 2*k3**2*q - q**3 + 
     -     2.d0*k3*dsqrt(q**2*(-k**2 + k3**2 + q**2)))))
     -     )/dsqrt(q**2*(-k**2 + k3**2 + q**2)))/eps**2))/
     -     (6.20928d6*k**18*q**5)
c
      end
c
c ******************************************************* c
c
      function kernel_Gamma2v_coll(k1, k2, k3, q)
c
c ******************************************************* c
c
c     Asymptotic limit for Kernel Gamma_2:   k3 << k1, k2
c
c     4th order expansion in eps = k3/k2
c
      implicit none
      real*8 kernel_Gamma2v_coll, k1, k2, k3, q
      real*8 kernel1, kernel2
      real*8 eps, pi
      pi = 4.d0 * datan(1.d0)
c     -------------------------------------------------
c
      eps = k3/k2
c
      kernel_Gamma2v_coll = (pi*(-84.d0*k1**7*k2**7*q**3*
     -     (161.d0*k1**6 + 161.d0*k2**6 + 1064.d0*k2**4*q**2 - 
     -     465.d0*k2**2*q**4 + 60.d0*q**6 + 
     -     k1**4*(-281.d0*k2**2 + 1064.d0*q**2) - 
     -     k1**2*(281.d0*k2**4 + 1528.d0*k2**2*q**2 + 465.d0*q**4)) + 
     -     4.d0*k1*k2*q*(195.d0*k1**14*k2**6 + 825.d0*k2**12*q**8 - 
     -     5.d0*k1**2*k2**10*q**6*(1949.d0*k2**2 + 855.d0*q**2) + 
     -     5.d0*k1**4*k2**8*q**4*
     -     (3895*k2**4 + 8694*k2**2*q**2 + 471*q**4) + 
     -     k1**10*k2**2*(510*k2**8 + 3510*k2**6*q**2 - 
     -     93542*k2**4*q**4 + 43470*k2**2*q**6 - 
     -     4275*q**8) - 
     -     5*k1**12*(90*k2**8 + 1206*k2**6*q**2 - 
     -     3895*k2**4*q**4 + 1949*k2**2*q**6 - 165*q**8) 
     -     + k1**8*k2**4*(-450*k2**8 + 3510*k2**6*q**2 + 
     -     160734*k2**4*q**4 - 43490*k2**2*q**6 + 
     -     2355*q**8) + 
     -     k1**6*k2**6*(195*k2**8 - 6030*k2**6*q**2 - 
     -     93542.d0*k2**4*q**4 - 43490*k2**2*q**6 + 
     -     3450*q**8)) - 15*k2**7*(k1 - q)**2*(k1 + q)**2*
     -     (13*k1**12 + 55*k2**6*q**6 - 
     -     k1**10*(194*k2**2 + 649*q**2) + 
     -     k1**8*(17*k2**4 + 2297*k2**2*q**2 + 563*q**4) + 
     -     k1**6*(164*k2**6 - 2155*k2**4*q**2 - 
     -     2428*k2**2*q**4 + 73*q**6) + 
     -     k1**4*(339*k2**6*q**2 + 2423*k2**4*q**4 + 157*k2**2*q**6) - 
     -     3*k1**2*(186*k2**6*q**4 + 95*k2**4*q**6))*
     -     dlog((k1 + q)**2/(k1 - q)**2) - 
     -     15*k1**7*(k2 - q)**2*(k2 + q)**2*
     -     (k1**6*(164*k2**6 + 339*k2**4*q**2 - 
     -     558.d0*k2**2*q**4 + 55*q**6) + 
     -     k2**6*(13*k2**6 - 649*k2**4*q**2 + 
     -     563.d0*k2**2*q**4 + 73*q**6) + 
     -     k1**4*(17*k2**8 - 2155*k2**6*q**2 + 
     -     2423.d0*k2**4*q**4 - 285*k2**2*q**6) + 
     -     k1**2*(-194*k2**10 + 2297*k2**8*q**2 - 
     -     2428.d0*k2**6*q**4 + 157*k2**4*q**6))*
     -     dlog((k2 + q)**2/(k2 - q)**2) - 
     -     (2520.d0*k1**10*k2**7*(k2 - q)**2*q**4*(k2 + q)**2*
     -     dlog((2*k1**2*q - k2**2*q + q**3 + 
     -     2*k1*dsqrt(q**2*(k1**2 - k2**2 + q**2)))/
     -     (2*k1**2*q - k2**2*q + q**3 - 
     -     2*k1*dsqrt(q**2*(k1**2 - k2**2 + q**2)))))/
     -     dsqrt(q**2*(k1**2 - k2**2 + q**2)) - 
     -     (2520*k1**7*k2**10*(k1 - q)**2*q**4*(k1 + q)**2*
     -     dlog(-((-(k1**2*q) + 2*k2**2*q + q**3 + 
     -     2*k2*dsqrt(q**2*(-k1**2 + k2**2 + q**2)))/
     -     (k1**2*q - 2*k2**2*q - q**3 + 
     -     2*k2*dsqrt(q**2*(-k1**2 + k2**2 + q**2))))))/
     -     dsqrt(q**2*(-k1**2 + k2**2 + q**2))))/
     -     (6.20928e6*k1**9*k2**9*q**5) + 
     -     (eps**2*Pi*(8*k1**7*k2**9*q*
     -     (92*k1**6 + 92*k2**6 + 29992*k2**4*q**2 + 
     -     9968*k2**2*q**4 - 945*q**6 + 
     -     4*k1**4*(607*k2**2 + 7498*q**2) + 
     -     4*k1**2*(607*k2**4 - 16284*k2**2*q**2 + 2492*q**4)) - 
     -     4*k1*k2**3*q*(29655*k1**12*k2**6 + 2475*k2**10*q**8 - 
     -     30*k1**2*k2**8*q**6*(235*k2**2 + 219*q**2) + 
     -     15*k1**4*k2**6*q**4*
     -     (92*k2**4 + 1514*k2**2*q**2 - 135*q**4) + 
     -     k1**6*k2**4*(29655*k2**8 - 245070*k2**6*q**2 + 
     -     3892*k2**4*q**4 + 4110*k2**2*q**6 - 2025*q**8
     -     ) - 15*k1**10*(2033*k2**8 + 16338*k2**6*q**2 - 
     -     92*k2**4*q**4 + 470*k2**2*q**6 - 165*q**8) + 
     -     k1**8*(-30495*k2**10 + 505060*k2**8*q**2 + 
     -     3892*k2**6*q**4 + 22710*k2**4*q**6 - 6570*k2**2*q**8)) - 
     -     15*k2**9*(k1 - q)**2*(k1 + q)**2*
     -     (-1921*k1**10 - 165*k2**4*q**6 + 
     -     3*k1**8*(392*k2**2 + 971*q**2) + 
     -     k1**6*(801*k2**4 - 3414*k2**2*q**2 + 25*q**4) + 
     -     k1**4*(321*k2**4*q**2 - 784*k2**2*q**4 + 135*q**6) + 
     -     3*k1**2*(65*k2**4*q**4 + 146*k2**2*q**6))*
     -     dlog((k1 + q)**2/(k1 - q)**2) - 
     -     15*k1**7*k2**2*(k2 - q)**2*(k2 + q)**2*
     -     (-1921*k2**10 + 2913*k2**8*q**2 + 25*k2**6*q**4 + 
     -     135*k2**4*q**6 + 3*k1**4*(267*k2**6 + 107*k2**4*q**2 + 
     -     65*k2**2*q**4 - 55*q**6) + 
     -     2*k1**2*(588*k2**8 - 1707*k2**6*q**2 - 
     -     392*k2**4*q**4 + 219*k2**2*q**6))*
     -     dlog((k2 + q)**2/(k2 - q)**2) - 
     -     (420*k1**10*k2**9*(k2 - q)**2*q**3*(k2 + q)**2*
     -     (12*k1*dsqrt(q**2*(k1**2 - k2**2 + q**2)) + 
     -     q*(10*k1**2 + 13*(-k2**2 + q**2))*
     -     dlog((2*k1**2*q - k2**2*q + q**3 + 
     -     2*k1*dsqrt(q**2*(k1**2 - k2**2 + q**2)))/
     -     (2*k1**2*q - k2**2*q + q**3 - 
     -     2*k1*dsqrt(q**2*(k1**2 - k2**2 + q**2)))))
     -     )/(q**2*(k1**2 - k2**2 + q**2))**1.5 - 
     -     (420*k1**7*k2**12*(k1 - q)**2*q**3*(k1 + q)**2*
     -     (12*k2*dsqrt(q**2*(-k1**2 + k2**2 + q**2)) + 
     -     (-13*k1**2*q + 10*k2**2*q + 13*q**3)*
     -     dlog(-((-(k1**2*q) + 2*k2**2*q + q**3 + 
     -     2*k2*dsqrt(q**2*(-k1**2 + k2**2 + q**2))
     -     )/(k1**2*q - 2*k2**2*q - q**3 + 
     -     2*k2*dsqrt(q**2*(-k1**2 + k2**2 + q**2)))
     -     ))))/(q**2*(-k1**2 + k2**2 + q**2))**1.5))/
     -     (6.20928d6*k1**9*k2**9*q**5) + 
     -     (eps**4*pi*(69120*k1**7*k2**11*q*(k1**2 - q**2)*
     -     (k2**2 - q**2) + (4*k1**7*k2**11*(688*k1**6 + 688*k2**6 - 
     -     37728.d0*k2**4*q**2 - 51509*k2**2*q**4 + 
     -     3668.d0*q**6 - 32*k1**4*(172*k2**2 + 1179*q**2) + 
     -     k1**2*(-5504.d0*k2**4 + 90944*k2**2*q**2 - 51509*q**4)))/q + 
     -     4.d0*k1*k2**5*q*(10245*k1**10*k2**6 + 2475*k2**8*q**8 + 
     -     k1**4*(-50385.d0*k2**8*q**4 + 8820*k2**6*q**6) + 
     -     k1**6*k2**2*(10245*k2**8 - 81190*k2**6*q**2 - 
     -     92816.d0*k2**4*q**4 + 8820*k2**2*q**6 - 2295*q**8) + 
     -     5*k1**8*(3756*k2**8 - 16238*k2**6*q**2 - 
     -     10077*k2**4*q**4 + 3027*k2**2*q**6 + 495*q**8) + 
     -     15*k1**2*(1009*k2**8*q**6 - 153*k2**6*q**8)) - 
     -     15*k2**11*(k1 - q)**2*(k1 + q)**2*
     -     (1579*k1**8 + 165*k2**2*q**6 + 
     -     k1**6*(306*k2**2 - 1759*q**2) + 
     -     k1**4*(-1307*k2**2*q**2 + 333*q**4) + 
     -     3*k1**2*(428*k2**2*q**4 - 51*q**6))*
     -     dlog((k1 + q)**2/(k1 - q)**2) - 
     -     15*k1**7*k2**4*(k2 - q)**2*(k2 + q)**2*
     -     (1579*k2**8 - 1759*k2**6*q**2 + 333*k2**4*q**4 - 
     -     153*k2**2*q**6 + k1**2*(306*k2**6 - 1307*k2**4*q**2 + 
     -     1284*k2**2*q**4 + 165*q**6))*
     -     dlog((k2 + q)**2/(k2 - q)**2) + 
     -     (105*k1**10*k2**11*(k2 - q)**6*q*(k2 + q)**6*
     -     dsqrt(q**2*(k1**2 - k2**2 + q**2))*
     -     (-4*k1*dsqrt(q**2*(k1**2 - k2**2 + q**2))*
     -     (26*k1**2 + 35*(-k2**2 + q**2)) + 
     -     q*(64*k1**4 - 108*k1**2*(k2**2 - q**2) + 
     -     35*(k2**2 - q**2)**2)*
     -     dlog((2*k1**2*q - k2**2*q + q**3 + 
     -     2*k1*dsqrt(q**2*(k1**2 - k2**2 + q**2)))/
     -     (2*k1**2*q - k2**2*q + q**3 - 
     -     2*k1*dsqrt(q**2*(k1**2 - k2**2 + q**2))))))/
     -     ((k1**2 - k2**2 + q**2)**3*(-(k2**2*q) + q**3)**4) + 
     -     (105*k1**7*k2**14*(k1 - q)**6*q*(k1 + q)**6*
     -     dsqrt(q**2*(-k1**2 + k2**2 + q**2))*
     -     (-4*k2*dsqrt(q**2*(-k1**2 + k2**2 + q**2))*
     -     (-35*k1**2 + 26*k2**2 + 35*q**2) + 
     -     q*(35*k1**4 + 64*k2**4 + 108*k2**2*q**2 + 
     -     35*q**4 - 2*k1**2*(54*k2**2 + 35*q**2))*
     -     dlog(-((-(k1**2*q) + 2*k2**2*q + q**3 + 
     -     2*k2*dsqrt(q**2*(-k1**2 + k2**2 + q**2)))/
     -     (k1**2*q - 2*k2**2*q - q**3 + 
     -     2*k2*dsqrt(q**2*(-k1**2 + k2**2 + q**2))))
     -     )))/((-k1**2 + k2**2 + q**2)**3*(-(k1**2*q) + q**3)**4)))/
     -     (6.20928d6*k1**9*k2**9*q**5)
c
      end
c
c ******************************************************* c
c
      function kernel_Gamma2v_reg3rd(k1, k2, k3, q)
c
c ******************************************************* c
c
      implicit none
      integer i
      real*8  kernel_Gamma2v_reg3rd, k1, k2, k3, q
      real*8  pi, betafunc, small_beta, big_beta
      real*8  kernel_poly(17), kernel_poly_sum
      real*8  kernel_beta(5), kernel_beta_sum
      real*8  ss1, ss2, ss3
c     /--/--/--/ check /--/--/--/ 
ccc      real*8  kernel_beta_old
c     /--/--/--/ check /--/--/--/ 
      pi = 4.d0 * datan(1.d0)
c     -------------------------------------------------
c
      kernel_poly(1)= (-840*k1**11*k2**9*k3**8 - 
     *     840*k1**9*k2**11*k3**8 - 
     *     2160*k1**9*k2**9*k3**10)*pi - 
     *     (4200*k1**11*k2**9*k3**7 + 4200*k1**9*k2**11*k3**7 + 
     *     3360*k1**11*k2**8*k3**8 + 
     *     3360*k1**10*k2**9*k3**8 + 
     *     3360*k1**9*k2**10*k3**8 + 
     *     3360*k1**8*k2**11*k3**8 + 
     *     10800*k1**9*k2**9*k3**9 + 
     *     8640*k1**9*k2**8*k3**10 + 8640*k1**8*k2**9*k3**10)*
     *     pi*q - (-560*k1**13*k2**7*k3**6 + 
     *     8715*k1**11*k2**9*k3**6 + 
     *     8715*k1**9*k2**11*k3**6 - 
     *     560*k1**7*k2**13*k3**6 + 
     *     16800*k1**11*k2**8*k3**7 + 
     *     16800*k1**10*k2**9*k3**7 + 
     *     16800*k1**9*k2**10*k3**7 + 
     *     16800*k1**8*k2**11*k3**7 - 
     *     9660*k1**11*k2**7*k3**8 + 
     *     13440*k1**10*k2**8*k3**8 + 
     *     59400*k1**9*k2**9*k3**8 + 
     *     13440*k1**8*k2**10*k3**8 - 
     *     9660*k1**7*k2**11*k3**8 + 
     *     43200*k1**9*k2**8*k3**9 + 
     *     43200*k1**8*k2**9*k3**9 + 
     *     6180*k1**9*k2**7*k3**10 + 
     *     34560*k1**8*k2**8*k3**10 + 
     *     6180*k1**7*k2**9*k3**10 + 17040*k1**7*k2**7*k3**12
     *     )*pi*q**2 
c
      kernel_poly(2) = - (-1120*k1**13*k2**7*k3**5 - 
     *        5145*k1**11*k2**9*k3**5 - 
     *        5145*k1**9*k2**11*k3**5 - 
     *        1120*k1**7*k2**13*k3**5 - 
     *        7160*k1**13*k2**6*k3**6 - 
     *        2630*k1**12*k2**7*k3**6 + 
     *        34350*k1**11*k2**8*k3**6 + 
     *        40680*k1**10*k2**9*k3**6 + 
     *        40680*k1**9*k2**10*k3**6 + 
     *        34350*k1**8*k2**11*k3**6 - 
     *        2630*k1**7*k2**12*k3**6 - 
     *        7160*k1**6*k2**13*k3**6 - 
     *        21420*k1**11*k2**7*k3**7 + 
     *        67200*k1**10*k2**8*k3**7 + 
     *        156840*k1**9*k2**9*k3**7 + 
     *        67200*k1**8*k2**10*k3**7 - 
     *        21420*k1**7*k2**11*k3**7 - 
     *        79470*k1**11*k2**6*k3**8 + 
     *        18990*k1**10*k2**7*k3**8 + 
     *        185520*k1**9*k2**8*k3**8 + 
     *        185520*k1**8*k2**9*k3**8 + 
     *        18990*k1**7*k2**10*k3**8 - 
     *        79470*k1**6*k2**11*k3**8 + 
     *        5700*k1**9*k2**7*k3**9 + 
     *        172800*k1**8*k2**8*k3**9 + 
     *        5700*k1**7*k2**9*k3**9 - 
     *        27660*k1**9*k2**6*k3**10 - 
     *        22650*k1**8*k2**7*k3**10 - 
     *        22650*k1**7*k2**8*k3**10 - 
     *        27660*k1**6*k2**9*k3**10 + 
     *        81840*k1**7*k2**7*k3**11 + 
     *        58290*k1**7*k2**6*k3**12 + 
     *        58290*k1**6*k2**7*k3**12)*pi*q**3 
c
      kernel_poly(3) = - (-4690*k1**13*k2**7*k3**4 + 
     *        3430*k1**11*k2**9*k3**4 + 
     *        3430*k1**9*k2**11*k3**4 - 
     *        4690*k1**7*k2**13*k3**4 - 
     *        29080*k1**13*k2**6*k3**5 - 
     *        6430*k1**12*k2**7*k3**5 - 
     *        23130*k1**11*k2**8*k3**5 + 
     *        8520*k1**10*k2**9*k3**5 + 
     *        8520*k1**9*k2**10*k3**5 - 
     *        23130*k1**8*k2**11*k3**5 - 
     *        6430*k1**7*k2**12*k3**5 - 
     *        29080*k1**6*k2**13*k3**5 - 
     *        3800*k1**13*k2**5*k3**6 - 
     *        30200*k1**12*k2**6*k3**6 - 
     *        72421*k1**11*k2**7*k3**6 + 
     *        160680*k1**10*k2**8*k3**6 + 
     *        341532*k1**9*k2**9*k3**6 + 
     *        160680*k1**8*k2**10*k3**6 - 
     *        72421*k1**7*k2**11*k3**6 - 
     *        30200*k1**6*k2**12*k3**6 - 
     *        3800*k1**5*k2**13*k3**6 - 
     *        289830*k1**11*k2**6*k3**7 + 
     *        202470*k1**10*k2**7*k3**7 + 
     *        366960*k1**9*k2**8*k3**7 + 
     *        366960*k1**8*k2**9*k3**7 + 
     *        202470*k1**7*k2**10*k3**7 - 
     *        289830*k1**6*k2**11*k3**7 - 
     *        67800*k1**11*k2**5*k3**8 - 
     *        87360*k1**10*k2**6*k3**8 + 
     *        153704*k1**9*k2**7*k3**8 + 
     *        533760*k1**8*k2**8*k3**8 + 
     *        153704*k1**7*k2**9*k3**8 - 
     *        87360*k1**6*k2**10*k3**8 - 
     *        67800*k1**5*k2**11*k3**8 - 
     *        239100*k1**9*k2**6*k3**9 - 
     *        214050*k1**8*k2**7*k3**9 - 
     *        214050*k1**7*k2**8*k3**9 - 
     *        239100*k1**6*k2**9*k3**9 - 
     *        18080*k1**9*k2**5*k3**10 - 
     *        300120*k1**8*k2**6*k3**10 + 
     *        269052*k1**7*k2**7*k3**10 - 
     *        300120*k1**6*k2**8*k3**10 - 
     *        18080*k1**5*k2**9*k3**10 + 
     *        278010*k1**7*k2**6*k3**11 + 
     *        278010*k1**6*k2**7*k3**11 + 
     *        102680*k1**7*k2**5*k3**12 + 
     *        193680*k1**6*k2**6*k3**12 + 
     *        102680*k1**5*k2**7*k3**12)*pi*q**4 
c
      kernel_poly(4) = - (700*k1**13*k2**7*k3**3 - 
     *     4480*k1**11*k2**9*k3**3 - 
     *     4480*k1**9*k2**11*k3**3 + 
     *     700*k1**7*k2**13*k3**3 - 
     *     67960*k1**13*k2**6*k3**4 - 
     *     22660*k1**12*k2**7*k3**4 + 
     *     8620*k1**11*k2**8*k3**4 + 
     *     71920*k1**10*k2**9*k3**4 + 
     *     71920*k1**9*k2**10*k3**4 + 
     *     8620*k1**8*k2**11*k3**4 - 
     *     22660*k1**7*k2**12*k3**4 - 
     *     67960*k1**6*k2**13*k3**4 - 
     *     8920*k1**13*k2**5*k3**5 - 
     *     124120*k1**12*k2**6*k3**5 - 
     *     176185*k1**11*k2**7*k3**5 + 
     *     23880*k1**10*k2**8*k3**5 + 
     *     242380*k1**9*k2**9*k3**5 + 
     *     23880*k1**8*k2**10*k3**5 - 
     *     176185*k1**7*k2**11*k3**5 - 
     *     124120*k1**6*k2**12*k3**5 - 
     *     8920*k1**5*k2**13*k3**5 - 
     *     27290*k1**13*k2**4*k3**6 - 
     *     17540*k1**12*k2**5*k3**6 - 
     *     670514*k1**11*k2**6*k3**6 + 
     *     351166*k1**10*k2**7*k3**6 + 
     *     782578*k1**9*k2**8*k3**6 + 
     *     782578*k1**8*k2**9*k3**6 + 
     *     351166*k1**7*k2**10*k3**6 - 
     *     670514*k1**6*k2**11*k3**6 - 
     *     17540*k1**5*k2**12*k3**6 - 
     *     27290*k1**4*k2**13*k3**6 - 
     *     177720*k1**11*k2**5*k3**7 - 
     *     6720*k1**10*k2**6*k3**7 + 
     *     461470*k1**9*k2**7*k3**7 + 
     *     426240*k1**8*k2**8*k3**7 + 
     *     461470*k1**7*k2**9*k3**7 - 
     *     6720*k1**6*k2**10*k3**7 - 
     *     177720*k1**5*k2**11*k3**7 - 
     *     54270*k1**11*k2**4*k3**8 + 
     *     74580*k1**10*k2**5*k3**8 - 
     *     703384*k1**9*k2**6*k3**8 + 
     *     188926*k1**8*k2**7*k3**8 + 
     *     188926*k1**7*k2**8*k3**8 - 
     *     703384*k1**6*k2**9*k3**8 + 
     *     74580*k1**5*k2**10*k3**8 - 
     *     54270*k1**4*k2**11*k3**8 - 
     *     241600*k1**9*k2**5*k3**9 - 
     *     1903800*k1**8*k2**6*k3**9 + 
     *     364480*k1**7*k2**7*k3**9 - 
     *     1903800*k1**6*k2**8*k3**9 - 
     *     241600*k1**5*k2**9*k3**9 + 
     *     69370*k1**9*k2**4*k3**10 - 
     *     356540*k1**8*k2**5*k3**10 + 
     *     725278*k1**7*k2**6*k3**10 + 
     *     725278*k1**6*k2**7*k3**10 - 
     *     356540*k1**5*k2**8*k3**10 + 
     *     69370*k1**4*k2**9*k3**10 + 
     *     493240*k1**7*k2**5*k3**11 + 
     *     914640*k1**6*k2**6*k3**11 + 
     *     493240*k1**5*k2**7*k3**11 + 
     *     24190*k1**7*k2**4*k3**12 + 
     *     351500*k1**6*k2**5*k3**12 + 
     *     351500*k1**5*k2**6*k3**12 + 
     *     24190*k1**4*k2**7*k3**12)*pi*q**5 
c
      kernel_poly(5) = - (3360*k1**13*k2**7*k3**2 - 
     *     4935*k1**11*k2**9*k3**2 - 
     *        4935*k1**9*k2**11*k3**2 + 
     *        3360*k1**7*k2**13*k3**2 - 
     *        46400*k1**13*k2**6*k3**3 - 
     *        1100*k1**12*k2**7*k3**3 - 
     *        23020*k1**11*k2**8*k3**3 + 
     *        40280*k1**10*k2**9*k3**3 + 
     *        40280*k1**9*k2**10*k3**3 - 
     *        23020*k1**8*k2**11*k3**3 - 
     *        1100*k1**7*k2**12*k3**3 - 
     *        46400*k1**6*k2**13*k3**3 - 
     *        32540*k1**13*k2**5*k3**4 - 
     *        287440*k1**12*k2**6*k3**4 + 
     *        96610*k1**11*k2**7*k3**4 + 
     *        267280*k1**10*k2**8*k3**4 - 
     *        164120*k1**9*k2**9*k3**4 + 
     *        267280*k1**8*k2**10*k3**4 + 
     *        96610*k1**7*k2**11*k3**4 - 
     *        287440*k1**6*k2**12*k3**4 - 
     *        32540*k1**5*k2**13*k3**4 - 
     *        129730*k1**13*k2**4*k3**5 - 
     *        47380*k1**12*k2**5*k3**5 - 
     *        673290*k1**11*k2**6*k3**5 + 
     *        160710*k1**10*k2**7*k3**5 + 
     *        437370*k1**9*k2**8*k3**5 + 
     *        437370*k1**8*k2**9*k3**5 + 
     *        160710*k1**7*k2**10*k3**5 - 
     *        673290*k1**6*k2**11*k3**5 - 
     *        47380*k1**5*k2**12*k3**5 - 
     *        129730*k1**4*k2**13*k3**5 - 
     *        15440*k1**13*k2**3*k3**6 - 
     *        110720*k1**12*k2**4*k3**6 - 
     *        616471*k1**11*k2**5*k3**6 - 
     *        136656*k1**10*k2**6*k3**6 + 
     *        958591*k1**9*k2**7*k3**6 + 
     *        816512*k1**8*k2**8*k3**6 + 
     *        958591*k1**7*k2**9*k3**6 - 
     *        136656*k1**6*k2**10*k3**6 - 
     *        616471*k1**5*k2**11*k3**6 - 
     *        110720*k1**4*k2**12*k3**6 - 
     *        15440*k1**3*k2**13*k3**6 - 
     *        163830*k1**11*k2**4*k3**7 + 
     *        1018020*k1**10*k2**5*k3**7 - 
     *        1574720*k1**9*k2**6*k3**7 + 
     *        1073630*k1**8*k2**7*k3**7 + 
     *        1073630*k1**7*k2**8*k3**7 - 
     *        1574720*k1**6*k2**9*k3**7 + 
     *        1018020*k1**5*k2**10*k3**7 - 
     *        163830*k1**4*k2**11*k3**7 - 
     *        7260*k1**11*k2**3*k3**8 + 
     *        13440*k1**10*k2**4*k3**8 - 
     *        913416*k1**9*k2**5*k3**8 - 
     *        2994896*k1**8*k2**6*k3**8 + 
     *        2553328*k1**7*k2**7*k3**8 - 
     *        2994896*k1**6*k2**8*k3**8 - 
     *        913416*k1**5*k2**9*k3**8 + 
     *        13440*k1**4*k2**10*k3**8 - 
     *        7260*k1**3*k2**11*k3**8 + 
     *        246050*k1**9*k2**4*k3**9 - 
     *        2387500*k1**8*k2**5*k3**9 + 
     *        602070*k1**7*k2**6*k3**9 + 
     *        602070*k1**6*k2**7*k3**9 - 
     *        2387500*k1**5*k2**8*k3**9 + 
     *        246050*k1**4*k2**9*k3**9 + 
     *        33220*k1**9*k2**3*k3**10 + 
     *        88000*k1**8*k2**4*k3**10 + 
     *        1249692*k1**7*k2**5*k3**10 + 
     *        2728592*k1**6*k2**6*k3**10 + 
     *        1249692*k1**5*k2**7*k3**10 + 
     *        88000*k1**4*k2**8*k3**10 + 
     *        33220*k1**3*k2**9*k3**10 + 
     *        107510*k1**7*k2**4*k3**11 + 
     *        1676860*k1**6*k2**5*k3**11 + 
     *        1676860*k1**5*k2**6*k3**11 + 
     *        107510*k1**4*k2**7*k3**11 - 
     *        7520*k1**7*k2**3*k3**12 + 
     *        57280*k1**6*k2**4*k3**12 + 
     *        618720*k1**5*k2**5*k3**12 + 
     *        57280*k1**4*k2**6*k3**12 - 7520*k1**3*k2**7*k3**12
     *     )*pi*q**6 
c
      kernel_poly(6) = - (420*k1**13*k2**7*k3 - 735*k1**11*k2**9*k3 - 
     *     735*k1**9*k2**11*k3 + 420*k1**7*k2**13*k3 - 
     *     11160*k1**13*k2**6*k3**2 + 
     *     11490*k1**12*k2**7*k3**2 - 
     *        22290*k1**11*k2**8*k3**2 + 
     *        9360*k1**10*k2**9*k3**2 + 
     *        9360*k1**9*k2**10*k3**2 - 
     *        22290*k1**8*k2**11*k3**2 + 
     *        11490*k1**7*k2**12*k3**2 - 
     *        11160*k1**6*k2**13*k3**2 - 
     *        200*k1**13*k2**5*k3**3 - 
     *        201200*k1**12*k2**6*k3**3 + 
     *        239970*k1**11*k2**7*k3**3 + 
     *        140720*k1**10*k2**8*k3**3 - 
     *        558640*k1**9*k2**9*k3**3 + 
     *        140720*k1**8*k2**10*k3**3 + 
     *        239970*k1**7*k2**11*k3**3 - 
     *        201200*k1**6*k2**12*k3**3 - 
     *        200*k1**5*k2**13*k3**3 - 
     *        269260*k1**13*k2**4*k3**4 - 
     *        153560*k1**12*k2**5*k3**4 + 
     *        535390*k1**11*k2**6*k3**4 + 
     *        1301890*k1**10*k2**7*k3**4 - 
     *        1465980*k1**9*k2**8*k3**4 - 
     *        1465980*k1**8*k2**9*k3**4 + 
     *        1301890*k1**7*k2**10*k3**4 + 
     *        535390*k1**6*k2**11*k3**4 - 
     *        153560*k1**5*k2**12*k3**4 - 
     *        269260*k1**4*k2**13*k3**4 - 
     *        75520*k1**13*k2**3*k3**5 - 
     *        526720*k1**12*k2**4*k3**5 - 
     *        1044035*k1**11*k2**5*k3**5 + 
     *        678640*k1**10*k2**6*k3**5 + 
     *        996055*k1**9*k2**7*k3**5 - 
     *        277120*k1**8*k2**8*k3**5 + 
     *        996055*k1**7*k2**9*k3**5 + 
     *        678640*k1**6*k2**10*k3**5 - 
     *        1044035*k1**5*k2**11*k3**5 - 
     *        526720*k1**4*k2**12*k3**5 - 
     *        75520*k1**3*k2**13*k3**5 + 
     *        17620*k1**13*k2**2*k3**6 - 
     *        62150*k1**12*k2**3*k3**6 - 
     *        775494*k1**11*k2**4*k3**6 + 
     *        1184316*k1**10*k2**5*k3**6 - 
     *        3218856*k1**9*k2**6*k3**6 + 
     *        3247494*k1**8*k2**7*k3**6 + 
     *        3247494*k1**7*k2**8*k3**6 - 
     *        3218856*k1**6*k2**9*k3**6 + 
     *        1184316*k1**5*k2**10*k3**6 - 
     *        775494*k1**4*k2**11*k3**6 - 
     *        62150*k1**3*k2**12*k3**6 + 
     *        17620*k1**2*k2**13*k3**6 - 
     *        9420*k1**11*k2**3*k3**7 + 
     *        497280*k1**10*k2**4*k3**7 - 
     *        2321380*k1**9*k2**5*k3**7 - 
     *        1776880*k1**8*k2**6*k3**7 + 
     *        7714120*k1**7*k2**7*k3**7 - 
     *        1776880*k1**6*k2**8*k3**7 - 
     *        2321380*k1**5*k2**9*k3**7 + 
     *        497280*k1**4*k2**10*k3**7 - 
     *        9420*k1**3*k2**11*k3**7 - 
     *        8490*k1**11*k2**2*k3**8 + 
     *        28590*k1**10*k2**3*k3**8 + 
     *        160976*k1**9*k2**4*k3**8 - 
     *        4777404*k1**8*k2**5*k3**8 + 
     *        3553162*k1**7*k2**6*k3**8 + 
     *        3553162*k1**6*k2**7*k3**8 - 
     *        4777404*k1**5*k2**8*k3**8 + 
     *        160976*k1**4*k2**9*k3**8 + 
     *        28590*k1**3*k2**10*k3**8 - 
     *        8490*k1**2*k2**11*k3**8 + 
     *        140900*k1**9*k2**3*k3**9 + 
     *        36800*k1**8*k2**4*k3**9 + 
     *        1228180*k1**7*k2**5*k3**9 + 
     *        5140880*k1**6*k2**6*k3**9 + 
     *        1228180*k1**5*k2**7*k3**9 + 
     *        36800*k1**4*k2**8*k3**9 + 
     *        140900*k1**3*k2**9*k3**9 - 
     *        35880*k1**9*k2**2*k3**10 + 
     *        85510*k1**8*k2**3*k3**10 + 
     *        854338*k1**7*k2**4*k3**10 + 
     *        4317688*k1**6*k2**5*k3**10 + 
     *        4317688*k1**5*k2**6*k3**10 + 
     *        854338*k1**4*k2**7*k3**10 + 
     *        85510*k1**3*k2**8*k3**10 - 
     *        35880*k1**2*k2**9*k3**10 - 
     *        40960*k1**7*k2**3*k3**11 + 
     *        232640*k1**6*k2**4*k3**11 + 
     *        2972640*k1**5*k2**5*k3**11 + 
     *        232640*k1**4*k2**6*k3**11 - 
     *        40960*k1**3*k2**7*k3**11 + 
     *        26750*k1**7*k2**2*k3**12 - 
     *        39950*k1**6*k2**3*k3**12 + 
     *        146900*k1**5*k2**4*k3**12 + 
     *        146900*k1**4*k2**5*k3**12 - 
     *        39950*k1**3*k2**6*k3**12 + 
     *        26750*k1**2*k2**7*k3**12)*pi*q**7 
c
      kernel_poly(7) = - (1890*k1**13*k2**7 - 1890*k1**11*k2**9 - 
     *        1890*k1**9*k2**11 + 1890*k1**7*k2**13 - 
     *        3240*k1**13*k2**6*k3 + 1290*k1**12*k2**7*k3 - 
     *        3450*k1**11*k2**8*k3 + 2880*k1**10*k2**9*k3 + 
     *        2880*k1**9*k2**10*k3 - 3450*k1**8*k2**11*k3 + 
     *        1290*k1**7*k2**12*k3 - 3240*k1**6*k2**13*k3 + 
     *        17960*k1**13*k2**5*k3**2 - 
     *        52440*k1**12*k2**6*k3**2 + 
     *        123415*k1**11*k2**7*k3**2 + 
     *        27240*k1**10*k2**8*k3**2 - 
     *        320340*k1**9*k2**9*k3**2 + 
     *        27240*k1**8*k2**10*k3**2 + 
     *        123415*k1**7*k2**11*k3**2 - 
     *        52440*k1**6*k2**12*k3**2 + 
     *        17960*k1**5*k2**13*k3**2 - 
     *        247700*k1**13*k2**4*k3**3 - 
     *        24200*k1**12*k2**5*k3**3 + 
     *        1363150*k1**11*k2**6*k3**3 + 
     *        1537010*k1**10*k2**7*k3**3 - 
     *        2744740*k1**9*k2**8*k3**3 - 
     *        2744740*k1**8*k2**9*k3**3 + 
     *        1537010*k1**7*k2**10*k3**3 + 
     *        1363150*k1**6*k2**11*k3**3 - 
     *        24200*k1**5*k2**12*k3**3 - 
     *        247700*k1**4*k2**13*k3**3 - 
     *        153490*k1**13*k2**3*k3**4 - 
     *        1092640*k1**12*k2**4*k3**4 - 
     *        167790*k1**11*k2**5*k3**4 + 
     *        5623360*k1**10*k2**6*k3**4 + 
     *        210170*k1**9*k2**7*k3**4 - 
     *        8897920*k1**8*k2**8*k3**4 + 
     *        210170*k1**7*k2**9*k3**4 + 
     *        5623360*k1**6*k2**10*k3**4 - 
     *        167790*k1**5*k2**11*k3**4 - 
     *        1092640*k1**4*k2**12*k3**4 - 
     *        153490*k1**3*k2**13*k3**4 + 
     *        88100*k1**13*k2**2*k3**5 - 
     *        304030*k1**12*k2**3*k3**5 - 
     *        2145710*k1**11*k2**4*k3**5 + 
     *        42060*k1**10*k2**5*k3**5 - 
     *        1973880*k1**9*k2**6*k3**5 + 
     *        4478830*k1**8*k2**7*k3**5 + 
     *        4478830*k1**7*k2**8*k3**5 - 
     *        1973880*k1**6*k2**9*k3**5 + 
     *        42060*k1**5*k2**10*k3**5 - 
     *        2145710*k1**4*k2**11*k3**5 - 
     *        304030*k1**3*k2**12*k3**5 + 
     *        88100*k1**2*k2**13*k3**5 + 1320*k1**13*k2*k3**6 + 
     *        70480*k1**12*k2**2*k3**6 - 
     *        170031*k1**11*k2**3*k3**6 - 
     *        177256*k1**10*k2**4*k3**6 - 
     *        6624214*k1**9*k2**5*k3**6 - 
     *        51184*k1**8*k2**6*k3**6 + 
     *        15492290*k1**7*k2**7*k3**6 - 
     *        51184*k1**6*k2**8*k3**6 - 
     *        6624214*k1**5*k2**9*k3**6 - 
     *        177256*k1**4*k2**10*k3**6 - 
     *        170031*k1**3*k2**11*k3**6 + 
     *        70480*k1**2*k2**12*k3**6 + 1320*k1*k2**13*k3**6 - 
     *        42450*k1**11*k2**2*k3**7 + 
     *        250470*k1**10*k2**3*k3**7 - 
     *        919080*k1**9*k2**4*k3**7 - 
     *        6761020*k1**8*k2**5*k3**7 + 
     *        12196890*k1**7*k2**6*k3**7 + 
     *        12196890*k1**6*k2**7*k3**7 - 
     *        6761020*k1**5*k2**8*k3**7 - 
     *        919080*k1**4*k2**9*k3**7 + 
     *        250470*k1**3*k2**10*k3**7 - 
     *        42450*k1**2*k2**11*k3**7 - 3960*k1**11*k2*k3**8 - 
     *        33960*k1**10*k2**2*k3**8 + 
     *        239744*k1**9*k2**3*k3**8 + 
     *        99664*k1**8*k2**4*k3**8 + 
     *        2920008*k1**7*k2**5*k3**8 + 
     *        10965088*k1**6*k2**6*k3**8 + 
     *        2920008*k1**5*k2**7*k3**8 + 
     *        99664*k1**4*k2**8*k3**8 + 
     *        239744*k1**3*k2**9*k3**8 - 
     *        33960*k1**2*k2**10*k3**8 - 3960*k1*k2**11*k3**8 - 
     *        179400*k1**9*k2**2*k3**9 + 
     *        326750*k1**8*k2**3*k3**9 + 
     *        2712170*k1**7*k2**4*k3**9 + 
     *        6900120*k1**6*k2**5*k3**9 + 
     *        6900120*k1**5*k2**6*k3**9 + 
     *        2712170*k1**4*k2**7*k3**9 + 
     *        326750*k1**3*k2**8*k3**9 - 
     *        179400*k1**2*k2**9*k3**9 + 3960*k1**9*k2*k3**10 - 
     *        143520*k1**8*k2**2*k3**10 + 
     *        172612*k1**7*k2**3*k3**10 + 
     *        1340952*k1**6*k2**4*k3**10 + 
     *        6525632*k1**5*k2**5*k3**10 + 
     *        1340952*k1**4*k2**6*k3**10 + 
     *        172612*k1**3*k2**7*k3**10 - 
     *        143520*k1**2*k2**8*k3**10 + 
     *        3960*k1*k2**9*k3**10 + 
     *        133750*k1**7*k2**2*k3**11 - 
     *        213190*k1**6*k2**3*k3**11 + 
     *        653860*k1**5*k2**4*k3**11 + 
     *        653860*k1**4*k2**5*k3**11 - 
     *        213190*k1**3*k2**6*k3**11 + 
     *        133750*k1**2*k2**7*k3**11 - 
     *        1320*k1**7*k2*k3**12 + 
     *        107000*k1**6*k2**2*k3**12 - 
     *        44680*k1**5*k2**3*k3**12 - 
     *        79120*k1**4*k2**4*k3**12 - 
     *        44680*k1**3*k2**5*k3**12 + 
     *        107000*k1**2*k2**6*k3**12 - 1320*k1*k2**7*k3**12)*
     *      pi*q**8 
c
      kernel_poly(8) = - (7560*k1**13*k2**6 + 7560*k1**12*k2**7 - 
     *        7560*k1**11*k2**8 - 7560*k1**10*k2**9 - 
     *        7560*k1**9*k2**10 - 7560*k1**8*k2**11 + 
     *        7560*k1**7*k2**12 + 7560*k1**6*k2**13 + 
     *        2080*k1**13*k2**5*k3 - 14520*k1**12*k2**6*k3 + 
     *        29219*k1**11*k2**7*k3 + 9480*k1**10*k2**8*k3 - 
     *        69108*k1**9*k2**9*k3 + 9480*k1**8*k2**10*k3 + 
     *        29219*k1**7*k2**11*k3 - 14520*k1**6*k2**12*k3 + 
     *        2080*k1**5*k2**13*k3 - 
     *        111810*k1**13*k2**4*k3**2 + 
     *        60140*k1**12*k2**5*k3**2 + 
     *        761210*k1**11*k2**6*k3**2 + 
     *        693210*k1**10*k2**7*k3**2 - 
     *        1464910*k1**9*k2**8*k3**2 - 
     *        1464910*k1**8*k2**9*k3**2 + 
     *        693210*k1**7*k2**10*k3**2 + 
     *        761210*k1**6*k2**11*k3**2 + 
     *        60140*k1**5*k2**12*k3**2 - 
     *        111810*k1**4*k2**13*k3**2 - 
     *        148100*k1**13*k2**3*k3**3 - 
     *        1006400*k1**12*k2**4*k3**3 + 
     *        890980*k1**11*k2**5*k3**3 + 
     *        7581120*k1**10*k2**6*k3**3 - 
     *        860736*k1**9*k2**7*k3**3 - 
     *        12815680*k1**8*k2**8*k3**3 - 
     *        860736*k1**7*k2**9*k3**3 + 
     *        7581120*k1**6*k2**10*k3**3 + 
     *        890980*k1**5*k2**11*k3**3 - 
     *        1006400*k1**4*k2**12*k3**3 - 
     *        148100*k1**3*k2**13*k3**3 + 
     *        176200*k1**13*k2**2*k3**4 - 
     *        617860*k1**12*k2**3*k3**4 - 
     *        2892730*k1**11*k2**4*k3**4 + 
     *        2872540*k1**10*k2**5*k3**4 + 
     *        5549560*k1**9*k2**6*k3**4 - 
     *        5158310*k1**8*k2**7*k3**4 - 
     *        5158310*k1**7*k2**8*k3**4 + 
     *        5549560*k1**6*k2**9*k3**4 + 
     *        2872540*k1**5*k2**10*k3**4 - 
     *        2892730*k1**4*k2**11*k3**4 - 
     *        617860*k1**3*k2**12*k3**4 + 
     *        176200*k1**2*k2**13*k3**4 + 
     *        6600*k1**13*k2*k3**5 + 
     *        352400*k1**12*k2**2*k3**5 - 
     *        669515*k1**11*k2**3*k3**5 - 
     *        3314440*k1**10*k2**4*k3**5 - 
     *        9751110*k1**9*k2**5*k3**5 + 
     *        3005520*k1**8*k2**6*k3**5 + 
     *        21270302*k1**7*k2**7*k3**5 + 
     *        3005520*k1**6*k2**8*k3**5 - 
     *        9751110*k1**5*k2**9*k3**5 - 
     *        3314440*k1**4*k2**10*k3**5 - 
     *        669515*k1**3*k2**11*k3**5 + 
     *        352400*k1**2*k2**12*k3**5 + 
     *        6600*k1*k2**13*k3**5 - 1650*k1**13*k3**6 + 
     *        5280*k1**12*k2*k3**6 + 29370*k1**11*k2**2*k3**6 + 
     *        223406*k1**10*k2**3*k3**6 - 
     *        5220834*k1**9*k2**4*k3**6 - 
     *        12210506*k1**8*k2**5*k3**6 + 
     *        21277214*k1**7*k2**6*k3**6 + 
     *        21277214*k1**6*k2**7*k3**6 - 
     *        12210506*k1**5*k2**8*k3**6 - 
     *        5220834*k1**4*k2**9*k3**6 + 
     *        223406*k1**3*k2**10*k3**6 + 
     *        29370*k1**2*k2**11*k3**6 + 5280*k1*k2**12*k3**6 - 
     *        1650*k2**13*k3**6 - 19800*k1**11*k2*k3**7 - 
     *        169800*k1**10*k2**2*k3**7 + 
     *        132630*k1**9*k2**3*k3**7 - 
     *        968720*k1**8*k2**4*k3**7 + 
     *        6613430*k1**7*k2**5*k3**7 + 
     *        20362400*k1**6*k2**6*k3**7 + 
     *        6613430*k1**5*k2**7*k3**7 - 
     *        968720*k1**4*k2**8*k3**7 + 
     *        132630*k1**3*k2**9*k3**7 - 
     *        169800*k1**2*k2**10*k3**7 - 
     *        19800*k1*k2**11*k3**7 + 4950*k1**11*k3**8 - 
     *        15840*k1**10*k2*k3**8 - 
     *        422880*k1**9*k2**2*k3**8 + 
     *        696766*k1**8*k2**3*k3**8 + 
     *        6378946*k1**7*k2**4*k3**8 + 
     *        10355772*k1**6*k2**5*k3**8 + 
     *        10355772*k1**5*k2**6*k3**8 + 
     *        6378946*k1**4*k2**7*k3**8 + 
     *        696766*k1**3*k2**8*k3**8 - 
     *        422880*k1**2*k2**9*k3**8 - 
     *        15840*k1*k2**10*k3**8 + 4950*k2**11*k3**8 + 
     *        19800*k1**9*k2*k3**9 - 717600*k1**8*k2**2*k3**9 + 
     *        1015880*k1**7*k2**3*k3**9 + 
     *        4061880*k1**6*k2**4*k3**9 + 
     *        7692880*k1**5*k2**5*k3**9 + 
     *        4061880*k1**4*k2**6*k3**9 + 
     *        1015880*k1**3*k2**7*k3**9 - 
     *        717600*k1**2*k2**8*k3**9 + 19800*k1*k2**9*k3**9 - 
     *        4950*k1**9*k3**10 + 15840*k1**8*k2*k3**10 + 
     *        56810*k1**7*k2**2*k3**10 - 
     *        146202*k1**6*k2**3*k3**10 + 
     *        1614238*k1**5*k2**4*k3**10 + 
     *        1614238*k1**4*k2**5*k3**10 - 
     *        146202*k1**3*k2**6*k3**10 + 
     *        56810*k1**2*k2**7*k3**10 + 
     *        15840*k1*k2**8*k3**10 - 4950*k2**9*k3**10 - 
     *        6600*k1**7*k2*k3**11 + 
     *        535000*k1**6*k2**2*k3**11 - 
     *        243560*k1**5*k2**3*k3**11 - 
     *        449360*k1**4*k2**4*k3**11 - 
     *        243560*k1**3*k2**5*k3**11 + 
     *        535000*k1**2*k2**6*k3**11 - 
     *        6600*k1*k2**7*k3**11 + 1650*k1**7*k3**12 - 
     *        5280*k1**6*k2*k3**12 + 
     *        160500*k1**5*k2**2*k3**12 - 
     *        74050*k1**4*k2**3*k3**12 - 
     *        74050*k1**3*k2**4*k3**12 + 
     *        160500*k1**2*k2**5*k3**12 - 
     *        5280*k1*k2**6*k3**12 + 1650*k2**7*k3**12)*pi*q**9 
c
      kernel_poly(9) = - (11340*k1**13*k2**5 + 30240*k1**12*k2**6 + 
     *        7560*k1**11*k2**7 - 30240*k1**10*k2**8 - 
     *        37800*k1**9*k2**9 - 30240*k1**8*k2**10 + 
     *        7560*k1**7*k2**11 + 30240*k1**6*k2**12 + 
     *        11340*k1**5*k2**13 - 23370*k1**13*k2**4*k3 + 
     *        5980*k1**12*k2**5*k3 + 165346*k1**11*k2**6*k3 + 
     *        161826*k1**10*k2**7*k3 - 318182*k1**9*k2**8*k3 - 
     *        318182*k1**8*k2**9*k3 + 161826*k1**7*k2**10*k3 + 
     *        165346*k1**6*k2**11*k3 + 5980*k1**5*k2**12*k3 - 
     *        23370*k1**4*k2**13*k3 - 
     *        71040*k1**13*k2**3*k3**2 - 
     *        455040*k1**12*k2**4*k3**2 + 
     *        550615*k1**11*k2**5*k3**2 + 
     *        3753040*k1**10*k2**6*k3**2 - 
     *        564205*k1**9*k2**7*k3**2 - 
     *        6491840*k1**8*k2**8*k3**2 - 
     *        564205*k1**7*k2**9*k3**2 + 
     *        3753040*k1**6*k2**10*k3**2 + 
     *        550615*k1**5*k2**11*k3**2 - 
     *        455040*k1**4*k2**12*k3**2 - 
     *        71040*k1**3*k2**13*k3**2 + 
     *        176200*k1**13*k2**2*k3**3 - 
     *        596300*k1**12*k2**3*k3**3 - 
     *        2147570*k1**11*k2**4*k3**3 + 
     *        5077700*k1**10*k2**5*k3**3 + 
     *        8782136*k1**9*k2**6*k3**3 - 
     *        11102334*k1**8*k2**7*k3**3 - 
     *        11102334*k1**7*k2**8*k3**3 + 
     *        8782136*k1**6*k2**9*k3**3 + 
     *        5077700*k1**5*k2**10*k3**3 - 
     *        2147570*k1**4*k2**11*k3**3 - 
     *        596300*k1**3*k2**12*k3**3 + 
     *        176200*k1**2*k2**13*k3**3 + 
     *        13200*k1**13*k2*k3**4 + 
     *        704800*k1**12*k2**2*k3**4 - 
     *        1083970*k1**11*k2**3*k3**4 - 
     *        4295920*k1**10*k2**4*k3**4 - 
     *        2739060*k1**9*k2**5*k3**4 + 
     *        3742480*k1**8*k2**6*k3**4 + 
     *        7087420*k1**7*k2**7*k3**4 + 
     *        3742480*k1**6*k2**8*k3**4 - 
     *        2739060*k1**5*k2**9*k3**4 - 
     *        4295920*k1**4*k2**10*k3**4 - 
     *        1083970*k1**3*k2**11*k3**4 + 
     *        704800*k1**2*k2**12*k3**4 + 
     *        13200*k1*k2**13*k3**4 - 8250*k1**13*k3**5 + 
     *        26400*k1**12*k2*k3**5 + 
     *        486450*k1**11*k2**2*k3**5 - 
     *        499210*k1**10*k2**3*k3**5 - 
     *        10832010*k1**9*k2**4*k3**5 - 
     *        14846930*k1**8*k2**5*k3**5 + 
     *        26272038*k1**7*k2**6*k3**5 + 
     *        26272038*k1**6*k2**7*k3**5 - 
     *        14846930*k1**5*k2**8*k3**5 - 
     *        10832010*k1**4*k2**9*k3**5 - 
     *        499210*k1**3*k2**10*k3**5 + 
     *        486450*k1**2*k2**11*k3**5 + 
     *        26400*k1*k2**12*k3**5 - 8250*k2**13*k3**5 - 
     *        6600*k1**12*k3**6 - 31680*k1**11*k2*k3**6 - 
     *        234920*k1**10*k2**2*k3**6 - 
     *        751176*k1**9*k2**3*k3**6 - 
     *        6669816*k1**8*k2**4*k3**6 + 
     *        5171611*k1**7*k2**5*k3**6 + 
     *        26593952*k1**6*k2**6*k3**6 + 
     *        5171611*k1**5*k2**7*k3**6 - 
     *        6669816*k1**4*k2**8*k3**6 - 
     *        751176*k1**3*k2**9*k3**6 - 
     *        234920*k1**2*k2**10*k3**6 - 
     *        31680*k1*k2**11*k3**6 - 6600*k2**12*k3**6 + 
     *        24750*k1**11*k3**7 - 79200*k1**10*k2*k3**7 - 
     *        679200*k1**9*k2**2*k3**7 + 
     *        576670*k1**8*k2**3*k3**7 + 
     *        9226330*k1**7*k2**4*k3**7 + 
     *        13067380*k1**6*k2**5*k3**7 + 
     *        13067380*k1**5*k2**6*k3**7 + 
     *        9226330*k1**4*k2**7*k3**7 + 
     *        576670*k1**3*k2**8*k3**7 - 
     *        679200*k1**2*k2**9*k3**7 - 
     *        79200*k1*k2**10*k3**7 + 24750*k2**11*k3**7 + 
     *        19800*k1**10*k3**8 + 15840*k1**9*k2*k3**8 - 
     *        1521720*k1**8*k2**2*k3**8 + 
     *        2498524*k1**7*k2**3*k3**8 + 
     *        8238064*k1**6*k2**4*k3**8 + 
     *        6830568*k1**5*k2**5*k3**8 + 
     *        8238064*k1**4*k2**6*k3**8 + 
     *        2498524*k1**3*k2**7*k3**8 - 
     *        1521720*k1**2*k2**8*k3**8 + 
     *        15840*k1*k2**9*k3**8 + 19800*k2**10*k3**8 - 
     *        24750*k1**9*k3**9 + 79200*k1**8*k2*k3**9 - 
     *        785950*k1**7*k2**2*k3**9 + 
     *        779070*k1**6*k2**3*k3**9 + 
     *        2171670*k1**5*k2**4*k3**9 + 
     *        2171670*k1**4*k2**5*k3**9 + 
     *        779070*k1**3*k2**6*k3**9 - 
     *        785950*k1**2*k2**7*k3**9 + 79200*k1*k2**8*k3**9 - 
     *        24750*k2**9*k3**9 - 19800*k1**8*k3**10 + 
     *        10560*k1**7*k2*k3**10 + 
     *        944840*k1**6*k2**2*k3**10 - 
     *        397988*k1**5*k2**3*k3**10 - 
     *        857488*k1**4*k2**4*k3**10 - 
     *        397988*k1**3*k2**5*k3**10 + 
     *        944840*k1**2*k2**6*k3**10 + 
     *        10560*k1*k2**7*k3**10 - 19800*k2**8*k3**10 + 
     *        8250*k1**7*k3**11 - 26400*k1**6*k2*k3**11 + 
     *        802500*k1**5*k2**2*k3**11 - 
     *        383690*k1**4*k2**3*k3**11 - 
     *        383690*k1**3*k2**4*k3**11 + 
     *        802500*k1**2*k2**5*k3**11 - 
     *        26400*k1*k2**6*k3**11 + 8250*k2**7*k3**11 + 
     *        6600*k1**6*k3**12 - 7920*k1**5*k2*k3**12 + 
     *        107000*k1**4*k2**2*k3**12 - 
     *        32080*k1**3*k2**3*k3**12 + 
     *        107000*k1**2*k2**4*k3**12 - 
     *        7920*k1*k2**5*k3**12 + 6600*k2**6*k3**12)*pi*q**10
c
      kernel_poly(10) = - (7560*k1**13*k2**4 + 45360*k1**12*k2**5 + 
     *        68040*k1**11*k2**6 - 7560*k1**10*k2**7 - 
     *        113400*k1**9*k2**8 - 113400*k1**8*k2**9 - 
     *        7560*k1**7*k2**10 + 68040*k1**6*k2**11 + 
     *        45360*k1**5*k2**12 + 7560*k1**4*k2**13 - 
     *        14460*k1**13*k2**3*k3 - 95040*k1**12*k2**4*k3 + 
     *        128519*k1**11*k2**5*k3 + 823184*k1**10*k2**6*k3 - 
     *        123929*k1**9*k2**7*k3 - 1419328*k1**8*k2**8*k3 - 
     *        123929*k1**7*k2**9*k3 + 823184*k1**6*k2**10*k3 + 
     *        128519*k1**5*k2**11*k3 - 95040*k1**4*k2**12*k3 - 
     *        14460*k1**3*k2**13*k3 + 
     *        88100*k1**13*k2**2*k3**2 - 
     *        286110*k1**12*k2**3*k3**2 - 
     *        997650*k1**11*k2**4*k3**2 + 
     *        2425260*k1**10*k2**5*k3**2 + 
     *        4431420*k1**9*k2**6*k3**2 - 
     *        5733260*k1**8*k2**7*k3**2 - 
     *        5733260*k1**7*k2**8*k3**2 + 
     *        4431420*k1**6*k2**9*k3**2 + 
     *        2425260*k1**5*k2**10*k3**2 - 
     *        997650*k1**4*k2**11*k3**2 - 
     *        286110*k1**3*k2**12*k3**2 + 
     *        88100*k1**2*k2**13*k3**2 + 
     *        13200*k1**13*k2*k3**3 + 
     *        704800*k1**12*k2**2*k3**3 - 
     *        922910*k1**11*k2**3*k3**3 - 
     *        2668560*k1**10*k2**4*k3**3 + 
     *        3559664*k1**9*k2**5*k3**3 + 
     *        2122384*k1**8*k2**6*k3**3 - 
     *        5531852*k1**7*k2**7*k3**3 + 
     *        2122384*k1**6*k2**8*k3**3 + 
     *        3559664*k1**5*k2**9*k3**3 - 
     *        2668560*k1**4*k2**10*k3**3 - 
     *        922910*k1**3*k2**11*k3**3 + 
     *        704800*k1**2*k2**12*k3**3 + 
     *        13200*k1*k2**13*k3**3 - 16500*k1**13*k3**4 + 
     *        52800*k1**12*k2*k3**4 + 
     *        1100250*k1**11*k2**2*k3**4 - 
     *        793630*k1**10*k2**3*k3**4 - 
     *        9829740*k1**9*k2**4*k3**4 - 
     *        7620480*k1**8*k2**5*k3**4 + 
     *        17313180*k1**7*k2**6*k3**4 + 
     *        17313180*k1**6*k2**7*k3**4 - 
     *        7620480*k1**5*k2**8*k3**4 - 
     *        9829740*k1**4*k2**9*k3**4 - 
     *        793630*k1**3*k2**10*k3**4 + 
     *        1100250*k1**2*k2**11*k3**4 + 
     *        52800*k1*k2**12*k3**4 - 16500*k2**13*k3**4 - 
     *        33000*k1**12*k3**5 + 183800*k1**10*k2**2*k3**5 - 
     *        1947900*k1**9*k2**3*k3**5 - 
     *        12175000*k1**8*k2**4*k3**5 + 
     *        2185307*k1**7*k2**5*k3**5 + 
     *        27906272*k1**6*k2**6*k3**5 + 
     *        2185307*k1**5*k2**7*k3**5 - 
     *        12175000*k1**4*k2**8*k3**5 - 
     *        1947900*k1**3*k2**9*k3**5 + 
     *        183800*k1**2*k2**10*k3**5 - 33000*k2**12*k3**5 + 
     *        39600*k1**11*k3**6 - 153120*k1**10*k2*k3**6 - 
     *        751280*k1**9*k2**2*k3**6 - 
     *        927804*k1**8*k2**3*k3**6 + 
     *        5725916*k1**7*k2**4*k3**6 + 
     *        10132748*k1**6*k2**5*k3**6 + 
     *        10132748*k1**5*k2**6*k3**6 + 
     *        5725916*k1**4*k2**7*k3**6 - 
     *        927804*k1**3*k2**8*k3**6 - 
     *        751280*k1**2*k2**9*k3**6 - 
     *        153120*k1*k2**10*k3**6 + 39600*k2**11*k3**6 + 
     *        99000*k1**10*k3**7 - 79200*k1**9*k2*k3**7 - 
     *        1867800*k1**8*k2**2*k3**7 + 
     *        3363040*k1**7*k2**3*k3**7 + 
     *        10183760*k1**6*k2**4*k3**7 + 
     *        5740240*k1**5*k2**5*k3**7 + 
     *        10183760*k1**4*k2**6*k3**7 + 
     *        3363040*k1**3*k2**7*k3**7 - 
     *        1867800*k1**2*k2**8*k3**7 - 
     *        79200*k1*k2**9*k3**7 + 99000*k2**10*k3**7 - 
     *        19800*k1**9*k3**8 + 142560*k1**8*k2*k3**8 - 
     *        2060480*k1**7*k2**2*k3**8 + 
     *        2416336*k1**6*k2**3*k3**8 + 
     *        2380116*k1**5*k2**4*k3**8 + 
     *        2380116*k1**4*k2**5*k3**8 + 
     *        2416336*k1**3*k2**6*k3**8 - 
     *        2060480*k1**2*k2**7*k3**8 + 
     *        142560*k1*k2**8*k3**8 - 19800*k2**9*k3**8 - 
     *        99000*k1**8*k3**9 + 105600*k1**7*k2*k3**9 + 
     *        444200*k1**6*k2**2*k3**9 - 
     *        208620*k1**5*k2**3*k3**9 - 
     *        1071120*k1**4*k2**4*k3**9 - 
     *        208620*k1**3*k2**5*k3**9 + 
     *        444200*k1**2*k2**6*k3**9 + 
     *        105600*k1*k2**7*k3**9 - 99000*k2**8*k3**9 - 
     *        13200*k1**7*k3**10 - 36960*k1**6*k2*k3**10 + 
     *        1596660*k1**5*k2**2*k3**10 - 
     *        759322*k1**4*k2**3*k3**10 - 
     *        759322*k1**3*k2**4*k3**10 + 
     *        1596660*k1**2*k2**5*k3**10 - 
     *        36960*k1*k2**6*k3**10 - 13200*k2**7*k3**10 + 
     *        33000*k1**6*k3**11 - 39600*k1**5*k2*k3**11 + 
     *        535000*k1**4*k2**2*k3**11 - 
     *        163760*k1**3*k2**3*k3**11 + 
     *        535000*k1**2*k2**4*k3**11 - 
     *        39600*k1*k2**5*k3**11 + 33000*k2**6*k3**11 + 
     *        9900*k1**5*k3**12 - 5280*k1**4*k2*k3**12 + 
     *        26750*k1**3*k2**2*k3**12 + 
     *        26750*k1**2*k2**3*k3**12 - 5280*k1*k2**4*k3**12 + 
     *        9900*k2**5*k3**12)*pi*q**11 
c
      kernel_poly(11) = - (1890*k1**13*k2**3 + 30240*k1**12*k2**4 + 
     *     111510*k1**11*k2**5 + 120960*k1**10*k2**6 - 
     *     113400*k1**9*k2**7 - 302400*k1**8*k2**8 - 
     *     113400*k1**7*k2**9 + 120960*k1**6*k2**10 + 
     *        111510*k1**5*k2**11 + 30240*k1**4*k2**12 + 
     *        1890*k1**3*k2**13 + 17620*k1**13*k2**2*k3 - 
     *        58230*k1**12*k2**3*k3 - 187434*k1**11*k2**4*k3 + 
     *        588876*k1**10*k2**5*k3 + 971964*k1**9*k2**6*k3 - 
     *        1310956*k1**8*k2**7*k3 - 1310956*k1**7*k2**8*k3 + 
     *        971964*k1**6*k2**9*k3 + 588876*k1**5*k2**10*k3 - 
     *        187434*k1**4*k2**11*k3 - 58230*k1**3*k2**12*k3 + 
     *        17620*k1**2*k2**13*k3 + 6600*k1**13*k2*k3**2 + 
     *        352400*k1**12*k2**2*k3**2 - 
     *        445575*k1**11*k2**3*k3**2 - 
     *        1385800*k1**10*k2**4*k3**2 + 
     *        1928930*k1**9*k2**5*k3**2 + 
     *        964520*k1**8*k2**6*k3**2 - 
     *        3391090*k1**7*k2**7*k3**2 + 
     *        964520*k1**6*k2**8*k3**2 + 
     *        1928930*k1**5*k2**9*k3**2 - 
     *        1385800*k1**4*k2**10*k3**2 - 
     *        445575*k1**3*k2**11*k3**2 + 
     *        352400*k1**2*k2**12*k3**2 + 
     *        6600*k1*k2**13*k3**2 - 16500*k1**13*k3**3 + 
     *        52800*k1**12*k2*k3**3 + 
     *        1134210*k1**11*k2**2*k3**3 - 
     *        487710*k1**10*k2**3*k3**3 - 
     *        5309324*k1**9*k2**4*k3**3 - 
     *        1299384*k1**8*k2**5*k3**3 + 
     *        5759772*k1**7*k2**6*k3**3 + 
     *        5759772*k1**6*k2**7*k3**3 - 
     *        1299384*k1**5*k2**8*k3**3 - 
     *        5309324*k1**4*k2**9*k3**3 - 
     *        487710*k1**3*k2**10*k3**3 + 
     *        1134210*k1**2*k2**11*k3**3 + 
     *        52800*k1*k2**12*k3**3 - 16500*k2**13*k3**3 - 
     *        66000*k1**12*k3**4 + 59400*k1**11*k2*k3**4 + 
     *        877000*k1**10*k2**2*k3**4 - 
     *        1579860*k1**9*k2**3*k3**4 - 
     *        9721920*k1**8*k2**4*k3**4 + 
     *        1700020*k1**7*k2**5*k3**4 + 
     *        19389520*k1**6*k2**6*k3**4 + 
     *        1700020*k1**5*k2**7*k3**4 - 
     *        9721920*k1**4*k2**8*k3**4 - 
     *        1579860*k1**3*k2**9*k3**4 + 
     *        877000*k1**2*k2**10*k3**4 + 
     *        59400*k1*k2**11*k3**4 - 66000*k2**12*k3**4 - 
     *        132000*k1**10*k2*k3**5 - 
     *        332080*k1**9*k2**2*k3**5 - 
     *        2339740*k1**8*k2**3*k3**5 + 
     *        249708*k1**7*k2**4*k3**5 + 
     *        6091308*k1**6*k2**5*k3**5 + 
     *        6091308*k1**5*k2**6*k3**5 + 
     *        249708*k1**4*k2**7*k3**5 - 
     *        2339740*k1**3*k2**8*k3**5 - 
     *        332080*k1**2*k2**9*k3**5 - 
     *        132000*k1*k2**10*k3**5 + 191400*k1**10*k3**6 - 
     *        216480*k1**9*k2*k3**6 - 
     *        1548600*k1**8*k2**2*k3**6 + 
     *        2170529*k1**7*k2**3*k3**6 + 
     *        6524680*k1**6*k2**4*k3**6 + 
     *        3526352*k1**5*k2**5*k3**6 + 
     *        6524680*k1**4*k2**6*k3**6 + 
     *        2170529*k1**3*k2**7*k3**6 - 
     *        1548600*k1**2*k2**8*k3**6 - 
     *        216480*k1*k2**9*k3**6 + 191400*k2**10*k3**6 + 
     *        99000*k1**9*k3**7 + 79200*k1**8*k2*k3**7 - 
     *        2516800*k1**7*k2**2*k3**7 + 
     *        3182120*k1**6*k2**3*k3**7 + 
     *        2178220*k1**5*k2**4*k3**7 + 
     *        2178220*k1**4*k2**5*k3**7 + 
     *        3182120*k1**3*k2**6*k3**7 - 
     *        2516800*k1**2*k2**7*k3**7 + 
     *        79200*k1*k2**8*k3**7 + 99000*k2**9*k3**7 - 
     *        178200*k1**8*k3**8 + 227040*k1**7*k2*k3**8 - 
     *        769160*k1**6*k2**2*k3**8 + 
     *        321984*k1**5*k2**3*k3**8 - 
     *        983360*k1**4*k2**4*k3**8 + 
     *        321984*k1**3*k2**5*k3**8 - 
     *        769160*k1**2*k2**6*k3**8 + 
     *        227040*k1*k2**7*k3**8 - 178200*k2**8*k3**8 - 
     *        132000*k1**7*k3**9 + 26400*k1**6*k2*k3**9 + 
     *        1563300*k1**5*k2**2*k3**9 - 
     *        821730*k1**4*k2**3*k3**9 - 
     *        821730*k1**3*k2**4*k3**9 + 
     *        1563300*k1**2*k2**5*k3**9 + 
     *        26400*k1*k2**6*k3**9 - 132000*k2**7*k3**9 + 
     *        46200*k1**6*k3**10 - 75240*k1**5*k2*k3**10 + 
     *        1088360*k1**4*k2**2*k3**10 - 
     *        326068*k1**3*k2**3*k3**10 + 
     *        1088360*k1**2*k2**4*k3**10 - 
     *        75240*k1*k2**5*k3**10 + 46200*k2**6*k3**10 + 
     *        49500*k1**5*k3**11 - 26400*k1**4*k2*k3**11 + 
     *        133750*k1**3*k2**2*k3**11 + 
     *        133750*k1**2*k2**3*k3**11 - 
     *        26400*k1*k2**4*k3**11 + 49500*k2**5*k3**11 + 
     *        6600*k1**4*k3**12 - 1320*k1**3*k2*k3**12 - 
     *        1320*k1*k2**3*k3**12 + 6600*k2**4*k3**12)*pi*q**12
c
      kernel_poly(12) = - (7560*k1**12*k2**3 + 75600*k1**11*k2**4 + 
     *     219240*k1**10*k2**5 + 83160*k1**9*k2**6 - 
     *     385560*k1**8*k2**7 - 385560*k1**7*k2**8 + 
     *        83160*k1**6*k2**9 + 219240*k1**5*k2**10 + 
     *        75600*k1**4*k2**11 + 7560*k1**3*k2**12 + 
     *        1320*k1**13*k2*k3 + 70480*k1**12*k2**2*k3 - 
     *        86091*k1**11*k2**3*k3 - 208616*k1**10*k2**4*k3 + 
     *        547066*k1**9*k2**5*k3 + 156616*k1**8*k2**6*k3 - 
     *        944330*k1**7*k2**7*k3 + 156616*k1**6*k2**8*k3 + 
     *        547066*k1**5*k2**9*k3 - 208616*k1**4*k2**10*k3 - 
     *        86091*k1**3*k2**11*k3 + 70480*k1**2*k2**12*k3 + 
     *        1320*k1*k2**13*k3 - 8250*k1**13*k3**2 + 
     *        26400*k1**12*k2*k3**2 + 
     *        571350*k1**11*k2**2*k3**2 - 
     *        269350*k1**10*k2**3*k3**2 - 
     *        2527460*k1**9*k2**4*k3**2 - 
     *        242070*k1**8*k2**5*k3**2 + 
     *        1984020*k1**7*k2**6*k3**2 + 
     *        1984020*k1**6*k2**7*k3**2 - 
     *        242070*k1**5*k2**8*k3**2 - 
     *        2527460*k1**4*k2**9*k3**2 - 
     *        269350*k1**3*k2**10*k3**2 + 
     *        571350*k1**2*k2**11*k3**2 + 
     *        26400*k1*k2**12*k3**2 - 8250*k2**13*k3**2 - 
     *        66000*k1**12*k3**3 + 75240*k1**11*k2*k3**3 + 
     *        1012840*k1**10*k2**2*k3**3 - 
     *        612656*k1**9*k2**3*k3**3 - 
     *        5103136*k1**8*k2**4*k3**3 + 
     *        401548*k1**7*k2**5*k3**3 + 
     *        8330448*k1**6*k2**6*k3**3 + 
     *        401548*k1**5*k2**7*k3**3 - 
     *        5103136*k1**4*k2**8*k3**3 - 
     *        612656*k1**3*k2**9*k3**3 + 
     *        1012840*k1**2*k2**10*k3**3 + 
     *        75240*k1*k2**11*k3**3 - 66000*k2**12*k3**3 - 
     *        74250*k1**11*k3**4 - 26400*k1**10*k2*k3**4 + 
     *        368800*k1**9*k2**2*k3**4 - 
     *        1700730*k1**8*k2**3*k3**4 - 
     *        901860*k1**7*k2**4*k3**4 + 
     *        3730880*k1**6*k2**5*k3**4 + 
     *        3730880*k1**5*k2**6*k3**4 - 
     *        901860*k1**4*k2**7*k3**4 - 
     *        1700730*k1**3*k2**8*k3**4 + 
     *        368800*k1**2*k2**9*k3**4 - 
     *        26400*k1*k2**10*k3**4 - 74250*k2**11*k3**4 + 
     *        165000*k1**10*k3**5 - 227040*k1**9*k2*k3**5 - 
     *        837720*k1**8*k2**2*k3**5 + 
     *        500817*k1**7*k2**3*k3**5 + 
     *        2002152*k1**6*k2**4*k3**5 + 
     *        1593712*k1**5*k2**5*k3**5 + 
     *        2002152*k1**4*k2**6*k3**5 + 
     *        500817*k1**3*k2**7*k3**5 - 
     *        837720*k1**2*k2**8*k3**5 - 
     *        227040*k1*k2**9*k3**5 + 165000*k2**10*k3**5 + 
     *        270600*k1**9*k3**6 - 79200*k1**8*k2*k3**6 - 
     *        1918200*k1**7*k2**2*k3**6 + 
     *        2097880*k1**6*k2**3*k3**6 + 
     *        1228360*k1**5*k2**4*k3**6 + 
     *        1228360*k1**4*k2**5*k3**6 + 
     *        2097880*k1**3*k2**6*k3**6 - 
     *        1918200*k1**2*k2**7*k3**6 - 
     *        79200*k1*k2**8*k3**6 + 270600*k2**9*k3**6 - 
     *        99000*k1**8*k3**7 + 216480*k1**7*k2*k3**7 - 
     *        1407400*k1**6*k2**2*k3**7 + 
     *        632950*k1**5*k2**3*k3**7 - 
     *        895040*k1**4*k2**4*k3**7 + 
     *        632950*k1**3*k2**5*k3**7 - 
     *        1407400*k1**2*k2**6*k3**7 + 
     *        216480*k1*k2**7*k3**7 - 99000*k2**8*k3**7 - 
     *        283800*k1**7*k3**8 + 132000*k1**6*k2*k3**8 + 
     *        705960*k1**5*k2**2*k3**8 - 
     *        535640*k1**4*k2**3*k3**8 - 
     *        535640*k1**3*k2**4*k3**8 + 
     *        705960*k1**2*k2**5*k3**8 + 
     *        132000*k1*k2**6*k3**8 - 283800*k2**7*k3**8 - 
     *        33000*k1**6*k3**9 - 59400*k1**5*k2*k3**9 + 
     *        1161800*k1**4*k2**2*k3**9 - 
     *        343920*k1**3*k2**3*k3**9 + 
     *        1161800*k1**2*k2**4*k3**9 - 
     *        59400*k1*k2**5*k3**9 - 33000*k2**6*k3**9 + 
     *        94050*k1**5*k3**10 - 52800*k1**4*k2*k3**10 + 
     *        272090*k1**3*k2**2*k3**10 + 
     *        272090*k1**2*k2**3*k3**10 - 
     *        52800*k1*k2**4*k3**10 + 94050*k2**5*k3**10 + 
     *        33000*k1**4*k3**11 - 6600*k1**3*k2*k3**11 - 
     *        6600*k1*k2**3*k3**11 + 33000*k2**4*k3**11 + 
     *        1650*k1**3*k3**12 + 1650*k2**3*k3**12)*pi*q**13 
c
      kernel_poly(13) = - (18900*k1**11*k2**3 + 151200*k1**10*k2**4 + 
     *        257040*k1**9*k2**5 - 151200*k1**8*k2**6 - 
     *        551880*k1**7*k2**7 - 151200*k1**6*k2**8 + 
     *        257040*k1**5*k2**9 + 151200*k1**4*k2**10 + 
     *        18900*k1**3*k2**11 - 1650*k1**13*k3 + 
     *        5280*k1**12*k2*k3 + 114270*k1**11*k2**2*k3 - 
     *        36734*k1**10*k2**3*k3 - 393604*k1**9*k2**4*k3 + 
     *        53394*k1**8*k2**5*k3 + 250644*k1**7*k2**6*k3 + 
     *        250644*k1**6*k2**7*k3 + 53394*k1**5*k2**8*k3 - 
     *        393604*k1**4*k2**9*k3 - 36734*k1**3*k2**10*k3 + 
     *        114270*k1**2*k2**11*k3 + 5280*k1*k2**12*k3 - 
     *        1650*k2**13*k3 - 33000*k1**12*k3**2 + 
     *        39600*k1**11*k2*k3**2 + 
     *        523400*k1**10*k2**2*k3**2 - 
     *        294890*k1**9*k2**3*k3**2 - 
     *        2301400*k1**8*k2**4*k3**2 + 
     *        17255*k1**7*k2**5*k3**2 + 
     *        3168400*k1**6*k2**6*k3**2 + 
     *        17255*k1**5*k2**7*k3**2 - 
     *        2301400*k1**4*k2**8*k3**2 - 
     *        294890*k1**3*k2**9*k3**2 + 
     *        523400*k1**2*k2**10*k3**2 + 
     *        39600*k1*k2**11*k3**2 - 33000*k2**12*k3**2 - 
     *        94050*k1**11*k3**3 + 36960*k1**10*k2*k3**3 + 
     *        625120*k1**9*k2**2*k3**3 - 
     *        693034*k1**8*k2**3*k3**3 - 
     *        1066164*k1**7*k2**4*k3**3 + 
     *        1225512*k1**6*k2**5*k3**3 + 
     *        1225512*k1**5*k2**6*k3**3 - 
     *        1066164*k1**4*k2**7*k3**3 - 
     *        693034*k1**3*k2**8*k3**3 + 
     *        625120*k1**2*k2**9*k3**3 + 
     *        36960*k1*k2**10*k3**3 - 94050*k2**11*k3**3 + 
     *        33000*k1**10*k3**4 - 105600*k1**9*k2*k3**4 - 
     *        90600*k1**8*k2**2*k3**4 + 
     *        92910*k1**7*k2**3*k3**4 + 
     *        527040*k1**6*k2**4*k3**4 + 
     *        789720*k1**5*k2**5*k3**4 + 
     *        527040*k1**4*k2**6*k3**4 + 
     *        92910*k1**3*k2**7*k3**4 - 
     *        90600*k1**2*k2**8*k3**4 - 105600*k1*k2**9*k3**4 + 
     *        33000*k2**10*k3**4 + 283800*k1**9*k3**5 - 
     *        142560*k1**8*k2*k3**5 - 
     *        1041240*k1**7*k2**2*k3**5 + 
     *        741048*k1**6*k2**3*k3**5 + 
     *        369288*k1**5*k2**4*k3**5 + 
     *        369288*k1**4*k2**5*k3**5 + 
     *        741048*k1**3*k2**6*k3**5 - 
     *        1041240*k1**2*k2**7*k3**5 - 
     *        142560*k1*k2**8*k3**5 + 283800*k2**9*k3**5 + 
     *        99000*k1**8*k3**6 + 79200*k1**7*k2*k3**6 - 
     *        1151400*k1**6*k2**2*k3**6 + 
     *        460330*k1**5*k2**3*k3**6 - 
     *        722640*k1**4*k2**4*k3**6 + 
     *        460330*k1**3*k2**5*k3**6 - 
     *        1151400*k1**2*k2**6*k3**6 + 
     *        79200*k1*k2**7*k3**6 + 99000*k2**8*k3**6 - 
     *        270600*k1**7*k3**7 + 153120*k1**6*k2*k3**7 + 
     *        11400*k1**5*k2**2*k3**7 - 
     *        280280*k1**4*k2**3*k3**7 - 
     *        280280*k1**3*k2**4*k3**7 + 
     *        11400*k1**2*k2**5*k3**7 + 153120*k1*k2**6*k3**7 - 
     *        270600*k2**7*k3**7 - 165000*k1**6*k3**8 + 
     *        718600*k1**4*k2**2*k3**8 - 
     *        206360*k1**3*k2**3*k3**8 + 
     *        718600*k1**2*k2**4*k3**8 - 165000*k2**6*k3**8 + 
     *        74250*k1**5*k3**9 - 52800*k1**4*k2*k3**9 + 
     *        290450*k1**3*k2**2*k3**9 + 
     *        290450*k1**2*k2**3*k3**9 - 52800*k1*k2**4*k3**9 + 
     *        74250*k2**5*k3**9 + 66000*k1**4*k3**10 - 
     *        13200*k1**3*k2*k3**10 - 13200*k1*k2**3*k3**10 + 
     *        66000*k2**4*k3**10 + 8250*k1**3*k3**11 + 
     *        8250*k2**3*k3**11)*pi*q**14 
c
      kernel_poly(14) = - (37800*k1**10*k2**3 + 189000*k1**9*k2**4 + 
     *        113400*k1**8*k2**5 - 340200*k1**7*k2**6 - 
     *        340200*k1**6*k2**7 + 113400*k1**5*k2**8 + 
     *        189000*k1**4*k2**9 + 37800*k1**3*k2**10 - 
     *        6600*k1**12*k3 + 7920*k1**11*k2*k3 + 
     *        104680*k1**10*k2**2*k3 - 31006*k1**9*k2**3*k3 - 
     *        371576*k1**8*k2**4*k3 + 19831*k1**7*k2**5*k3 + 
     *        536912*k1**6*k2**6*k3 + 19831*k1**5*k2**7*k3 - 
     *        371576*k1**4*k2**8*k3 - 31006*k1**3*k2**9*k3 + 
     *        104680*k1**2*k2**10*k3 + 7920*k1*k2**11*k3 - 
     *        6600*k2**12*k3 - 49500*k1**11*k3**2 + 
     *        26400*k1**10*k2*k3**2 + 
     *        344600*k1**9*k2**2*k3**2 - 
     *        302350*k1**8*k2**3*k3**2 - 
     *        680250*k1**7*k2**4*k3**2 + 
     *        346100*k1**6*k2**5*k3**2 + 
     *        346100*k1**5*k2**6*k3**2 - 
     *        680250*k1**4*k2**7*k3**2 - 
     *        302350*k1**3*k2**8*k3**2 + 
     *        344600*k1**2*k2**9*k3**2 + 
     *        26400*k1*k2**10*k3**2 - 49500*k2**11*k3**2 - 
     *        46200*k1**10*k3**3 - 10560*k1**9*k2*k3**3 + 
     *        255480*k1**8*k2**2*k3**3 - 
     *        46566*k1**7*k2**3*k3**3 - 
     *        180576*k1**6*k2**4*k3**3 + 
     *        175728*k1**5*k2**5*k3**3 - 
     *        180576*k1**4*k2**6*k3**3 - 
     *        46566*k1**3*k2**7*k3**3 + 
     *        255480*k1**2*k2**8*k3**3 - 10560*k1*k2**9*k3**3 - 
     *        46200*k2**10*k3**3 + 132000*k1**9*k3**4 - 
     *        79200*k1**8*k2*k3**4 - 351150*k1**7*k2**2*k3**4 + 
     *        256710*k1**6*k2**3*k3**4 + 
     *        59760*k1**5*k2**4*k3**4 + 
     *        59760*k1**4*k2**5*k3**4 + 
     *        256710*k1**3*k2**6*k3**4 - 
     *        351150*k1**2*k2**7*k3**4 - 79200*k1*k2**8*k3**4 + 
     *        132000*k2**9*k3**4 + 178200*k1**8*k3**5 - 
     *        15840*k1**7*k2*k3**5 - 650760*k1**6*k2**2*k3**5 + 
     *        200262*k1**5*k2**3*k3**5 - 
     *        397008*k1**4*k2**4*k3**5 + 
     *        200262*k1**3*k2**5*k3**5 - 
     *        650760*k1**2*k2**6*k3**5 - 15840*k1*k2**7*k3**5 + 
     *        178200*k2**8*k3**5 - 99000*k1**7*k3**6 + 
     *        79200*k1**6*k2*k3**6 - 173100*k1**5*k2**2*k3**6 - 
     *        151410*k1**4*k2**3*k3**6 - 
     *        151410*k1**3*k2**4*k3**6 - 
     *        173100*k1**2*k2**5*k3**6 + 79200*k1*k2**6*k3**6 - 
     *        99000*k2**7*k3**6 - 191400*k1**6*k3**7 + 
     *        31680*k1**5*k2*k3**7 + 290600*k1**4*k2**2*k3**7 - 
     *        84200*k1**3*k2**3*k3**7 + 
     *        290600*k1**2*k2**4*k3**7 + 31680*k1*k2**5*k3**7 - 
     *        191400*k2**6*k3**7 - 26400*k1**4*k2*k3**8 + 
     *        179650*k1**3*k2**2*k3**8 + 
     *        179650*k1**2*k2**3*k3**8 - 26400*k1*k2**4*k3**8 + 
     *        66000*k1**4*k3**9 - 13200*k1**3*k2*k3**9 - 
     *        13200*k1*k2**3*k3**9 + 66000*k2**4*k3**9 + 
     *        16500*k1**3*k3**10 + 16500*k2**3*k3**10)*pi*q**15 
c
      kernel_poly(15)= - (47250*k1**9*k2**3 + 120960*k1**8*k2**4 - 
     *        47250*k1**7*k2**5 - 241920*k1**6*k2**6 - 
     *        47250*k1**5*k2**7 + 120960*k1**4*k2**8 + 
     *        47250*k1**3*k2**9 - 9900*k1**11*k3 + 
     *        5280*k1**10*k2*k3 + 68920*k1**9*k2**2*k3 - 
     *        38294*k1**8*k2**3*k3 - 93714*k1**7*k2**4*k3 + 
     *        65188*k1**6*k2**5*k3 + 65188*k1**5*k2**6*k3 - 
     *        93714*k1**4*k2**7*k3 - 38294*k1**3*k2**8*k3 + 
     *        68920*k1**2*k2**9*k3 + 5280*k1*k2**10*k3 - 
     *        9900*k2**11*k3 - 33000*k1**10*k3**2 + 
     *        6600*k1**9*k2*k3**2 + 171000*k1**8*k2**2*k3**2 - 
     *        72375*k1**7*k2**3*k3**2 - 
     *        218640*k1**6*k2**4*k3**2 + 
     *        2400*k1**5*k2**5*k3**2 - 
     *        218640*k1**4*k2**6*k3**2 - 
     *        72375*k1**3*k2**7*k3**2 + 
     *        171000*k1**2*k2**8*k3**2 + 6600*k1*k2**9*k3**2 - 
     *        33000*k2**10*k3**2 + 13200*k1**9*k3**3 - 
     *        15840*k1**8*k2*k3**3 - 1830*k1**7*k2**2*k3**3 + 
     *        17526*k1**6*k2**3*k3**3 - 
     *        31944*k1**5*k2**4*k3**3 - 
     *        31944*k1**4*k2**5*k3**3 + 
     *        17526*k1**3*k2**6*k3**3 - 
     *        1830*k1**2*k2**7*k3**3 - 15840*k1*k2**8*k3**3 + 
     *        13200*k2**9*k3**3 + 99000*k1**8*k3**4 - 
     *        19800*k1**7*k2*k3**4 - 262800*k1**6*k2**2*k3**4 + 
     *        71490*k1**5*k2**3*k3**4 - 
     *        202320*k1**4*k2**4*k3**4 + 
     *        71490*k1**3*k2**5*k3**4 - 
     *        262800*k1**2*k2**6*k3**4 - 19800*k1*k2**7*k3**4 + 
     *        99000*k2**8*k3**4 + 19800*k1**7*k3**5 + 
     *        15840*k1**6*k2*k3**5 - 139740*k1**5*k2**2*k3**5 - 
     *        61002*k1**4*k2**3*k3**5 - 
     *        61002*k1**3*k2**4*k3**5 - 
     *        139740*k1**2*k2**5*k3**5 + 15840*k1*k2**6*k3**5 + 
     *        19800*k2**7*k3**5 - 99000*k1**6*k3**6 + 
     *        19800*k1**5*k2*k3**6 + 91800*k1**4*k2**2*k3**6 - 
     *        30540*k1**3*k2**3*k3**6 + 
     *        91800*k1**2*k2**4*k3**6 + 19800*k1*k2**5*k3**6 - 
     *        99000*k2**6*k3**6 - 39600*k1**5*k3**7 - 
     *        5280*k1**4*k2*k3**7 + 72650*k1**3*k2**2*k3**7 + 
     *        72650*k1**2*k2**3*k3**7 - 5280*k1*k2**4*k3**7 - 
     *        39600*k2**5*k3**7 + 33000*k1**4*k3**8 - 
     *        6600*k1**3*k2*k3**8 - 6600*k1*k2**3*k3**8 + 
     *        33000*k2**4*k3**8 + 16500*k1**3*k3**9 + 
     *        16500*k2**3*k3**9)*pi*q**16 
c
      kernel_poly(16) = - (30240*k1**8*k2**3 + 30240*k1**7*k2**4 - 
     *        60480*k1**6*k2**5 - 60480*k1**5*k2**6 + 
     *        30240*k1**4*k2**7 + 30240*k1**3*k2**8 - 
     *        6600*k1**10*k3 + 1320*k1**9*k2*k3 + 
     *        34200*k1**8*k2**2*k3 - 3891*k1**7*k2**3*k3 - 
     *        27600*k1**6*k2**4*k3 + 4512*k1**5*k2**5*k3 - 
     *        27600*k1**4*k2**6*k3 - 3891*k1**3*k2**7*k3 + 
     *        34200*k1**2*k2**8*k3 + 1320*k1*k2**9*k3 - 
     *        6600*k2**10*k3 - 8250*k1**9*k3**2 + 
     *        42750*k1**7*k2**2*k3**2 - 
     *        31110*k1**6*k2**3*k3**2 - 
     *        43710*k1**5*k2**4*k3**2 - 
     *        43710*k1**4*k2**5*k3**2 - 
     *        31110*k1**3*k2**6*k3**2 + 
     *        42750*k1**2*k2**7*k3**2 - 8250*k2**9*k3**2 + 
     *        19800*k1**8*k3**3 - 3960*k1**7*k2*k3**3 - 
     *        52560*k1**6*k2**2*k3**3 + 
     *        12744*k1**5*k2**3*k3**3 - 
     *        32400*k1**4*k2**4*k3**3 + 
     *        12744*k1**3*k2**5*k3**3 - 
     *        52560*k1**2*k2**6*k3**3 - 3960*k1*k2**7*k3**3 + 
     *        19800*k2**8*k3**3 + 24750*k1**7*k3**4 - 
     *        65700*k1**5*k2**2*k3**4 - 
     *        30330*k1**4*k2**3*k3**4 - 
     *        30330*k1**3*k2**4*k3**4 - 
     *        65700*k1**2*k2**5*k3**4 + 24750*k2**7*k3**4 - 
     *        19800*k1**6*k3**5 + 3960*k1**5*k2*k3**5 + 
     *        18360*k1**4*k2**2*k3**5 - 
     *        5688*k1**3*k2**3*k3**5 + 
     *        18360*k1**2*k2**4*k3**5 + 3960*k1*k2**5*k3**5 - 
     *        19800*k2**6*k3**5 - 24750*k1**5*k3**6 + 
     *        22950*k1**3*k2**2*k3**6 + 
     *        22950*k1**2*k2**3*k3**6 - 24750*k2**5*k3**6 + 
     *        6600*k1**4*k3**7 - 1320*k1**3*k2*k3**7 - 
     *        1320*k1*k2**3*k3**7 + 6600*k2**4*k3**7 + 
     *        8250*k1**3*k3**8 + 8250*k2**3*k3**8)*pi*q**17 
c
      kernel_poly(17) = - (7560*k1**7*k2**3 - 15120*k1**5*k2**5 + 
     *        7560*k1**3*k2**7 - 1650*k1**9*k3 + 
     *        8550*k1**7*k2**2*k3 - 2190*k1**6*k2**3*k3 - 
     *        4710*k1**5*k2**4*k3 - 4710*k1**4*k2**5*k3 - 
     *        2190*k1**3*k2**6*k3 + 8550*k1**2*k2**7*k3 - 
     *        1650*k2**9*k3 - 5040*k1**5*k2**3*k3**2 - 
     *        5040*k1**3*k2**5*k3**2 + 4950*k1**7*k3**3 - 
     *        13140*k1**5*k2**2*k3**3 - 4050*k1**4*k2**3*k3**3 - 
     *        4050*k1**3*k2**4*k3**3 - 13140*k1**2*k2**5*k3**3 + 
     *        4950*k2**7*k3**3 - 2520*k1**3*k2**3*k3**4 - 
     *        4950*k1**5*k3**5 + 4590*k1**3*k2**2*k3**5 + 
     *        4590*k1**2*k2**3*k3**5 - 4950*k2**5*k3**5 + 
     *        1650*k1**3*k3**7 + 1650*k2**3*k3**7)*pi*q**18
c
      kernel_beta(1) = (pi*((-840*k1**10*k2**7*
     *           (k2**2 - q**2)**2*
     *           (-8*k3**4 + 5*k3**2*q**2 + 3*q**4))/
     *           dsqrt(k3**2*(k2**2 - q**2) + 
     *           q**2*(k1**2 - k2**2 + q**2)) - 
     *           (840*k1**7*k2**10*(k1**2 - q**2)**2*
     *           (-8*k3**4 + 5*k3**2*q**2 + 3*q**4))/
     *           dsqrt(k3**2*(k1**2 - q**2) + 
     *           q**2*(-k1**2 + k2**2 + q**2)) + 
     *           (17280*k1**7*k2**7*k3**3*(k1**2 - q**2)**2*
     *           (k2**2 - q**2)**2)/
     *           dsqrt(k1**2*(k2**2 - q**2) + 
     *           q**2*(-k2**2 + k3**2 + q**2)) - 
     *           (17280*k1**7*k2**7*k3**3*(k1**2 - q**2)**2*
     *           (k2**2 - q**2)**2*
     *           (1 - dsqrt(k1**2*k2**2 + 
     *           (-k1**2 - k2**2 + k3**2)*q**2 + q**4)/
     *           (k3*q))**2)/
     *           (dsqrt(k1**2*(k2**2 - q**2) + 
     *           q**2*(-k2**2 + k3**2 + q**2))*
     *           (1 + dsqrt(k1**2*k2**2 + 
     *           (-k1**2 - k2**2 + k3**2)*q**2 + q**4)/
     *           (k3*q))**2) + 
     *           (840*k1**7*k2**10*(k1**2 - q**2)**2*
     *           (-8*k3**4 + 5*k3**2*q**2 + 3*q**4)*
     *           (1 - dsqrt(k1**2*k3**2 - 
     *           (k1**2 - k2**2 + k3**2)*q**2 + q**4)/
     *           (k2*q))**2)/
     *           (dsqrt(k3**2*(k1**2 - q**2) + 
     *           q**2*(-k1**2 + k2**2 + q**2))*
     *           (1 + dsqrt(k1**2*k3**2 - 
     *           (k1**2 - k2**2 + k3**2)*q**2 + q**4)/
     *           (k2*q))**2) + 
     *           (840*k1**10*k2**7*(k2**2 - q**2)**2*
     *           (-8*k3**4 + 5*k3**2*q**2 + 3*q**4)*
     *           (1 - dsqrt(k2**2*k3**2 - 
     *           (-k1**2 + k2**2 + k3**2)*q**2 + q**4)/
     *           (k1*q))**2)/
     *           (dsqrt(k3**2*(k2**2 - q**2) + 
     *           q**2*(k1**2 - k2**2 + q**2))*
     *           (1 + dsqrt(k2**2*k3**2 - 
     *           (-k1**2 + k2**2 + k3**2)*q**2 + q**4)/
     *           (k1*q))**2)))/(2.483712e7*k1**9*k2**9*q**5) 
c     
      kernel_beta(2) = - 
     *     (pi*(k1**2- q**2)*
     *      (13*k1**12 + 55*k2**6*q**6 - 
     *       k1**10*(194*k2**2 + 649*q**2) + 
     *       k1**8*(17*k2**4 + 2297*k2**2*q**2 + 563*q**4) + 
     *       k3**6*(329*k1**6 + 647*k1**4*q**2 - 
     *          921*k1**2*q**4 - 55*q**6) + 
     *       k1**6*(164*k2**6 - 2155*k2**4*q**2 - 
     *          2428*k2**2*q**4 + 73*q**6) + 
     *       k1**4*(339*k2**6*q**2 + 2423*k2**4*q**4 + 
     *          157*k2**2*q**6) - 
     *       3*k1**2*(186*k2**6*q**4 + 95*k2**4*q**6) + 
     *       k3**4*(1579*k1**8 + 165*k2**2*q**6 + 
     *          k1**6*(306*k2**2 - 1759*q**2) + 
     *          k1**4*(-1307*k2**2*q**2 + 333*q**4) + 
     *          3*k1**2*(428*k2**2*q**4 - 51*q**6)) + 
     *       k3**2*(-1921*k1**10 - 165*k2**4*q**6 + 
     *          3*k1**8*(392*k2**2 + 971*q**2) + 
     *          k1**6*(801*k2**4 - 3414*k2**2*q**2 + 25*q**4) + 
     *          k1**4*(321*k2**4*q**2 - 784*k2**2*q**4 + 
     *             135*q**6) + 
     *          3*k1**2*(65*k2**4*q**4 + 146*k2**2*q**6)))*
     *     (k1+q)**2*small_beta(k1, q))/
     *   (1.655808e6*k1**9*k2**2*q**5) 
c
      kernel_beta(3) = - 
     *  (pi*(k2**2 - q**2)*
     *     (k3**6*(329*k2**6 + 647*k2**4*q**2 - 
     *          921*k2**2*q**4 - 55*q**6) + 
     *       k1**6*(164*k2**6 + 339*k2**4*q**2 - 
     *          558*k2**2*q**4 + 55*q**6) + 
     *       k2**6*(13*k2**6 - 649*k2**4*q**2 + 
     *          563*k2**2*q**4 + 73*q**6) + 
     *       k1**4*(17*k2**8 - 2155*k2**6*q**2 + 
     *          2423*k2**4*q**4 - 285*k2**2*q**6) + 
     *       k1**2*(-194*k2**10 + 2297*k2**8*q**2 - 
     *          2428*k2**6*q**4 + 157*k2**4*q**6) + 
     *       k3**4*(1579*k2**8 - 1759*k2**6*q**2 + 
     *          333*k2**4*q**4 - 153*k2**2*q**6 + 
     *          k1**2*(306*k2**6 - 1307*k2**4*q**2 + 
     *             1284*k2**2*q**4 + 165*q**6)) + 
     *       k3**2*(-1921*k2**10 + 2913*k2**8*q**2 + 
     *          25*k2**6*q**4 + 135*k2**4*q**6 + 
     *          3*k1**4*(267*k2**6 + 107*k2**4*q**2 + 
     *             65*k2**2*q**4 - 55*q**6) + 
     *          2*k1**2*(588*k2**8 - 1707*k2**6*q**2 - 
     *             392*k2**4*q**4 + 219*k2**2*q**6)))*
     *     (k2+q)**2*small_beta(k2, q))/
     *   (1.655808e6*k1**2*k2**9*q**5) 
c
      kernel_beta(4) =
     *  (pi*(8*k3**2 + 3*q**2)*
     *     (-15*(k1**2 + k2**2)*k3**8 - 2*k3**10 - 
     *       3*(k1**2 - k2**2)**2*q**4*
     *        (k1**2 + k2**2 + 4*q**2) + 
     *       2*k3**6*(8*k1**4 + 8*k2**4 + 23*k2**2*q**2 - 
     *          q**4 + k1**2*(-16*k2**2 + 23*q**2)) + 
     *       k3**4*(k1**6 + k2**6 - 56*k2**4*q**2 - 
     *          47*k2**2*q**4 + 4*q**6 - 
     *          k1**4*(9*k2**2 + 56*q**2) + 
     *          k1**2*(-9*k2**4 + 136*k2**2*q**2 - 47*q**4)) + 
     *       2*k3**2*q**2*(k1**6 + k2**6 + 26*k2**4*q**2 + 
     *          4*k2**2*q**4 - k1**4*(k2**2 - 26*q**2) - 
     *          k1**2*(k2**4 + 48*k2**2*q**2 - 4*q**4)))*
     *     (k3+q)**2*small_beta(k3, q))/
     *   (236544.*k1**2*k2**2*k3**5*q**5)  
c
      kernel_beta(5) = 
     *     (3*k3**3*pi*(k1**2 - q**2)*(k2**2 - q**2)*
     *     big_beta(k1, k2, k3, q)) / (4312.*k1**2*k2**2*q**5) - 
     *     (k2*pi*(k1**2 - q**2)*(-8*k3**2 - 3*q**2)* 
     *     big_beta(k3, k1, k2, q)) / (29568.*k1**2*q**5) - 
     *     (k1*pi*(k2**2 - q**2)*(-8*k3**2 - 3*q**2)* 
     *     big_beta(k2, k3, k1, q)) / (29568.*k2**2*q**5)
c
c
      kernel_poly_sum = 0.d0
      do i = 1, 17
         kernel_poly_sum = kernel_poly_sum + kernel_poly (i) /
     c        (776160.d0*k1**5*k2**5*k3*q**4*(k1 + q)**4*(k2 + q)**4*
     c        (k3 + q)**5) 
cc         write(6,'(A,i3,A,1p1e18.10)') 
cc     &        'kernel_poly(',i,')=',kernel_poly(i)
      enddo
c
      kernel_beta_sum = 0.d0
      do i=1, 5
         kernel_beta_sum = kernel_beta_sum + kernel_beta(i)
cc         write(6,'(A,i3,A,1p1e18.10)') 
cc     &        'kernel_beta(',i,')=', kernel_beta(i)
      enddo
c
      kernel_Gamma2v_reg3rd = kernel_poly_sum + kernel_beta_sum
c
c     /////// Multiplied by factor 4 ///////
      kernel_Gamma2v_reg3rd = 4.d0 * kernel_Gamma2v_reg3rd 
c
      end
c
